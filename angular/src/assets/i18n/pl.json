{
    "page": {
        "home": {
            "title": "Angular w kilku słowach",
            "p1": "Angular jest schematem (ang. Framework)  tworzenia kodu w TypeScript opracowanym przez Google przeznaczonym do tworzenia aplikacji internetowych uruchamianych po stronie klienta w przeglądarce. Został opublikowany w 2010 roku przez co jest najstarszym schematem spośród opracowywanych na rzecz tego projektu [React, Vue]. W maju 2016 roku została opublikowana nowa wersja Angulara oznaczona wersją 2. Była to bardzo duża zmiana, która zastąpiła pierwszą wersję tego schamatu nazywaną powszechnie jako AngularJS. Projekt został napisany na nowo całkowicie zmieniając podejście do tworzenia kodu aplikacji, która była niezależną aplikacją, a nie wtyczką do istniejącej strony. Od tego czasu główne założenia się nie zmieniły, ale co roku publikowane są nowe wersje wprowadzające pewne rozwiązania znane z innych współczesnych systemów. Obecnie dostępna jest wersja oznaczona numerem 16, która zmienia podejście do aktualizacji struktury DOM wprowadzając technologię Sygnałów.",
            "p2": "Aplikacje internetowe mogą być tworzone poprzez łatwe w komponowaniu, proste w enkapsulacji i z możliwością wielokrotnego użytku komponenty Angularowe. Z założenia komponenty przyjmują pewne dane wejściowe, wykonują określone operacje na nich w oparciu o zdefiniowaną logikę. Wewnętrzne metody, można wykorzystać, aby zmieniać stan, albo zachowanie komponentu co może się objawiać zmianami w strukturze drzewa DOM. Złożona składania oraz wymuszane korzystanie ze wzorców projektowych sprawia, że próg wejścia do tworzenia aplikacji w Angularze może odrzucać początkujących programistów. Natomiast zgłębienie pewnych zasad pozwoli lepiej opanować pewne aspekty z inżynierii oprogramowania, dlatego dla ludzi który pracują z językami mocno typowanymi z mocną znajomością pewnych wzorców łatwiej odnajtują się w tym schemacie. Angular opiera się na wzorcu MVC (Model - Widok - Kontroler), w którym to każdy komponent ma oddzieloną część odpowiedzalną za prezentację danych i warstwę odpowiedzalną za logikę komponentu. Oprócz tego w Angularze można się spotkać ze wzorcem 'serwisów', czy innych rozwiązań znanych z programowania obiektowego (OOP) takich jak dziedziczenie, enkapsulacja czy tworzenie interfejsów. Te określone zasady pozwalają utrzymywać strukturę kodu w porządku, przez co łatwiej zarządzać dużymi projekatmi w którym to wielu deweloperów musi współpracować przy towrzeniu wysoce interaktywnej aplikacji internetowej.",
            "p3": "Pakiet Angular zawiera w sobie pełen zestaw narzędzi deweloperskich potrzebnych do tworzenia aplikacji internetowych takich jak np. CLI, routing, klient HTTP czy nawet narzędzie to testów E2E. Nie musisz szukać zewnętrznych bibliotek do swojego projektu, wystarczy jedynie używając interfejsu konsolowego (CLI) utworzyć projekt i zacząć kodować. Komponenty można tworzyć również wywołując odpowiednie polecenia: `<code>ng generate component component-name</code>`. Cały pakiet jest dobrze udokumentowany i wszelkie szczegóły działania poszczególnych modułów można sprawdzić na oficjalnej stronie.",
            "p4": "Twórcy Angulara dostarczają wraz z bazową biblioteką, dodatkową paczkę gotowych komponentów nazwaną “Angular Material” dzięki której łatwo można zacząć prototypowanie swojej aplikacji internetowej. Zespół deweloperski Google utrzymuje bibliotekę cały czas w kompatybilności z najnowszymi wydaniami bazowej paczki."
        },
        "initialization": {
            "title": "Inicjalizacja projektu",
            "p1": "Angular zapewnia zbiór narzędzi pozwalających na postawienie nowego projektu jedną komendą. Narzędzie CLI pozwala tworzyć pakiety, komponenty oraz inne elementy całego ekosystemu. Angular CLI domyślnie kompiluje projekt w oparciu o podejście AOT (Ahead of Time) dzięki czemu wprowadzona zmiana jest szybciej renderowana przez przeglądarkę. Dodatkowo od wersji 9 Angular domyślnie korzysta z silnika Ivy do renderowania komponentów.",
            "p2": "Dla bardziej zaawansowanych użytkowników jest możliwy szeroki wachlarz modyfikacji zarządzania projektem. Od wersji 14 Angulara można wykorzystać popularne narzędzie Vite do kompilacji kodu. Zamiast narzędzi testowych takich jak 'karma-jasmine' można skorzystać z popularnego 'Jest' itd. Angular pozwala też na zarządzanie wieloma projektami jednocześnie za pomocą wspólnego modułu. Dlatego świetnie się sprawdza przy dużych projektach.",
            "installation": {
                "title": "Instalacja Angulara",
                "p1": "Instalacja wymaga od użytkownika jedynie zainstalowanego środowiska Node.js. Następnym krokiem jest instalacja narzędzia CLI poleceniem:",
                "p2": "Menedżer pakietów zainstaluje interfejs CLI globalnie w całym systemie dzięki czemu możliwe będzie wywoływanie polecenia 'ng'."
            },
            "project": {
                "title": "Tworzenie projektu",
                "p1": "W celu utworzenia nowego projektu wywołaj polecenie:",
                "p2": "Po przejściu konfiguracji początkowej wygenerowane zostaną pliki startowe wraz ze strukturą katalogów będącą podstawą do dalszego rozwoju projektu"
            },
            "serve": {
                "title": "Uruchomienie projektu",
                "p1": "Ostatecznie po utworzeniu projektu można uruchomić serwer deweloperski pozwalający natychmiast zobaczyć zminay w kodzie. Pliki źródłowe są obserwowane pod względem zmian i są na bieżąco kompilowane przez silnik."
            }
        },
        "components": {
            "title": "Wprowadzenie do komponentów",
            "p1": "Podstawowym i najmniejszym blokiem, z którego są budowane aplikacje internetowe w Angularze to komponent. Najczęściej jest to klasa TypeScript oznaczona dekoratorem @Component() w którym podawane są takie rzeczy jak szablon HTML oraz jego arkusze stylów. Szablony komponentów pisane są w HTML wzbogaconym dodatkowymi dyrektywami (dynamicznymi atrybutami) pozwalającym na wprowadzanie wyrażeń logicznych.  Arkusze stylów są dedykowane dla pojedynczych komponentów przez co nie ma problemu z nakładającymi się motywami. ",
            "p2": "Komponenty mogą różnić się układem i funkcjonalnością. Istnieje wiele „dobrych praktyk” projektowania komponentów dla aplikacji. Jednym z nich jest stosowany w Angularze wzorzec „Component-Container” znany również jako „Smart and Dumb Components”. Koncepcja jest prosta - „Container” (lub komponent „Smart”) odpowiada za każdą logikę i przepływ danych. Komponent „Dumb” (lub „Component” zwany także „Komponentem prezentacji”) jest odpowiedzialny za renderowanie danych i układu. Ten wzór zostanie wyjaśniony w dalszej części portalu. Ale jak widać, komponenty mogą być bardzo prostym szablonem HTML, ale mogą również odpowiadać za bardzo złożoną logikę, która może pobierać dane z serwera i je przetwarzać. Ale zaczynając od zera, pozwól, że przedstawię Ci podstawowy komponent Angulara.",            
            "p3": "Komponentem w Angularze jest odpowiednia klasa TypeScript oznaczona dekoratorem @Component, która według powszechnej praktyki umieszczana jest w pliku *.component.ts. Przykładoy kod takiego komponentu został podany poniżej poniżej jako single.component.ts. Każdy komponent można traktować jako klasyczną klasę ES6 w której mogą być zdefiniowane metody i właściwości odpowiednio enkapsulowane modyfikatorami dostępu. Z założenia dostęp do właściwości i metod jest zablokowany dla innych komponentów, ale przy użyciu odpowiednich dekoratorów możliwe będzie udostępnianie pewnych danych do innych komponentów. Szczegóy jak to zrobić zoastaną wytłumaczone w dalszej części.",
            "sfc": {
                "title": "Single File Component (Jeden plik na komponent)",
                "p1": "Podejście ‘Jeden plik na komponent’ jest możliwe w Angularze, ale rzadko można się z nim spotkać. Koncepcja zakłada, że definiujesz swój komponent ze wszystkimi szablonami logiki i stylami w jednym pliku, a następnie możesz go używać w innych komponentach.",
                "p2": "dekorator wymaga co najmniej dwóch właściwości, aby poprawnie zdefiniować komponent.",
                "selector": "Określna nazwę znacznika, poprzez który ten komponent będzie powiązany z klasą",
                "template": "definiuje szablon lub wskazuje lokalizację pliku HTML, który będzie szkieletem renderowanego komponentu.",
                "styles": "(Opcjonalnie) — definiuje style lub położenie pliku arkusza stylów."
            },
            "basic": {
                "title": "Podstawowy komponent angularowy",
                "p1": "Częściej spotykanym podejściem jest definiowanie komponentu z wydzielonymi plikami *.html i *.css znajdującymi się w tym samym katalogu co *.component.ts. Jest to dobra praktyka, która pomaga uporządkować kod i ułatwia jego utrzymanie. Współczesne edytory kodu podświetlają składnię i zapewniają powiązania między szablonem a klasą zapewniając funkcję dopowiadania składni czy uzupełniania kodu. Dużą zaletą jest to, że w tym podejściu używa się wzorca projektowego MVC, w którym V (Widok) jest definicją szablonu komponentu, a C (Kontroler) jest klasą komponentu. Zostało jeszcze M (model)? Model może znajdować się w plikach zewnętrznych, które definiują dodatkowe klasy i interfejsy."
            },
            "usage": {
                "title": "Używanie komponentów",
                "p1": "Kiedy przygotowana jest już definicja komponentu to najwyższa pora na wykorzystanie go w boju. W szablonie HTML innego komponentu, musisz dodać znaczniki, które zdefiniowałeś w sekcji „selektor” w dekoratorze w poprzednim komponencie. I to wszystko! Każdy projekt Angular ma główny komponent, który domyślnie nosi nazwę app.component.ts. Tak więc w powiązanym pliku app.component.html możesz dodać następujący kod, aby zobaczyć swój nowy komponent: ",
                "p2": "Upewnij się, że Twój komponent został dodany do prawidłowego modułu. Domyślnie dla Angular moduł root jest zdefiniowany w pliku app.module.ts. Użytkownicy mogą również definiować własne moduły. Ta funkcja pomaga w łatwym utrzymaniu struktury projektu. "
            },
            "root": {
                "title": "Root Component (Komponent Główny)",
                "p1": "Każda aplikacja musi mieć początek, w którym wszystko jest inicjowane. W projekcie Angular możesz znaleźć plik index.html w którym wewnątrz znacznika body znajduje się selektor „app-root”. Jest to domyślne odwołanie do komponentu głównego, który nazywa się app.component.ts. To nie jest ścisła definicja, jeśli chcesz to możesz to zmienić bez problemu."
            }
        }
    }
}