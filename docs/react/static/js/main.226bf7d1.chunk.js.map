{"version":3,"sources":["layout/Navbar.tsx","layout/Topbar.tsx","views/Basic.tsx","router.ts","views/Home.tsx","views/Initialization.tsx","views/Props.tsx","views/Slots.tsx","views/Extend.tsx","views/Directives.tsx","views/StoreView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","state","to","React","Topbar","className","Basic","routes","path","name","component","welcomeMessage","this","exact","href","ren","App","map","route","index","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qOAcqBA,E,4MACnBC,MAAe,G,4CAIf,WACE,OACE,8BACI,8BACI,8BACI,+BACI,6BAAI,cAAC,IAAD,CAAMC,GAAG,IAAT,oBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,0BAAT,sCACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,oBAAT,iCACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,mBAAT,oCACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,mBAAT,oCACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,oBAAT,oCACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,IAAT,uBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,wBAAT,0BACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,mBAAT,0C,GAnBUC,aCRfC,G,kKAEnB,WACE,OACI,qBAAKC,UAAU,SAAf,SACI,kD,GALwBF,c,gBCCfG,E,4JAEnB,WACE,OACI,gCACI,wDAEA,6WAKoD,qDALpD,uMAWA,cAAC,IAAD,CAAWD,UAAU,MAArB,yPAYA,4VAKuC,mDALvC,wDAMiD,sCANjD,sKAWA,uDAEA,6LAGyB,mDAHzB,qDAIuC,4CAJvC,0CAQA,cAAC,IAAD,CAAWA,UAAU,aAArB,6IAQA,8OAMA,iDAEA,4NAOA,cAAC,IAAD,CAAWA,UAAU,aAArB,6H,GA1EuBF,aCkDpBI,EA/CgB,CAC3B,CACIC,KAAM,IACNC,KAAM,YACNC,U,4MCHNT,MAAe,CACbU,eAAgB,e,4CAGlB,WACE,OACE,gCACI,6BAAKC,KAAKX,MAAMU,iBAChB,6oBAYA,meAUA,ke,GA/BwBR,aDK1BU,OAAO,GAEX,CACIL,KAAM,0BACNC,KAAM,yBACNC,U,4JEbN,WACE,OACI,gCACI,wDAEA,uMAGsB,mBAAGI,KAAK,+CAAR,8BAHtB,yDAOA,gFAEA,0HAIA,uEAEA,gEAEA,uGAIA,wD,GA5B2BX,aFgB/BU,OAAO,GAEX,CACIL,KAAM,oBACNC,KAAM,mBACNC,UAAWJ,EACXO,OAAO,GACR,CACCL,KAAM,mBACNC,KAAM,kBACNC,U,4JGtBN,WACE,OACI,gCACI,wEAEA,gUAOA,yDAIA,2aAOI,6DAPJ,mCAQI,+BAAQ,QARZ,uFAYA,cAAC,IAAD,CAAWL,UAAU,aAArB,wSAcA,oDAEA,sxBAYA,cAAC,IAAD,CAAWA,UAAU,aAArB,uGAMA,mOAMA,cAAC,IAAD,CAAWA,UAAU,aAArB,6JAQA,cAAC,IAAD,CAAWA,UAAU,aAArB,iFAKA,0EAC6C,gDAD7C,+CAEqC,kDAFrC,yHAMA,mDAEA,yLAEoE,+BAAQ,cAF5E,kOAQA,cAAC,IAAD,CAAWA,UAAU,aAArB,+RAcA,iDAEA,oQAMA,0TAIyD,+BAAQ,QAJjE,iFAQA,8FACiE,oDADjE,oFAGI,gDAHJ,oKAKiB,kDALjB,8KAO2C,gDAP3C,yCAUA,cAAC,IAAD,CAAWA,UAAU,aAArB,gdAoBA,mIAE2B,kDAF3B,gBAEmE,8CAFnE,0CAG2C,2CAH3C,6FAIoE,+CAJpE,8LASA,cAAC,IAAD,CAAWA,UAAU,aAArB,wdAsBA,0CACa,iDADb,QAC4C,8CAD5C,oF,GA9L8BF,aHyBlCU,OAAO,GACR,CACCL,KAAM,mBACNC,KAAM,kBACNC,U,4JI3BJ,WACI,OACI,gCACI,oDAEA,wJAE0D,4CAF1D,qBAGsB,yCAHtB,yGAKI,yCALJ,mCAQA,gDAEA,cAAC,IAAD,CAAWL,UAAU,aAArB,4SAeA,cAAC,IAAD,CAAWA,UAAU,aAArB,yaAiBA,gDAEA,+IAKA,cAAC,IAAD,CAAWA,UAAU,aAArB,mUAeA,cAAC,IAAD,CAAWA,UAAU,aAArB,ma,GAvE0BF,aJ8BlCU,OAAO,GACR,CACCL,KAAM,oBACNC,KAAM,mBACNC,U,4JKhCN,WACE,OACI,gCACI,yDAEA,8YAKoD,mBAAGI,KAAK,2DAAR,oBALpD,QAQA,kIAE8B,6CAF9B,wTASA,cAAC,IAAD,CAAWT,UAAU,aAArB,wVAoBA,8FACgE,yCADhE,2EAKA,2DAEA,mXAOA,2aAQA,cAAC,IAAD,CAAWA,UAAU,aAArB,gsBA2BA,cAAC,IAAD,CAAWA,UAAU,aAArB,oJAQA,oPAMA,0FAC6D,mBAAGS,KAAK,wDAAR,oCAD7D,gFAEiF,mBAAGA,KAAK,2CAAR,oC,GA7GzDX,aLmC5BU,OAAO,GACR,CACCL,KAAM,wBACNC,KAAM,uBACNC,U,4MMnCJT,MAAe,CACXc,IAAK,CAAC,GAAI,GAAI,K,4CAIlB,WACI,OACI,gCACI,yDAEA,sHAIA,0gBASA,qDAEA,gWAOA,cAAC,IAAD,CAAWV,UAAU,aAArB,mKAWA,oKAKA,wDAEA,sOAMA,cAAC,IAAD,CAAWA,UAAU,aAArB,ydAqBA,kgBASA,uDAEA,kMAGI,wCAHJ,+GAOA,cAAC,IAAD,CAAWA,UAAU,aAArB,8JASA,sIAIA,8HAIA,cAAC,IAAD,CAAWA,UAAU,aAArB,sOAYA,oDAEA,yPAMA,cAAC,IAAD,CAAWA,UAAU,aAArB,2HAQA,2HAEI,uCAFJ,qEAIA,yQAMA,cAAC,IAAD,CAAWA,UAAU,aAArB,qIAQA,6cAQA,cAAC,IAAD,CAAWA,UAAU,aAArB,mJAQA,2RAOA,cAAC,IAAD,CAAWA,UAAU,aAArB,wN,GAvLwBF,aNsChCU,OAAO,GACR,CACCL,KAAM,mBACNC,KAAM,kBACNC,U,4JO1CJ,WACI,OACI,gCACI,kEAEA,wcAQA,gZAQA,iFACoD,yCADpD,uEAE8C,2DAF9C,gEAGiD,mBAAGI,KAAK,iDAAR,wCAGjD,iIAEM,4CAFN,8IAMA,cAAC,IAAD,CAAWT,UAAU,aAArB,oPAgBA,yDAEA,+SAIQ,gDAJR,sDAIoF,2CAJpF,2DAUA,cAAC,IAAD,CAAWA,UAAU,aAArB,qXAmBA,wGAC2E,iDAD3E,UAEW,4CAFX,cAKA,cAAC,IAAD,CAAWA,UAAU,aAArB,kNAYA,6HAEsB,+CAFtB,yHAIU,iDAJV,yFAK4C,yCAL5C,eAQA,cAAC,IAAD,CAAWA,UAAU,aAArB,8VAkBA,mGAEI,mBAAGS,KAAK,qEAAR,oCAFJ,qM,GA7HuBX,aP6C/BU,OAAO,I,OQNAG,MAhCf,WACE,OACE,8BACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,iCACE,cAAC,EAAD,MAGF,+BACE,kCACE,cAAC,IAAD,UACGT,EAAOU,KAAI,SAACC,EAAOC,GAAR,OACV,cAAC,IAAD,CAEEX,KAAMU,EAAMV,KACZK,MAAOK,EAAML,MACbO,OAAQ,SAACC,GAAD,OACN,cAACH,EAAMR,UAAP,2BAAqBW,GAAWH,EAAMG,UAJnCF,YAYf,iCC1BOG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.226bf7d1.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Navbar.css';\nimport {\n    Link\n  } from \"react-router-dom\";\n\ninterface Props {\n    // framework: String;\n};\n\ninterface State {\n//   welcomeMessage: String;\n};\n\nexport default class Navbar extends React.Component<Props, State> {\n  state: State = {\n    // welcomeMessage: 'Hello from '\n  };\n\n  render () {\n    return (\n      <div>\n          <nav>\n              <div>\n                  <ul>\n                      <li><Link to=\"/\">Home</Link></li>\n                      <li><Link to=\"/project-initialization\">Project initialization</Link></li>\n                      <li><Link to=\"/simple-component\">Component Example</Link></li>\n                      <li><Link to=\"/props-component\">Component Parameters</Link></li>\n                      <li><Link to=\"/slots-component\">Component Projection</Link></li>\n                      <li><Link to=\"/extend-component\">Extending components</Link></li>\n                      <li><Link to=\"/\">Service</Link></li>\n                      <li><Link to=\"/directives-component\">Directives</Link></li>\n                      <li><Link to=\"/store-component\">Store concept</Link></li>\n                  </ul>\n              </div>\n          </nav>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport './Topbar.css';\n\ninterface Props {};\ninterface State {};\n\nexport default class Topbar extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div className=\"topbar\">\n            <h1>React page</h1>\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props {};\ninterface State {};\n\nexport default class Basic extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Component Introduction</h1>\n\n            <p>\n                React is build of \"Elements\" which are the smallest building blocks \n                of the application. Elements are parts of something larger that could \n                be called a \"Component\" but that will be presented later. React Element is \n                a plain object managed by React DOM. All that elements are attached to \n                the single root element in the HTML file. Using <code>ReactDOM.render()</code> method\n                we can pass that small element into a root DOM node. That element is immutable \n                so it won't be changed after it is rendered. It of course can be changed but \n                that will be explained later.\n            </p>\n\n            <Highlight className=\"xml\">\n                {`<html>\n    <body>\n        <div id=\"root\"></div>\n        <script>\n            const element = <h1>Hello React!</h1>;\n            ReactDOM.render(element, document.getElementById('root'));\n        </script>\n    </body>\n</html>`}\n            </Highlight>\n\n            <p>\n                Term \"Component\" is very often used in modern web development.\n                In React it could be considered as a independent, reusable piece of code.\n                They are like functions in JavaScript that can accept props and return\n                other React elements. We can define a component using ES6 class syntax.\n                Each React component should extend <code>React.Component</code> class.\n                As you could see in the code above we have a <code>h1</code> element\n                that was written with JSX syntax. It is neither a string nor HTML - it is \n                just a JSX element. That provides us a template mechanism for our components.\n            </p>\n\n            <h2>Single File Component</h2>\n\n            <p>\n                To keep our components small we can put them into separate files.\n                React components are stored inside \".js\" files. Each React component \n                class need to extend <code>React.Component</code> class and the \n                only method that we must define is <code>render()</code> method.\n                Other methods are optional.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`class SingleComponentSelector extends React.Component {\n    render() {\n        return <h1>Hello from React SFC</h1>\n    }\n}`}\n            </Highlight>\n\n            <p>\n                Render method is one of the most important methods of a React component.\n                It is used to return a React element. React DOM is trying to update the \n                DOM tree according to the return value of the render method.\n            </p>\n\n            <h2>Component usage</h2>\n\n            <p>\n                To render that component we have back to the beginning of the \n                article where we defined an Element with H1 tag. Now to see that \n                component we have to pass it ClassName as a name of the tag.\n            </p>\n\n\n            <Highlight className=\"javascript\">\n                {`const element = <SingleComponentSelector />;\nReactDOM.render(element, document.getElementById('root'));`}\n            </Highlight>\n\n        </div>\n    );\n  }\n}","import IRoute from \"./interfaces/route\";\nimport Basic from \"./views/Basic\";\nimport Home from \"./views/Home\";\nimport ReactInit from \"./views/Initialization\";\nimport PropsExample from \"./views/Props\";\nimport SlotsExample from \"./views/Slots\";\nimport Extend from \"./views/Extend\";\nimport Directives from \"./views/Directives\";\nimport StoreView from \"./views/StoreView\";\n\nexport const routes:IRoute[] = [\n    {\n        path: '/',\n        name: \"Home Page\",\n        component: Home,\n        exact: true,\n    },\n    {\n        path: '/project-initialization',\n        name: \"Project Initialization\",\n        component: ReactInit,\n        exact: true,\n    },\n    {\n        path: '/simple-component',\n        name: \"Simple Component\",\n        component: Basic,\n        exact: true,\n    }, {\n        path: '/props-component',\n        name: \"Props Component\",\n        component: PropsExample,\n        exact: true,\n    }, {\n        path: '/slots-component',\n        name: \"Slots Component\",\n        component: SlotsExample,\n        exact: true,\n    }, {\n        path: \"/extend-component\",\n        name: \"Extend Component\",\n        component: Extend,\n        exact: true,\n    }, {\n        path: \"/directives-component\",\n        name: \"Directives Component\",\n        component: Directives,\n        exact: true,\n    }, {\n        path: \"/store-component\",\n        name: \"Store Component\",\n        component: StoreView,\n        exact: true,\n    }\n\n];\n\nexport default routes;","import * as React from 'react';\n\ninterface Props {\n    framework: String;\n};\n\ninterface State {\n  welcomeMessage: String;\n};\n\nexport default class Home extends React.Component<Props, State> {\n  state: State = {\n    welcomeMessage: 'Hello React'\n  };\n\n  render () {\n    return (\n      <div>\n          <h1>{this.state.welcomeMessage}</h1>\n          <p>\n            In general this is a JavaScript library for building user interfaces.\n            React has been released in 2013 by Jordan Walke from Facebook company.\n            It is mostly used to create interactive Single Page Applications (SPA).\n            Why React is so popular? Because it start using Virtual DOM (Document Object Model)\n            to render the UI. All the DOM manipulation is done in JavaScript so \n            React is very fast but keeps in memory the whole DOM tree. This approach\n            with JavaScript everywhere caused that React start using the JSX (JavaScript XML)\n            syntax to write the UI. Using that approach user can write the HTML code \n            directly in the JavaScript.\n          </p>\n\n          <p>\n            It is the most popular JavaScript framework for building user interfaces.\n            Used by Facebook, Instagram, Microsoft, Netflix, PayPal, and many more.\n            Using React you can start creating Component-Based Applications that \n            could be very fast and scalable. Encapsulated components helps you \n            to organize your code and reuse it. Declarative views helps you to \n            create interactive user interfaces and keeping the state of your application\n            without too much effort. \n          </p>\n\n          <p>\n            React is very popular so it has also many additional libraries and tools\n            that can extend the functionality of your application. Community of React\n            developers is very big and it is very easy to find the best solution for\n            any trouble. Base React library is responsible for the rendering of the\n            view layer. So to create more complex applications you have to find the \n            additional packages that will help you to create the more advanced components.\n          </p>\n      </div>\n    );\n  }\n}","import * as React from 'react';\n\ninterface Props {};\ninterface State {};\n\nexport default class ReactInit extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Project initialization</h1>\n\n            <p>\n                To start working with React we can just add the core library to our page.\n                But for more complex projects we need to use a specific tool. The easiest\n                to start with is \"<a href=\"https://github.com/facebook/create-react-app\">Create React App</a>\" tool\n                that helps us to create a new React project.\n            </p>\n\n            <h2>Installation and Creation of React Application</h2>\n\n            <p>\n                Using that tool we can easly create a new React project. Just type the following command:\n            </p>\n\n            <code>npx create-react-app framweork-hero</code>\n\n            <h2>Running the development server</h2>\n\n            <p>\n                Then to run the development server we need run one of the npm scripts:\n            </p>\n\n            <code>\n                npm run start\n            </code>\n\n      \n           \n\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props {};\ninterface State {};\n\nexport default class PropsExample extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Component data, methods and properties</h1>\n\n            <p>\n                React Components are special objects that could have properties and methods.\n                We can treat them as a ES6 classes. They receives external properties that are often \n                called as \"props\". That are something similar to the attributes of HTML elements\n                that can be used to customize the component.\n            </p>\n\n            <h2>Component internal data</h2>\n\n            \n\n            <p>\n                Each component could have its \"state\"\n                that allows them to keep something in memory. To do that we must define\n                the \"state\" property in the constructor. Because we are extending the\n                React.Component class we have to keep in mind that the constructor \n                receives the \"props\" argument and the super() method must be called with \n                that argument. Using JSX syntax we can access to out state variables using \n                <code>this.state.welcomeMessage</code> reference that is placed within \n                <code>{ \"{ }\" }</code> braces. That inform the renderer method to place \n                there a value of that variable.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default ExampleProps extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            welcomeMessage: 'React property!',\n        }\n    }\n    render() {\n        return <h1>Hello from {this.state.welcomeMessage}</h1>\n    }\n}`}\n            </Highlight>\n\n            <h2>Passing properties</h2>\n\n            <p>\n                This time I should explaining with passing a external properties to the component\n                but to keep it organized like it is presented in other frameworks I had to start \n                from the \"state\" property. But let's go to \"props\"! Props as it was mentioned \n                at the beginning are the external properties that we can pass to the component.\n                By default they are accessible within the component using the \"this.props\" reference.\n                But if we create a constructor method we have to remember to call the super() method\n                with the \"props\" argument to not lose the reference to the \"props\" object. What is more\n                the basic React component could be a simple function that receives the \"props\" as the argument\n                and return the JSX code. That kind of component is called a \"function component\".\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`function FunctionComponent(props) {\n    return <h1>Hello from {props.framework}</h1>;\n}`}\n            </Highlight>\n\n            <p>\n                This time we are not defining the \"props\" that we are going to receive.\n                We can add some props to the render method but we have to be aware \n                that it must be provided during the component creation.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default ExampleProps extends React.Component {\n    render() {\n        return <h1>Hello from {this.props.welcomeMessage}</h1>\n    }\n}`}\n            </Highlight>\n\n            <Highlight className=\"javascript\">\n                {`element = <ExampleProps welcomeMessage=\"React child component\" />\n`}\n            </Highlight>\n\n            <p>\n                Wen we call ReactDOM.render() method the <code>ExampleProps</code> component\n                is going to be rendered with the <code>welcomeMessage</code> property received\n                from parent element. So it will render the header with text: \"Hello from React child component\".\n            </p>\n\n            <h3>Passing Variables</h3>\n\n            <p>\n                Using the same approach we can pass variables to the JSX template we can pass it to the \n                child component. In this case we are going to pass the variable <code>{ \"framework\" }</code>\n                to the child ExampleProps component. It is very simple and easy to understand because \n                it is based on plain JavaScript and JSX methodology. Knowning that simple relation we are\n                able to provide variables to our components.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default PropsParent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            framework: 'React',\n        }\n    }\n    render() {\n        return <ExampleProps welcomeMessage={this.state.framework} />\n    }\n}`}\n            </Highlight>\n\n            <h2>Emitting Events</h2>\n\n            <p>\n                In the previous section we have seen how to pass properties to the component.\n                But sometimes we need to emit events to the parent component. In React that\n                could be more complex but I will try to explain it as simple as possible.\n            </p>\n\n            <p>\n                From the beginning we have to create a method inside SingleEmit component that \n                will be called when the button is clicked. To intercept the onClick event we \n                are going to use the \"onClick\" attribute on the button tag. Now because \n                we want to use methods inside a class we have to use <code>{ \"{ }\" }</code>\n                braces to inform render method that we are going to use a JavaScript there.\n            </p>\n\n            <p>\n                We are going to create a arrow function that will invoke the <code>increaseNumber()</code>\n                method whenever the button is clicked. That method will increase the state of the \n                <code>currentValue</code> property of the SingleEmit component. Then we are going to \n                emit the event to the parent. To do that we are going to use the \"this.props\" reference\n                and then the <code>increasedEvent</code> property will be the name of the event that\n                we are going to emit. Because we want to pass the current value of that coutner to the\n                parent we provide the reference to the <code>currentValue</code> property as the function argument.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default SingleEmit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentValue: 0,\n        }\n    }\n\n    increaseNumber() {\n        this.setState({currentValue: this.state.currentValue + 1});\n        this.props.increasedEvent(this.state.currentValue);\n    }\n\n    render() {\n        return <button onClick={() => this.increaseNumber()}>Increase number</button>\n    }\n}`}\n            </Highlight>\n\n            <p>\n                Now everything is ready to intercept that event form the parent component.\n                To do that we will add <code>increasedEvent</code> property to <code>SingleEmit</code>\n                component definition. Like before with <code>onClick</code> event again we are using \n                JavaScript arrow function to intercept the event and invoke the <code>onIncreased</code>\n                method. This time the arrow function will receive the current value of the counter and \n                that value will be passed to the method that will change the state of the counter state property.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default SingleEmitParent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counter: 0,\n        }\n    }\n\n    onIncreased(value) {\n        this.setState({counter: value});\n    }\n    \n    render() {\n        return (<div>\n            <p>Clicked: {this.state.counter} times.</p>\n            <SingleEmit increasedEvent={(event) => this.onIncreased(event)}/>\n        </div>)\n    }\n}`}\n            </Highlight>\n\n            <p>\n                When the <code>onIncreased()</code> and <code>setState()</code> methods\n                are called the value rendered in the template will be updated.\n            </p>\n\n           \n            {/* https://youtu.be/CmUQ5C35_Oc?t=484 */}\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props { };\ninterface State { };\n\nexport default class SlotsExample extends React.Component<Props, State> {\n\n    render() {\n        return (\n            <div>\n                <h1>Content projection</h1>\n\n                <p>\n                    As in other frameworks we are able to pass other components into\n                    the slots of the component. To do that we have to use <code>children</code>\n                    property from the <code>props</code> component object. That will inform\n                    render method to put there the children elements (elements between\n                    <code>Child</code> tag) provided by the parent.\n                </p>\n\n                <h2>React children</h2>\n\n                <Highlight className=\"javascript\">\n                    {`export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <h1>Header of child</h1>\n                <div>{this.props.children}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} `}\n                </Highlight>\n\n                <Highlight className=\"javascript\">\n                    {`export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                    <section>\n                        <h2>Parent section to be displayed</h2>\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                    </section>\n                </Child>\n            </div>\n        )\n    }\n} `}\n                </Highlight>\n\n                <h2>Multiple-slots</h2>\n\n                <p>\n                    React allows us to use multiple slots called \"named children\".\n                    It works very similar like in other frameworks.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <div>{this.props.children.header}</div>\n                <div>{this.props.children.default}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} `}\n                </Highlight>\n\n                <Highlight className=\"javascript\">\n                    {`export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                {{\n                    header: <h2>Parent section to be displayed</h2>,\n                    default: <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                }}\n                </Child>\n            </div>\n        )\n    }\n} `}\n                </Highlight>\n\n\n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props {};\ninterface State {};\n\nexport default class Extend extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Extending the component</h1>\n\n            <p>\n                Authors of the React framework recommend to follow the pattern of \"Composition\n                over Inheritance\" to provide some logic to our components. This is augmented \n                by powerful composition model of React. Based on their experience, they declare \n                that during the creation of Facebook page they haven't found any use case where \n                the component Inheritance will be a good idea. (<a href=\"https://reactjs.org/docs/composition-vs-inheritance.html\">Source</a>).\n            </p>\n\n            <p>\n                Of course it is possible by extending the other React component class. \n                The first one extends the <code>Component</code> class from React core \n                but this component should not have the render method. The child class \n                will inheritance the methods from the parent class but is must have \n                this missing render method. It is more for creating an abstraction layer\n                to your design but it may provide an additional complexity to your code. \n            </p>\n\n            <Highlight className=\"javascript\">\n                {`class ParentAbstractComponent extends React.Component {\n  greet() {\n    console.log('Hello world!')\n  }\n}\n\nclass ChildComponent extends ParentAbstractComponent {\n  render () {\n    return(\n      <div>\n        <button onClick={this.greet.bind(this)}>\n          Say hello\n        </button>\n      </div>\n    )\n  }  \n} `}\n            </Highlight>\n\n            <p>\n                Developer can't \"override\" the render method but he can use <code>props</code> \n                to pass the additional data and change the behavior of the component.\n            </p>\n\n            <h2>High order components HOC</h2>\n\n            <p>\n                For many components that share the similar behavior, it is possible to create a \n                High-Order Component (HOC) to wrap the component and provide additional functionality. \n                HOCs are functions that take a component and return a new component with new features.\n                That common behavior will be defined once and composed into classes that require it.\n            </p>\n\n            <p>\n                This HOC function takes a component class as a parameter and returns a new component class \n                that has a new functionality. It is similar to the \"Decorator\" pattern known from the Object-Oriented Programming.\n                It is advanced technique for reusing component logic that evolved from the React base.\n                Previously to resolve the multi level design problems in the React, the developers\n                used the \"mixins\". \n            </p>\n\n            <Highlight className=\"javascript\">\n                {`const Loader = (promiseProp, Wrapped) => class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {loading: true, error: null, result: null};\n  }\n\n  componentDidMount() {\n      this.props[promiseProp].then(\n          value => this.setState({loading: false, result: value}),\n          error => this.setState({loading: false, error})\n      );\n  }\n\n  render() {\n      if (this.state.loading) {\n          return <p>Loading. Please wait...</p>;\n      } else if (!!this.state.error) {\n          return <p>Error: {this.state.error.message}</p>;\n      } else {\n          return <Wrapped {...this.props} {this.state.result} />;\n      }\n  }\n};\n`}\n            </Highlight>\n\n            <Highlight className=\"javascript\">\n                {`let AsyncWeatherWidget = Loader(\"weather\", Weather);\n  ... \n\n  <AsyncWeatherWidget weather={fetchWeather('/api/krakow.json')}/>\n`}\n            </Highlight>\n\n            <p>\n                HOC Components doesn't modify the input component but it is wrapping it into a \n                new container component. Wrapped component receives all the props from the container\n                with the addition of the result of the promise. \n            </p>\n\n            <p>\n                More detailed information about HOCs can be found in the <a href=\"https://reactjs.org/docs/higher-order-components.html\">official documentation</a>\n                of the React. During the explanation of the HOCs I based on the article from <a href=\"http://natpryce.com/articles/000814.html\">Natpryce.com</a>\n            </p>\n\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props { };\ninterface State {\n    ren: number[]\n};\n\nexport default class Directives extends React.Component<Props, State> {\n\n    state: State = {\n        ren: [11, 22, 33],\n    }\n\n\n    render() {\n        return (\n            <div>\n                <h1>Directives? What is it?</h1>\n\n                <p>\n                    If you are looking for directives in the React application you may find it difficult.\n                </p>\n\n                <p>\n                    React keep the state of the Virtual DOM so it is responsible for rendering and generating\n                    the DOM elementns. This is the fundamental principle how the React works. There is no\n                    reason to use something you may known from the Angular or Vue.js framework like\n                    directives that are attached to HTML tags because there is no DOM elements where\n                    that directive could be attached. When you are providing a attribute for\n                    your React component it is treated as property that is passed to the component.\n                </p>\n\n                <h2>Dynamic CSS classes</h2>\n\n                <p>\n                    Ok so we know that we do not have any directives available in the React.js framework. But\n                    how to handle the same issues that Angular and Vue.js handle with directives? The answer\n                    is \"use JavaScript\". React take advantage of the JavaScript and we can use it to create\n                    a functions that will provide the expected behavior.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        <div className={\\`selected \\${this.isAdmin() ? \"\" : \"disabled\"}\\`}>\n            Hello User!\n        </div>\n    )\n}`}\n\n                </Highlight>\n\n                <p>\n                    When the state of a component changes, React performs a re-render and in that\n                    moment we pass the respective CSS classes to our div.\n                </p>\n\n                <h2>Dynamic Inline-styling</h2>\n\n                <p>\n                    This time we will also bind the expression to the style attribute. Because\n                    everything in React is an JavaScript we can easily assing specific object to that\n                    attribute using the assignment operator.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`export default InputLabel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputStyles: {\n                color: this.props.disabled ? \"#999\" : \"#000\",\n                font-weight: this.props.required ? \"bold\" : \"normal\"\n            }\n        }\n    }\n                \n    render() {\n        return (\n            <span style={this.state.inputStyles}>Label text</span>\n        )\n    }\n}`}\n\n                </Highlight>\n\n                <p>\n                    In this example depending on the provided properties we can change the style of\n                    the input label. If we pass the required property the \"Label text\" will be\n                    bolded. In inputStyles object we manipulate the CSS selectors and base on the\n                    state of the component we can change them to specific value. In JSX we only need to\n                    bind the style attribute with the reference of that object. We have to remember that\n                    the \"style\" behave like a property in React.js instead of an classic attribute.\n                </p>\n\n                <h2>Conditional rendering</h2>\n\n                <p>\n                    Again we have to use the clear JavaScript to render a specific HTML code but this\n                    time we can use the \"if\" statement. If the condition is true we will render the\n                    <code>span</code> block with the basket size information. Otherwise this block will\n                    return null that will not be rendered.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketItems > 0 && <span>You have {this.state.basketItems} items in your basket.</span>}\n    )\n}`}\n\n                </Highlight>\n\n                <p>\n                    Here we can see that the amount of items in basket is displayed only when there is more than 0 items.\n                </p>\n\n                <p>\n                    In JSX we can use ternary operator to show two code blocks depending on the condition result.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketItems > 0\n            ? <span>You have {this.state.basketItems} items in your basket.</span>\n            : <span>Your basket is empty.</span>\n        }\n    )\n}`}\n\n                </Highlight>\n\n                <h2>Rendering the list</h2>\n\n                <p>\n                    Finally sometimes we need to render a list of items. Again in this case we can't\n                    use directly a \"for\" directive but we can think of it as a JavaScript code and\n                    we can use the \"map\" function to iterate over the list.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketProducts.map((item) => <div>{item.name}</div>)}\n    )\n}`}\n                </Highlight>\n\n                <p>\n                    In this case we want to present the list of orders and each order will be represented by a\n                    <code>div</code> element that innerText will be the name property of the order.\n                </p>\n                <p>\n                    Using map we can return the zero-based index of the item in the list.\n                    So we can get the index of the item variable that we used in the JSX.\n                    To do that we can extract the second argument form map method and then use it as a variable.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketProducts.map((item, i) => <div>{i+1}: {item.name}</div>)}\n    )\n}`}\n                </Highlight>\n\n                <p>\n                    Sometimes we want to render a dynamic list of items that can be changed when the component\n                    receives new data. In this case every change in the data array will cause the whole list to\n                    be re-rendered. To prevent this we can use the key property that is responsible for tracking\n                    changes in the data array. To do that we only have to bind the key attribute with proper value.\n                    In this case we want to use the id of the item as a key.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketProducts.map((item, i) => <div key={item.id}>{i+1}: {item.name}</div>)}\n    )\n}`}\n                </Highlight>\n\n                <p>\n                    In React this list rendering syntax within JSX may be too long and can be hard\n                    to read. So if we want to provide more complex list rendering we can create\n                    a specific function or variable that will be responsible for rendering the list\n                    in a clear way.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    const itemsList = this.state.basketProducts.map((item, i) => \n        <div key={item.id}>{i+1}: {item.name}</div>);\n    return (\n        <header>{itemsList}</header>\n    );\n}`}\n                </Highlight>\n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props { };\ninterface State { };\n\nexport default class StoreView extends React.Component<Props, State> {\n\n    render() {\n        return (\n            <div>\n                <h1>From Flux to React Redux concept</h1>\n\n                <p>\n                    Developers of the React on the beginning of that framework  presented the concept called \"Flux\".\n                    The idea of Flux was to replace the classic MVC model of designing a applications to provide a\n                    \"Store\" concept that will just hold the application state. Now the Flux is only in maintenance\n                    mode but the more sophisticated alternatives has born and we can use them right now. For this\n                    project I will focus on the Redux example.\n                </p>\n\n                <p>\n                    Redux is a pattern and library for managing and updating application state by using \"actions\". \n                    React Redux is an official React UI binding layer that allows our components to read\n                    data directly from the Redux store. On the other hand we can dispatch actions that\n                    will update the store state. It is very similar concept that is available in Vue.js\n                    library called Vuex.\n                </p>\n\n                <p>\n                    To start working with Redux we must install the <code>redux</code> package. This is nothing\n                    more than executing the following command <code>npx install react-redux</code>. More detailed\n                    information how to do it you can find in the <a href=\"https://redux.js.org/introduction/installation\">official documentation.</a>\n                </p>\n\n                <p>\n                    After installation we can move to attaching this library to our project. React Redux includes\n                    a <code>Provider</code> component that allow us to use the Redux store in our application.\n                    So we just need to create the entry point like in the example below.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`...\nimport { Provider } from 'react-redux';\nimport store from './store';\n...\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n`}\n                </Highlight>\n\n                <h2>Store state and Actions</h2>\n\n                <p>\n                    Basic purpose of the store is to hold the state of the application. After installation\n                    and attaching the library to our project we can create a Redux State Slice that will hold \n                    our basket items. The state slice requires a name that will be unique for this slice. In \n                    the <code>initialState</code> object we can define the initial value and in the <code>reducer</code>\n                    function we can define the logic to change the state. \n                </p>\n\n                \n\n                <Highlight className=\"javascript\">\n                    {`import { createSlice } form '@reduxjs/toolkit';\n\nexport const basket = createSlice({\n    name: 'basket',\n    initialState: {\n        items: [],\n    }\n    reducer: {\n        addItem: (state, action) => {\n            state.items.push(action.payload);\n        }\n    },\n});\nexport const { addItem } = basket.actions;\nexport default basket.reducer;\n`}\n                </Highlight>\n\n                <p>\n                    When our slice is ready we can add it to our Redux store by adding the <code>basketReducer</code>\n                    to the <code>reducers</code> object. \n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`import { configureStore } form '@reduxjs/toolkit';\nimport basketReducer from './features/basket';\n\nexport default configureStore({\n    reducer: {\n        basket: basketReducer,\n    },\n});\n`}\n                </Highlight>\n\n                <p>\n                    Having this Slice configured we can use it in our code. To read data from \n                    store we use this <code>useSelector</code> function that will return the \n                    basket items array. But to add new item to this array we must dispatch an action \n                    using <code>useDispatch()</code> method. In React we can create an additional \n                    constant that will be a shortcut to the <code>Redux</code> objects.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addItem } from './features/basket'\n\nexport function BookItem() {\n    const items = useSelector(state => state.basket.items);\n    const dispatch = useDispatch();\n\n    addBook() {\n        dispatch(addItem(new Book()));\n    }\n\n    ...\n}`}\n\n                </Highlight>\n\n                <p>\n                    This is a basic example of Redux. More details can be found in the \n                    <a href=\"https://redux.js.org/tutorials/essentials/part-1-overview-concepts\">official documentation</a>.\n                    Also when I will learn more about Redux I will show you how to use it in React in more detail.\n                    But now it is a simple example how to achieve the same functionality in Redux and Vuex.\n                </p>\n\n\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport Navbar from './layout/Navbar';\nimport Topbar from './layout/Topbar';\nimport routes from './router';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Navbar></Navbar>\n        <header>\n          <Topbar></Topbar>\n        </header>\n\n        <main>\n          <section>\n            <Switch>\n              {routes.map((route, index) => (\n                <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  render={(props: RouteComponentProps<any>) => (\n                    <route.component {...props} {...route.props} />\n                  )}\n                />\n              ))}\n            </Switch>\n          </section>\n        </main>\n\n        <footer></footer>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}