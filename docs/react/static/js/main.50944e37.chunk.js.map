{"version":3,"sources":["layout/Navbar.tsx","layout/Topbar.tsx","views/Basic.tsx","router.ts","views/Home.tsx","views/Initialization.tsx","views/Props.tsx","views/Slots.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","state","to","React","Topbar","className","Basic","routes","path","name","component","welcomeMessage","this","exact","href","App","map","route","index","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50944e37.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Navbar.css';\nimport {\n    Link\n  } from \"react-router-dom\";\n\ninterface Props {\n    // framework: String;\n};\n\ninterface State {\n//   welcomeMessage: String;\n};\n\nexport default class Navbar extends React.Component<Props, State> {\n  state: State = {\n    // welcomeMessage: 'Hello from '\n  };\n\n  render () {\n    return (\n      <div>\n          <nav>\n              <div>\n                  <ul>\n                      <li><Link to=\"/\">Home</Link></li>\n                      <li><Link to=\"/project-initialization\">Project initialization</Link></li>\n                      <li><Link to=\"/simple-component\">Compnent Example</Link></li>\n                      <li><Link to=\"/props-component\">Compnent Parameters</Link></li>\n                      <li><Link to=\"/slots-component\">Compnent Projection</Link></li>\n                      <li><Link to=\"/\">Service</Link></li>\n                  </ul>\n              </div>\n          </nav>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport './Topbar.css';\n\ninterface Props {};\ninterface State {};\n\nexport default class Topbar extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div className=\"topbar\">\n            <h1>React page</h1>\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props {};\ninterface State {};\n\nexport default class Basic extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Component Introduction</h1>\n\n            <p>\n                React is build of \"Elements\" which are the smallest building blocks \n                of the application. Elements are parts of something larger that could \n                be called a \"Component\" but that will be presented later. React Element is \n                a plain object managed by React DOM. All that elements are attached to \n                the single root element in the HTML file. Using <code>ReactDOM.render()</code> method\n                we can pass that small element into a root DOM node. That element is immutable \n                so it won't be changed after it is rendered. It of course can be changed but \n                that will be explained later.\n            </p>\n\n            <Highlight className=\"xml\">\n                {`<html>\n    <body>\n        <div id=\"root\"></div>\n        <script>\n            const element = <h1>Hello React!</h1>;\n            ReactDOM.render(element, document.getElementById('root'));\n        </script>\n    </body>\n</html>`}\n            </Highlight>\n\n            <p>\n                Term \"Component\" is very often used in modern web development.\n                In React it could be considered as a independent, reusable piece of code.\n                They are like functions in JavaScript that can accept props and return\n                other React elements. We can define a component using ES6 class syntax.\n                Each React component should extend <code>React.Component</code> class.\n                As you could see in the code above we have a <code>h1</code> element\n                that was written with JSX syntax. It is neither a string nor HTML - it is \n                just a JSX element. That provides us a template mechanism for our components.\n            </p>\n\n            <h2>Single File Component</h2>\n\n            <p>\n                To keep our components small we can put them into separate files.\n                React components are stored inside \".js\" files. Each React component \n                class need to extend <code>React.Component</code> class and the \n                only method that we must define is <code>render()</code> method.\n                Other methods are optional.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`class SingleComponentSelector extends React.Component {\n    render() {\n        return <h1>Hello from React SFC</h1>\n    }\n}`}\n            </Highlight>\n\n            <p>\n                Render method is one of the most important methods of a React component.\n                It is used to return a React element. React DOM is trying to update the \n                DOM tree according to the return value of the render method.\n            </p>\n\n            <h2>Component usage</h2>\n\n            <p>\n                To render that component we have back to the beginning of the \n                article where we defined an Element with H1 tag. Now to see that \n                component we have to pass it ClassName as a name of the tag.\n            </p>\n\n\n            <Highlight className=\"javascript\">\n                {`const element = <SingleComponentSelector />;\nReactDOM.render(element, document.getElementById('root'));`}\n            </Highlight>\n\n        </div>\n    );\n  }\n}","import IRoute from \"./interfaces/route\";\nimport Basic from \"./views/Basic\";\nimport Home from \"./views/Home\";\nimport ReactInit from \"./views/Initialization\";\nimport PropsExample from \"./views/Props\";\nimport SlotsExample from \"./views/Slots\";\n\nexport const routes:IRoute[] = [\n    {\n        path: '/',\n        name: \"Home Page\",\n        component: Home,\n        exact: true,\n    },\n    {\n        path: '/project-initialization',\n        name: \"Project Initialization\",\n        component: ReactInit,\n        exact: true,\n    },\n    {\n        path: '/simple-component',\n        name: \"Simple Component\",\n        component: Basic,\n        exact: true,\n    }, {\n        path: '/props-component',\n        name: \"Props Component\",\n        component: PropsExample,\n        exact: true,\n    }, {\n        path: '/slots-component',\n        name: \"Slots Component\",\n        component: SlotsExample,\n        exact: true,\n    }\n];\n\nexport default routes;","import * as React from 'react';\n\ninterface Props {\n    framework: String;\n};\n\ninterface State {\n  welcomeMessage: String;\n};\n\nexport default class Home extends React.Component<Props, State> {\n  state: State = {\n    welcomeMessage: 'Hello React'\n  };\n\n  render () {\n    return (\n      <div>\n          <h1>{this.state.welcomeMessage}</h1>\n          <p>\n            In general this is a JavaScript library for building user interfaces.\n            React has been released in 2013 by Jordan Walke from Facebook company.\n            It is mostly used to create interactive Single Page Applications (SPA).\n            Why React is so popular? Because it start using Virtual DOM (Document Object Model)\n            to render the UI. All the DOM manipulation is done in JavaScript so \n            React is very fast but keeps in memory the whole DOM tree. This approach\n            with JavaScript everywhere caused that React start using the JSX (JavaScript XML)\n            syntax to write the UI. Using that approach user can write the HTML code \n            directly in the JavaScript.\n          </p>\n\n          <p>\n            It is the most popular JavaScript framework for building user interfaces.\n            Used by Facebook, Instagram, Microsoft, Netflix, PayPal, and many more.\n            Using React you can start creating Component-Based Applications that \n            could be very fast and scalable. Encapsulated components helps you \n            to organize your code and reuse it. Declarative views helps you to \n            create interactive user interfaces and keeping the state of your application\n            without too much effort. \n          </p>\n\n          <p>\n            React is very popular so it has also many additional libraries and tools\n            that can extend the functionality of your application. Community of React\n            developers is very big and it is very easy to find the best solution for\n            any trouble. Base React library is responsible for the rendering of the\n            view layer. So to create more complex applications you have to find the \n            additional packages that will help you to create the more advanced components.\n          </p>\n      </div>\n    );\n  }\n}","import * as React from 'react';\n\ninterface Props {};\ninterface State {};\n\nexport default class ReactInit extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Project initialization</h1>\n\n            <p>\n                To start working with React we can just add the core library to our page.\n                But for more complex projects we need to use a specific tool. The easiest\n                to start with is \"<a href=\"https://github.com/facebook/create-react-app\">Create React App</a>\" tool\n                that helps us to create a new React project.\n            </p>\n\n            <h2>Installation and Creation of React Application</h2>\n\n            <p>\n                Using that tool we can easly create a new React project. Just type the following command:\n            </p>\n\n            <code>npx create-react-app framweork-hero</code>\n\n            <h2>Running the development server</h2>\n\n            <p>\n                Then to run the development server we need run one of the npm scripts:\n            </p>\n\n            <code>\n                npm run start\n            </code>\n\n      \n           \n\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props {};\ninterface State {};\n\nexport default class PropsExample extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Component data, methods and properties</h1>\n\n            <p>\n                React Components are special objects that could have properties and methods.\n                We can treat them as a ES6 classes. They receives external properties that are often \n                called as \"props\". That are something similar to the attributes of HTML elements\n                that can be used to customize the component.\n            </p>\n\n            <h2>Component internal data</h2>\n\n            \n\n            <p>\n                Each component could have its \"state\"\n                that allows them to keep something in memory. To do that we must define\n                the \"state\" property in the constructor. Because we are extending the\n                React.Component class we have to keep in mind that the constructor \n                receives the \"props\" argument and the super() method must be called with \n                that argument. Using JSX syntax we can access to out state variables using \n                <code>this.state.welcomeMessage</code> reference that is placed within \n                <code>{ \"{ }\" }</code> braces. That inform the renderer method to place \n                there a value of that variable.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default ExampleProps extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            welcomeMessage: 'React property!',\n        }\n    }\n    render() {\n        return <h1>Hello from {this.state.welcomeMessage}</h1>\n    }\n}`}\n            </Highlight>\n\n            <h2>Passing properties</h2>\n\n            <p>\n                This time I should explaining with passing a external properties to the component\n                but to keep it organized like it is presented in other frameworks I had to start \n                from the \"state\" property. But let's go to \"props\"! Props as it was mentioned \n                at the beginning are the external properties that we can pass to the component.\n                By default they are accessible within the component using the \"this.props\" reference.\n                But if we create a constructor method we have to remember to call the super() method\n                with the \"props\" argument to not lose the reference to the \"props\" object. What is more\n                the basic React component could be a simple function that receives the \"props\" as the argument\n                and return the JSX code. That kind of component is called a \"function component\".\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`function FunctionComponent(props) {\n    return <h1>Hello from {props.framework}</h1>;\n}`}\n            </Highlight>\n\n            <p>\n                This time we are not defining the \"props\" that we are going to receive.\n                We can add some props to the render method but we have to be aware \n                that it must be provided during the component creation.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default ExampleProps extends React.Component {\n    render() {\n        return <h1>Hello from {this.props.welcomeMessage}</h1>\n    }\n}`}\n            </Highlight>\n\n            <Highlight className=\"javascript\">\n                {`element = <ExampleProps welcomeMessage=\"React child component\" />\n`}\n            </Highlight>\n\n            <p>\n                Wen we call ReactDOM.render() method the <code>ExampleProps</code> component\n                is going to be rendered with the <code>welcomeMessage</code> property received\n                from parent element. So it will render the header with text: \"Hello from React child component\".\n            </p>\n\n            <h3>Passing Variables</h3>\n\n            <p>\n                Using the same approach we can pass variables to the JSX template we can pass it to the \n                child component. In this case we are going to pass the variable <code>{ \"framework\" }</code>\n                to the child ExampleProps component. It is very simple and easy to understand because \n                it is based on plain JavaScript and JSX methodology. Knowning that simple relation we are\n                able to provide variables to our components.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default PropsParent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            framework: 'React',\n        }\n    }\n    render() {\n        return <ExampleProps welcomeMessage={this.state.framework} />\n    }\n}`}\n            </Highlight>\n\n            <h2>Emitting Events</h2>\n\n            <p>\n                In the previous section we have seen how to pass properties to the component.\n                But sometimes we need to emit events to the parent component. In React that\n                could be more complex but I will try to explain it as simple as possible.\n            </p>\n\n            <p>\n                From the beginning we have to create a method inside SingleEmit component that \n                will be called when the button is clicked. To intercept the onClick event we \n                are going to use the \"onClick\" attribute on the button tag. Now because \n                we want to use methods inside a class we have to use <code>{ \"{ }\" }</code>\n                braces to inform render method that we are going to use a JavaScript there.\n            </p>\n\n            <p>\n                We are going to create a arrow function that will invoke the <code>increaseNumber()</code>\n                method whenever the button is clicked. That method will increase the state of the \n                <code>currentValue</code> property of the SingleEmit component. Then we are going to \n                emit the event to the parent. To do that we are going to use the \"this.props\" reference\n                and then the <code>increasedEvent</code> property will be the name of the event that\n                we are going to emit. Because we want to pass the current value of that coutner to the\n                parent we provide the reference to the <code>currentValue</code> property as the function argument.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default SingleEmit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentValue: 0,\n        }\n    }\n\n    increaseNumber() {\n        this.setState({currentValue: this.state.currentValue + 1});\n        this.props.increasedEvent(this.state.currentValue);\n    }\n\n    render() {\n        return <button onClick={() => this.increaseNumber()}>Increase number</button>\n    }\n}`}\n            </Highlight>\n\n            <p>\n                Now everything is ready to intercept that event form the parent component.\n                To do that we will add <code>increasedEvent</code> property to <code>SingleEmit</code>\n                component definition. Like before with <code>onClick</code> event again we are using \n                JavaScript arrow function to intercept the event and invoke the <code>onIncreased</code>\n                method. This time the arrow function will receive the current value of the counter and \n                that value will be passed to the method that will change the state of the counter state property.\n            </p>\n\n            <Highlight className=\"javascript\">\n                {`export default SingleEmitParent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counter: 0,\n        }\n    }\n\n    onIncreased(value) {\n        this.setState({counter: value});\n    }\n    \n    render() {\n        return (<div>\n            <p>Clicked: {this.state.counter} times.</p>\n            <SingleEmit increasedEvent={(event) => this.onIncreased(event)}/>\n        </div>)\n    }\n}`}\n            </Highlight>\n\n            <p>\n                When the <code>onIncreased()</code> and <code>setState()</code> methods\n                are called the value rendered in the template will be updated.\n            </p>\n\n           \n            {/* https://youtu.be/CmUQ5C35_Oc?t=484 */}\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props { };\ninterface State { };\n\nexport default class SlotsExample extends React.Component<Props, State> {\n\n    render() {\n        return (\n            <div>\n                <h1>Content projection</h1>\n\n                <p>\n                    As in other frameworks we are able to pass other components into\n                    the slots of the component. To do that we have to use <code>children</code>\n                    property from the <code>props</code> component object. That will inform\n                    render method to put there the children elements (elements between\n                    <code>Child</code> tag) provided by the parent.\n                </p>\n\n                <h2>React children</h2>\n\n                <Highlight className=\"javascript\">\n                    {`export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <h1>Header of child</h1>\n                <div>{this.props.children}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} `}\n                </Highlight>\n\n                <Highlight className=\"javascript\">\n                    {`export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                    <section>\n                        <h2>Parent section to be displayed</h2>\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                    </section>\n                </Child>\n            </div>\n        )\n    }\n} `}\n                </Highlight>\n\n                <h2>Multiple-slots</h2>\n\n                <p>\n                    React allows us to use multiple slots called \"named children\".\n                    It works very similar like in other frameworks.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <div>{this.props.children.header}</div>\n                <div>{this.props.children.default}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} `}\n                </Highlight>\n\n                <Highlight className=\"javascript\">\n                    {`export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                {{\n                    header: <h2>Parent section to be displayed</h2>,\n                    default: <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                }}\n                </Child>\n            </div>\n        )\n    }\n} `}\n                </Highlight>\n\n\n\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport Navbar from './layout/Navbar';\nimport Topbar from './layout/Topbar';\nimport routes from './router';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Navbar></Navbar>\n        <header>\n          <Topbar></Topbar>\n        </header>\n\n        <main>\n          <section>\n            <Switch>\n              {routes.map((route, index) => (\n                <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  render={(props: RouteComponentProps<any>) => (\n                    <route.component {...props} {...route.props} />\n                  )}\n                />\n              ))}\n            </Switch>\n          </section>\n        </main>\n\n        <footer></footer>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}