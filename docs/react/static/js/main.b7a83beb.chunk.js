(this["webpackJsonpreact-app"]=this["webpackJsonpreact-app"]||[]).push([[0],{273:function(e,t,n){"use strict";n.r(t);var a=n(1),o=n.n(a),i=n(32),r=n.n(i),c=(n(44),n(29)),s=(n(45),n(3)),p=n(4),l=n(6),d=n(5),h=(n(46),n(12)),m=n(0),u=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){var e;Object(s.a)(this,n);for(var a=arguments.length,o=new Array(a),i=0;i<a;i++)o[i]=arguments[i];return(e=t.call.apply(t,[this].concat(o))).state={},e}return Object(p.a)(n,[{key:"render",value:function(){return Object(m.jsx)("div",{children:Object(m.jsx)("nav",{children:Object(m.jsx)("div",{children:Object(m.jsxs)("ul",{children:[Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/",children:"Home"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/project-initialization",children:"Project initialization"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/simple-component",children:"Component Example"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/props-component",children:"Component Parameters"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/lifecycle-component",children:"Component Lifecycle"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/slots-component",children:"Component Projection"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/extend-component",children:"Extending components"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/services",children:"Service"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/directives-component",children:"Directives"})}),Object(m.jsx)("li",{children:Object(m.jsx)(h.b,{to:"/store-component",children:"Store concept"})})]})})})})}}]),n}(a.Component),w=(n(53),n(274)),y=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"changeLanguageHandler",value:function(e){var t=e.target;this.props.i18n.changeLanguage(t.value)}},{key:"render",value:function(){var e=this;return Object(m.jsxs)("div",{className:"topbar",children:[Object(m.jsx)("h1",{children:"React page"}),Object(m.jsx)("div",{className:"language-selector",children:Object(m.jsxs)("select",{onChange:function(t){return e.changeLanguageHandler(t)},children:[Object(m.jsx)("option",{value:"pl",children:"Polski"}),Object(m.jsx)("option",{value:"en",children:"English"})]})})]})}}]),n}(a.Component),j=Object(w.a)()(y),z=n(2),b=n.n(z),k=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){var e=this.props.t;return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:e("page.basic.intro.header")}),Object(m.jsx)("p",{children:e("page.basic.intro.content")}),Object(m.jsx)("p",{children:e("page.basic.intro.content2")}),Object(m.jsx)(b.a,{className:"xml",children:"<html>\n    <body>\n        <div id=\"root\"></div>\n        <script>\n            const element = <h1>Hello React!</h1>;\n            ReactDOM.render(element, document.getElementById('root'));\n        <\/script>\n    </body>\n</html>"}),Object(m.jsx)("p",{children:e("page.basic.intro.content3")}),Object(m.jsx)("h2",{children:e("page.basic.sfc.header")}),Object(m.jsx)("p",{children:e("page.basic.sfc.content")}),Object(m.jsx)("h3",{children:e("page.basic.sfc.classComponent.header")}),Object(m.jsx)("p",{children:e("page.basic.sfc.classComponent.content")}),Object(m.jsx)("p",{children:e("page.basic.sfc.classComponent.content2")}),Object(m.jsx)(b.a,{className:"javascript",children:"class SingleComponentSelector extends React.Component {\n    render() {\n        return <h1>Hello from React SFC</h1>\n    }\n}\nexport default SingleComponentSelector"}),Object(m.jsx)("p",{children:e("page.basic.sfc.classComponent.content3")}),Object(m.jsx)("h4",{children:e("page.basic.sfc.classComponent.ts.header")}),Object(m.jsx)("p",{children:e("page.basic.sfc.classComponent.ts.content")}),Object(m.jsx)(b.a,{className:"typescript",children:"interface MyComponentProps {};\ninterface MyComponentState {};\n\nclass SingleComponentSelector extends React.Component<MyComponentProps, MyComponentState> {\n    render(): JSX.Element {\n        return <h1>Hello from React SFC</h1>\n    }\n}\nexport default SingleComponentSelector"}),Object(m.jsx)("h3",{children:e("page.basic.sfc.functionComponent.header")}),Object(m.jsx)("p",{children:e("page.basic.sfc.functionComponent.content")}),Object(m.jsx)(b.a,{className:"javascript",children:"function SingleComponentSelector() {\n    return <h1>Hello from React SFC</h1>\n}\nexport default SingleComponentSelector"}),Object(m.jsx)("p",{children:e("page.basic.sfc.functionComponent.content2")}),Object(m.jsx)(b.a,{className:"javascript",children:"const SingleComponentSelector = () => {\n    return <h1>Hello from React SFC</h1>\n}\nexport default SingleComponentSelector"}),Object(m.jsx)("p",{children:e("page.basic.sfc.functionComponent.content3")}),Object(m.jsx)("h4",{children:e("page.basic.sfc.functionComponent.ts.header")}),Object(m.jsx)("p",{children:e("page.basic.sfc.functionComponent.ts.content")}),Object(m.jsx)(b.a,{className:"typescript",children:"interface MyComponentProps {};\nconst SingleComponentSelector: React.FC<MyComponentProps> = () => {\n    return <h1>Hello from React SFC</h1>\n}\nexport default SingleComponentSelector"}),Object(m.jsx)("h2",{children:e("page.basic.usage.header")}),Object(m.jsx)("p",{children:e("page.basic.usage.content")}),Object(m.jsx)(b.a,{className:"javascript",children:"import SingleComponentSelector from './SingleComponentSelector'\n...\nconst element = <SingleComponentSelector />;\nReactDOM.render(element, document.getElementById('root'));"}),Object(m.jsx)("p",{children:e("page.basic.usage.content2")})]})}}]),n}(a.Component),f=Object(w.a)()(k),g=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){var e;Object(s.a)(this,n);for(var a=arguments.length,o=new Array(a),i=0;i<a;i++)o[i]=arguments[i];return(e=t.call.apply(t,[this].concat(o))).state={welcomeMessage:"Hello React"},e}return Object(p.a)(n,[{key:"render",value:function(){return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:this.state.welcomeMessage}),Object(m.jsx)("p",{children:"In general this is a JavaScript library for building user interfaces. React has been released in 2013 by Jordan Walke from Facebook company. It is mostly used to create interactive Single Page Applications (SPA). Why React is so popular? Because it start using Virtual DOM (Document Object Model) to render the UI. All the DOM manipulation is done in JavaScript so React is very fast but keeps in memory the whole DOM tree. This approach with JavaScript everywhere caused that React start using the JSX (JavaScript XML) syntax to write the UI. Using that approach user can write the HTML code directly in the JavaScript."}),Object(m.jsx)("p",{children:"It is the most popular JavaScript framework for building user interfaces. Used by Facebook, Instagram, Microsoft, Netflix, PayPal, and many more. Using React you can start creating Component-Based Applications that could be very fast and scalable. Encapsulated components helps you to organize your code and reuse it. Declarative views helps you to create interactive user interfaces and keeping the state of your application without too much effort."}),Object(m.jsx)("p",{children:"React is very popular so it has also many additional libraries and tools that can extend the functionality of your application. Community of React developers is very big and it is very easy to find the best solution for any trouble. Base React library is responsible for the rendering of the view layer. So to create more complex applications you have to find the additional packages that will help you to create the more advanced components."})]})}}]),n}(a.Component),v=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){var e=this.props.t;return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:e("page.init.project.header")}),Object(m.jsx)("p",{children:e("page.init.project.content")}),Object(m.jsx)("h2",{children:e("page.init.cra.header")}),Object(m.jsx)("p",{children:e("page.init.cra.content")}),Object(m.jsx)(b.a,{className:"bash",children:"npx create-react-app framework-hero"}),Object(m.jsx)("p",{children:e("page.init.cra.content2")}),Object(m.jsxs)("ul",{children:[Object(m.jsx)("li",{children:e("page.init.cra.section.node")}),Object(m.jsx)("li",{children:e("page.init.cra.section.public")}),Object(m.jsx)("li",{children:e("page.init.cra.section.source")}),Object(m.jsx)("li",{children:e("page.init.cra.section.root")})]}),Object(m.jsx)("img",{src:"images/view/init_01.png",alt:"JavaScript project"}),Object(m.jsx)("p",{children:e("page.init.cra.content3")}),Object(m.jsx)("h2",{children:e("page.init.craTs.header")}),Object(m.jsx)("p",{children:e("page.init.craTs.content")}),Object(m.jsx)("p",{children:e("page.init.craTs.content2")}),Object(m.jsx)("p",{children:e("page.init.craTs.content3")}),Object(m.jsx)(b.a,{className:"bash",children:"npx create-react-app framework-hero --template typescript"}),Object(m.jsx)("p",{children:e("page.init.craTs.content4")}),Object(m.jsx)("img",{src:"images/view/init_02.png",alt:"TypeScript project"}),Object(m.jsx)("h2",{children:e("page.init.run.header")}),Object(m.jsx)("p",{children:e("page.init.run.content")}),Object(m.jsx)(b.a,{className:"bash",children:"npm run start"}),Object(m.jsx)("h2",{children:e("page.init.other.header")}),Object(m.jsx)("p",{children:e("page.init.other.content")})]})}}]),n}(a.Component),x=Object(w.a)()(v),O=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){var e=this.props.t;return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:e("page.props.intro.header")}),Object(m.jsx)("p",{children:e("page.props.intro.content")}),Object(m.jsx)("h2",{children:e("page.props.internal.header")}),Object(m.jsx)("p",{children:e("page.props.internal.content")}),Object(m.jsx)("p",{children:e("page.props.internal.content2")}),Object(m.jsx)(b.a,{className:"typescript",children:"import React, { useState } from 'react'\n\nconst ExampleComponent:React.FC = () => {\n    const [welcomeMessage, setWelcomeMessage] = useState<string>('State example')\n\n    return (<h1>Hello from {welcomeMessage}</h1>)\n}\nexport default ExampleComponent"}),Object(m.jsx)("p",{children:e("page.props.internal.content3")}),Object(m.jsx)(b.a,{className:"javascript",children:"import React from 'react'\n\nclass ExampleComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            welcomeMessage: 'State example',\n        }\n    }\n\n    render() { return (<h1>Hello from {this.state.welcomeMessage}</h1>) }    \n}\nexport default ExampleComponent"}),Object(m.jsx)("p",{children:e("page.props.internal.content4")}),Object(m.jsx)(b.a,{className:"javascript",children:"import React from 'react'\n\ninterface Props {}\ninterface State {\n    welcomeMessage: string\n}\nclass ExampleComponent extends React.Component<Props, State> {\n    state: State = {\n        welcomeMessage: 'State example'\n    }\n\n    render() { return (<h1>Hello from {this.state.welcomeMessage}</h1>) }    \n}\nexport default ExampleComponent"}),Object(m.jsx)("h2",{children:e("page.props.methods.header")}),Object(m.jsx)("p",{children:e("page.props.methods.content")}),Object(m.jsx)(b.a,{className:"typescript",children:"//ExampleComponent.tsx - typescript example\nconst ExampleComponent:React.FC = () => {\n    const [welcomeMessage, setWelcomeMessage] = useState<string>('State example')\n\n    // Classic function approach\n    function updateMessage(message: string): void {\n        setWelcomeMessage(message)\n    }\n\n    // Anonymous function approach\n    const getPrefixedMessage = ():string => {\n        return \"Example - \" + welcomeMessage;\n    }\n\n    ...\n}"}),Object(m.jsx)("h2",{children:e("page.props.props.header")}),Object(m.jsx)("p",{children:e("page.props.props.content")}),Object(m.jsx)(b.a,{className:"javascript",children:'element = <FunctionComponent framework="React child component" />'}),Object(m.jsx)("p",{children:e("page.props.props.content2")}),Object(m.jsx)(b.a,{className:"typescript",children:"//Basic example\nconst FunctionComponent = (props) => {\n    return <h1>Hello from {props.framework}</h1>;\n}"}),Object(m.jsx)(b.a,{className:"typescript",children:"//TypeScript example\ninterface MyProps {\n    framework: string\n}\nconst FunctionComponent: React.FC<MyProps> = (props) => {\n    return <h1>Hello from {props.framework}</h1>\n}\n"}),Object(m.jsx)(b.a,{className:"typescript",children:"//TypeScript example with ES6 property destructuring\ninterface MyProps {\n    framework: string\n}\nconst FunctionComponent: React.FC<MyProps> = ({ framework }) => {\n    return <h1>Hello from {framework}</h1>\n}\n"}),Object(m.jsx)("p",{children:e("page.props.props.content3")}),Object(m.jsx)(b.a,{className:"javascript",children:"class ClassComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        ...\n    }\n    ...\n\n    render() {\n        return <h1>Hello from {this.props.framework}</h1>\n    }\n}"}),Object(m.jsx)("p",{children:e("page.props.props.content4")}),Object(m.jsx)(b.a,{className:"typescript",children:"interface Props {\n    framework: string\n}\ninterface State {}\n\nclass ClassComponent extends React.Component<Props,State> {\n    render(): JSX.Element {\n        return <h1>Hello from {this.props.framework}</h1>\n    }\n}"}),Object(m.jsx)("h3",{children:e("page.props.props.variables.header")}),Object(m.jsx)("p",{children:e("page.props.props.variables.content")}),Object(m.jsx)(b.a,{className:"javascript",children:"const uniqueMessage = {id: 1, content: 'example'}\n...\n<ChildComponent message={uniqueMessage} />"}),Object(m.jsx)("h2",{children:e("page.props.events.header")}),Object(m.jsx)("p",{children:e("page.props.events.content")}),Object(m.jsx)(b.a,{className:"typescript",children:"const ChildComponent = (props) => {\n    const [currentValue, setCurrentValue] = useState(0)\n\n    // (3) When 'currentValue' has been updated invoke props event\n    useEffect(() => {\n        props.increasedEvent(currentValue)\n    }, [currentValue])\n\n    // (2) Handle state change evnet\n    const increaseNumber = () => {\n        setCurrentValue(currentValue + 1)\n    }\n\n    // (1) Click button\n    return <button onClick={() => increaseNumber()}>Increase number</button>\n}"}),Object(m.jsx)("p",{children:e("page.props.events.content2")}),Object(m.jsx)(b.a,{className:"typescript",children:"//TypeScript example\ninterface ChildProps {\n    increasedEvent: (value: number) => void                    \n}\nconst ChildComponent: React.FC<ChildProps> = (props) => {\n    const [currentValue, setCurrentValue] = useState<number>(0)\n\n    useEffect(() => { props.increasedEvent(currentValue) }, [currentValue])\n\n    const increaseNumber = (): void => {\n        setCurrentValue(currentValue + 1)\n    }\n\n    //We can simplify the method handler invocation\n    return <button onClick={increaseNumber}>Increase number</button>\n}"}),Object(m.jsx)("p",{children:e("page.props.events.content3")}),Object(m.jsx)("p",{children:e("page.props.events.content4")}),Object(m.jsx)(b.a,{className:"typescript",children:"const ParentComponent = () => {\n    const [counter, setCounter] = useState(0)\n\n    const onIncreased = (value) => {\n        setCounter(value)\n    }\n\n    return (\n        <div>\n            <p>Clicked: {counter} times.</p>\n            <ChildComponent increasedEvent={(event) => onIncreased(event)}/>\n        </div>\n    )\n}"})]})}}]),n}(a.Component),C=Object(w.a)()(O),S=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:"Content projection"}),Object(m.jsxs)("p",{children:["As in other frameworks we are able to pass other components into the slots of the component. To do that we have to use ",Object(m.jsx)("code",{children:"children"}),"property from the ",Object(m.jsx)("code",{children:"props"})," component object. That will inform render method to put there the children elements (elements between",Object(m.jsx)("code",{children:"Child"})," tag) provided by the parent."]}),Object(m.jsx)("h2",{children:"React children"}),Object(m.jsx)(b.a,{className:"javascript",children:"export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <h1>Header of child</h1>\n                <div>{this.props.children}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} "}),Object(m.jsx)(b.a,{className:"javascript",children:"export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                    <section>\n                        <h2>Parent section to be displayed</h2>\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                    </section>\n                </Child>\n            </div>\n        )\n    }\n} "}),Object(m.jsx)("h2",{children:"Multiple-slots"}),Object(m.jsx)("p",{children:'React allows us to use multiple slots called "named children". It works very similar like in other frameworks.'}),Object(m.jsx)(b.a,{className:"javascript",children:"export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <div>{this.props.children.header}</div>\n                <div>{this.props.children.default}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} "}),Object(m.jsx)(b.a,{className:"javascript",children:"export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                {{\n                    header: <h2>Parent section to be displayed</h2>,\n                    default: <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                }}\n                </Child>\n            </div>\n        )\n    }\n} "})]})}}]),n}(a.Component),R=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:"Extending the component"}),Object(m.jsxs)("p",{children:['Authors of the React framework recommend to follow the pattern of "Composition over Inheritance" to provide some logic to our components. This is augmented by powerful composition model of React. Based on their experience, they declare that during the creation of Facebook page they haven\'t found any use case where the component Inheritance will be a good idea. (',Object(m.jsx)("a",{href:"https://reactjs.org/docs/composition-vs-inheritance.html",children:"Source"}),")."]}),Object(m.jsxs)("p",{children:["Of course it is possible by extending the other React component class. The first one extends the ",Object(m.jsx)("code",{children:"Component"})," class from React core but this component should not have the render method. The child class will inheritance the methods from the parent class but is must have this missing render method. It is more for creating an abstraction layer to your design but it may provide an additional complexity to your code."]}),Object(m.jsx)(b.a,{className:"javascript",children:"class ParentAbstractComponent extends React.Component {\n  greet() {\n    console.log('Hello world!')\n  }\n}\n\nclass ChildComponent extends ParentAbstractComponent {\n  render () {\n    return(\n      <div>\n        <button onClick={this.greet.bind(this)}>\n          Say hello\n        </button>\n      </div>\n    )\n  }  \n} "}),Object(m.jsxs)("p",{children:['Developer can\'t "override" the render method but he can use ',Object(m.jsx)("code",{children:"props"}),"to pass the additional data and change the behavior of the component."]}),Object(m.jsx)("h2",{children:"High order components HOC"}),Object(m.jsx)("p",{children:"For many components that share the similar behavior, it is possible to create a High-Order Component (HOC) to wrap the component and provide additional functionality. HOCs are functions that take a component and return a new component with new features. That common behavior will be defined once and composed into classes that require it."}),Object(m.jsx)("p",{children:'This HOC function takes a component class as a parameter and returns a new component class that has a new functionality. It is similar to the "Decorator" pattern known from the Object-Oriented Programming. It is advanced technique for reusing component logic that evolved from the React base. Previously to resolve the multi level design problems in the React, the developers used the "mixins".'}),Object(m.jsx)(b.a,{className:"javascript",children:"const Loader = (promiseProp, Wrapped) => class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {loading: true, error: null, result: null};\n  }\n\n  componentDidMount() {\n      this.props[promiseProp].then(\n          value => this.setState({loading: false, result: value}),\n          error => this.setState({loading: false, error})\n      );\n  }\n\n  render() {\n      if (this.state.loading) {\n          return <p>Loading. Please wait...</p>;\n      } else if (!!this.state.error) {\n          return <p>Error: {this.state.error.message}</p>;\n      } else {\n          return <Wrapped {...this.props} {this.state.result} />;\n      }\n  }\n};\n"}),Object(m.jsx)(b.a,{className:"javascript",children:"let AsyncWeatherWidget = Loader(\"weather\", Weather);\n  ... \n\n  <AsyncWeatherWidget weather={fetchWeather('/api/krakow.json')}/>\n"}),Object(m.jsx)("p",{children:"HOC Components doesn't modify the input component but it is wrapping it into a new container component. Wrapped component receives all the props from the container with the addition of the result of the promise."}),Object(m.jsxs)("p",{children:["More detailed information about HOCs can be found in the ",Object(m.jsx)("a",{href:"https://reactjs.org/docs/higher-order-components.html",children:"official documentation"}),"of the React. During the explanation of the HOCs I based on the article from ",Object(m.jsx)("a",{href:"http://natpryce.com/articles/000814.html",children:"Natpryce.com"})]})]})}}]),n}(a.Component),T=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){var e;Object(s.a)(this,n);for(var a=arguments.length,o=new Array(a),i=0;i<a;i++)o[i]=arguments[i];return(e=t.call.apply(t,[this].concat(o))).state={ren:[11,22,33]},e}return Object(p.a)(n,[{key:"render",value:function(){return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:"Directives? What is it?"}),Object(m.jsx)("p",{children:"If you are looking for directives in the React application you may find it difficult."}),Object(m.jsx)("p",{children:"React keep the state of the Virtual DOM so it is responsible for rendering and generating the DOM elementns. This is the fundamental principle how the React works. There is no reason to use something you may known from the Angular or Vue.js framework like directives that are attached to HTML tags because there is no DOM elements where that directive could be attached. When you are providing a attribute for your React component it is treated as property that is passed to the component."}),Object(m.jsx)("h2",{children:"Dynamic CSS classes"}),Object(m.jsx)("p",{children:'Ok so we know that we do not have any directives available in the React.js framework. But how to handle the same issues that Angular and Vue.js handle with directives? The answer is "use JavaScript". React take advantage of the JavaScript and we can use it to create a functions that will provide the expected behavior.'}),Object(m.jsx)(b.a,{className:"javascript",children:'render() {\n    return (\n        <div className={`selected ${this.isAdmin() ? "" : "disabled"}`}>\n            Hello User!\n        </div>\n    )\n}'}),Object(m.jsx)("p",{children:"When the state of a component changes, React performs a re-render and in that moment we pass the respective CSS classes to our div."}),Object(m.jsx)("h2",{children:"Dynamic Inline-styling"}),Object(m.jsx)("p",{children:"This time we will also bind the expression to the style attribute. Because everything in React is an JavaScript we can easily assing specific object to that attribute using the assignment operator."}),Object(m.jsx)(b.a,{className:"javascript",children:'export default InputLabel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputStyles: {\n                color: this.props.disabled ? "#999" : "#000",\n                font-weight: this.props.required ? "bold" : "normal"\n            }\n        }\n    }\n                \n    render() {\n        return (\n            <span style={this.state.inputStyles}>Label text</span>\n        )\n    }\n}'}),Object(m.jsx)("p",{children:'In this example depending on the provided properties we can change the style of the input label. If we pass the required property the "Label text" will be bolded. In inputStyles object we manipulate the CSS selectors and base on the state of the component we can change them to specific value. In JSX we only need to bind the style attribute with the reference of that object. We have to remember that the "style" behave like a property in React.js instead of an classic attribute.'}),Object(m.jsx)("h2",{children:"Conditional rendering"}),Object(m.jsxs)("p",{children:['Again we have to use the clear JavaScript to render a specific HTML code but this time we can use the "if" statement. If the condition is true we will render the',Object(m.jsx)("code",{children:"span"})," block with the basket size information. Otherwise this block will return null that will not be rendered."]}),Object(m.jsx)(b.a,{className:"javascript",children:"render() {\n    return (\n        {this.state.basketItems > 0 && <span>You have {this.state.basketItems} items in your basket.</span>}\n    )\n}"}),Object(m.jsx)("p",{children:"Here we can see that the amount of items in basket is displayed only when there is more than 0 items."}),Object(m.jsx)("p",{children:"In JSX we can use ternary operator to show two code blocks depending on the condition result."}),Object(m.jsx)(b.a,{className:"javascript",children:"render() {\n    return (\n        {this.state.basketItems > 0\n            ? <span>You have {this.state.basketItems} items in your basket.</span>\n            : <span>Your basket is empty.</span>\n        }\n    )\n}"}),Object(m.jsx)("h2",{children:"Rendering the list"}),Object(m.jsx)("p",{children:'Finally sometimes we need to render a list of items. Again in this case we can\'t use directly a "for" directive but we can think of it as a JavaScript code and we can use the "map" function to iterate over the list.'}),Object(m.jsx)(b.a,{className:"javascript",children:"render() {\n    return (\n        {this.state.basketProducts.map((item) => <div>{item.name}</div>)}\n    )\n}"}),Object(m.jsxs)("p",{children:["In this case we want to present the list of orders and each order will be represented by a",Object(m.jsx)("code",{children:"div"})," element that innerText will be the name property of the order."]}),Object(m.jsx)("p",{children:"Using map we can return the zero-based index of the item in the list. So we can get the index of the item variable that we used in the JSX. To do that we can extract the second argument form map method and then use it as a variable."}),Object(m.jsx)(b.a,{className:"javascript",children:"render() {\n    return (\n        {this.state.basketProducts.map((item, i) => <div>{i+1}: {item.name}</div>)}\n    )\n}"}),Object(m.jsx)("p",{children:"Sometimes we want to render a dynamic list of items that can be changed when the component receives new data. In this case every change in the data array will cause the whole list to be re-rendered. To prevent this we can use the key property that is responsible for tracking changes in the data array. To do that we only have to bind the key attribute with proper value. In this case we want to use the id of the item as a key."}),Object(m.jsx)(b.a,{className:"javascript",children:"render() {\n    return (\n        {this.state.basketProducts.map((item, i) => <div key={item.id}>{i+1}: {item.name}</div>)}\n    )\n}"}),Object(m.jsx)("p",{children:"In React this list rendering syntax within JSX may be too long and can be hard to read. So if we want to provide more complex list rendering we can create a specific function or variable that will be responsible for rendering the list in a clear way."}),Object(m.jsx)(b.a,{className:"javascript",children:"render() {\n    const itemsList = this.state.basketProducts.map((item, i) => \n        <div key={item.id}>{i+1}: {item.name}</div>);\n    return (\n        <header>{itemsList}</header>\n    );\n}"})]})}}]),n}(a.Component),P=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:"From Flux to React Redux concept"}),Object(m.jsx)("p",{children:'Developers of the React on the beginning of that framework  presented the concept called "Flux". The idea of Flux was to replace the classic MVC model of designing a applications to provide a "Store" concept that will just hold the application state. Now the Flux is only in maintenance mode but the more sophisticated alternatives has born and we can use them right now. For this project I will focus on the Redux example.'}),Object(m.jsx)("p",{children:'Redux is a pattern and library for managing and updating application state by using "actions". React Redux is an official React UI binding layer that allows our components to read data directly from the Redux store. On the other hand we can dispatch actions that will update the store state. It is very similar concept that is available in Vue.js library called Vuex.'}),Object(m.jsxs)("p",{children:["To start working with Redux we must install the ",Object(m.jsx)("code",{children:"redux"})," package. This is nothing more than executing the following command ",Object(m.jsx)("code",{children:"npx install react-redux"}),". More detailed information how to do it you can find in the ",Object(m.jsx)("a",{href:"https://redux.js.org/introduction/installation",children:"official documentation."})]}),Object(m.jsxs)("p",{children:["After installation we can move to attaching this library to our project. React Redux includes a ",Object(m.jsx)("code",{children:"Provider"})," component that allow us to use the Redux store in our application. So we just need to create the entry point like in the example below."]}),Object(m.jsx)(b.a,{className:"javascript",children:"...\nimport { Provider } from 'react-redux';\nimport store from './store';\n...\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"}),Object(m.jsx)("h2",{children:"Store state and Actions"}),Object(m.jsxs)("p",{children:["Basic purpose of the store is to hold the state of the application. After installation and attaching the library to our project we can create a Redux State Slice that will hold our basket items. The state slice requires a name that will be unique for this slice. In the ",Object(m.jsx)("code",{children:"initialState"})," object we can define the initial value and in the ",Object(m.jsx)("code",{children:"reducer"}),"function we can define the logic to change the state."]}),Object(m.jsx)(b.a,{className:"javascript",children:"import { createSlice } form '@reduxjs/toolkit';\n\nexport const basket = createSlice({\n    name: 'basket',\n    initialState: {\n        items: [],\n    }\n    reducer: {\n        addItem: (state, action) => {\n            state.items.push(action.payload);\n        }\n    },\n});\nexport const { addItem } = basket.actions;\nexport default basket.reducer;\n"}),Object(m.jsxs)("p",{children:["When our slice is ready we can add it to our Redux store by adding the ",Object(m.jsx)("code",{children:"basketReducer"}),"to the ",Object(m.jsx)("code",{children:"reducers"})," object."]}),Object(m.jsx)(b.a,{className:"javascript",children:"import { configureStore } form '@reduxjs/toolkit';\nimport basketReducer from './features/basket';\n\nexport default configureStore({\n    reducer: {\n        basket: basketReducer,\n    },\n});\n"}),Object(m.jsxs)("p",{children:["Having this Slice configured we can use it in our code. To read data from store we use this ",Object(m.jsx)("code",{children:"useSelector"})," function that will return the basket items array. But to add new item to this array we must dispatch an action using ",Object(m.jsx)("code",{children:"useDispatch()"})," method. In React we can create an additional constant that will be a shortcut to the ",Object(m.jsx)("code",{children:"Redux"})," objects."]}),Object(m.jsx)(b.a,{className:"javascript",children:"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addItem } from './features/basket'\n\nexport function BookItem() {\n    const items = useSelector(state => state.basket.items);\n    const dispatch = useDispatch();\n\n    addBook() {\n        dispatch(addItem(new Book()));\n    }\n\n    ...\n}"}),Object(m.jsxs)("p",{children:["This is a basic example of Redux. More details can be found in the",Object(m.jsx)("a",{href:"https://redux.js.org/tutorials/essentials/part-1-overview-concepts",children:"official documentation"}),". Also when I will learn more about Redux I will show you how to use it in React in more detail. But now it is a simple example how to achieve the same functionality in Redux and Vuex."]})]})}}]),n}(a.Component),I=n(36),M=function(){var e=Object(I.a)().t;return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:e("page.lifecycle.hooks.header")}),Object(m.jsx)("p",{children:e("page.lifecycle.hooks.content")}),Object(m.jsx)("h2",{children:e("page.lifecycle.mount.header")}),Object(m.jsx)("p",{children:e("page.lifecycle.mount.content")}),Object(m.jsx)("p",{children:e("page.lifecycle.mount.content2")}),Object(m.jsx)(b.a,{className:"javascript",children:"// Function Component Example\nconst PhotoGallery = () => {\n    ...\n    useEffect(() => {\n        ...\n        setPhotos(receivedPhotos);\n\n    }, []);\n\n    ...\n}"}),Object(m.jsx)("p",{children:e("page.lifecycle.mount.content3")}),Object(m.jsx)(b.a,{className:"javascript",children:"// Class Component Example\nclass PhotoGallery extends React.Component {\n    ...\n\n    componentDidMount() {\n        ... \n        this.setState({photos: receivedPhotos});\n    }\n\n    ...\n}"}),Object(m.jsx)("h2",{children:e("page.lifecycle.update.header")}),Object(m.jsx)("p",{children:e("page.lifecycle.update.content")}),Object(m.jsx)(b.a,{className:"javascript",children:"// Function Component Example\nconst PhotoGallery = ({galleryId}) => {\n    ...\n\n    useEffect(() => {\n        // This part is called every time anything in the component is updated\n    })\n\n    useEffect(() => {\n        // This part is called only when the galleryId is changed\n    }, [galleryId])\n\n    ...\n}"}),Object(m.jsx)("p",{children:e("page.lifecycle.update.content2")}),Object(m.jsx)(b.a,{className:"javascript",children:"// Class Component Example\nclass PhotoGallery extends React.Component {\n    ...\n\n    componentDidUpdate(prevProps, prevState) {\n        // This part is called every time anything in the component is updated\n        ... \n        if(this.props.galleryId !== prevProps.galleryId) {\n            // This part is called only when the galleryId is changed\n        }\n    }\n\n    ...\n}"}),Object(m.jsx)("p",{children:e("page.lifecycle.update.content3")}),Object(m.jsx)("h2",{children:e("page.lifecycle.delete.header")}),Object(m.jsx)("p",{children:e("page.lifecycle.delete.content")}),Object(m.jsx)(b.a,{className:"javascript",children:"// Class Component Example\nclass PhotoGallery extends React.Component {\n...\n\n    componentWillUnmount() {\n        ... \n        clearInterval(this.state.refreshInterval);\n    }\n\n    ...\n}"}),Object(m.jsx)("p",{children:e("page.lifecycle.delete.content2")})]})},A=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(p.a)(n,[{key:"render",value:function(){var e=this.props.t;return Object(m.jsxs)("div",{children:[Object(m.jsx)("h1",{children:e("page.service.provider.header")}),Object(m.jsx)("p",{children:e("page.service.provider.content")}),Object(m.jsx)("p",{children:e("page.service.provider.content2")}),Object(m.jsx)("p",{children:e("page.service.provider.content3")}),Object(m.jsx)("p",{children:e("page.service.provider.content4")}),Object(m.jsx)(b.a,{className:"typescript",children:"export interface PhotoGalleryService {\n    getAllGaleries(): Promise<PhotoGallery[]>\n\n    getGalery(id: number): Promise<PhotoGallery>\n\n    createGalery(photos: Photo[]): Promise<PhotoGallery>\n}"}),Object(m.jsx)("p",{children:e("page.service.provider.content5")}),Object(m.jsx)(b.a,{className:"typescript",children:"export default class PhotoGalleryApiProvider implements PhotoGalleryService {\n    getAllGaleries(): Promise<PhotoGallery[]> {\n        return axios.get('/api/v2/gallery')\n    }\n\n    getGalery(id: number): Promise<PhotoGallery> {\n        return axios.get('/api/v2/gallery/{id}')\n    }\n\n    createGalery(photos: Photo[]): Promise<PhotoGallery> {\n        return axios.post('/api/v2/gallery')\n    }\n}"}),Object(m.jsx)("p",{children:e("page.service.provider.content6")}),Object(m.jsx)("p",{children:e("page.service.provider.content7")}),Object(m.jsx)(b.a,{className:"typescript",children:'export const PhotoGalleryContext = React.createContext<PhotoGalleryService>(new PhotoGalleryApiProvider())\n...\nconst apiProvider = new PhotoGalleryApiProvider()\nfunction App() {\n    return (\n        <div className="App">\n            <PhotoGalleryContext.Provider value={apiProvider}>\n                <>\n                    ... Other components ...\n                </>\n            </PhotoGalleryContext.Provider>\n        </div>\n    )\n\n}'}),Object(m.jsx)("p",{children:e("page.service.provider.content8")}),Object(m.jsx)(b.a,{className:"typescript",children:"const GalleryView: React.FC = () => {\n    const galleryService = React.useContext(PhotoGalleryContext)\n\n    useEffect(() => {\n        galleryService.getAllGaleries().then(() => {\n            ...\n        })\n    }, [])\n\n    ...\n}"}),Object(m.jsx)("p",{children:e("page.service.provider.content9")})]})}}]),n}(a.Component),N=[{path:"/",name:"Home Page",component:g,exact:!0},{path:"/project-initialization",name:"Project Initialization",component:x,exact:!0},{path:"/simple-component",name:"Simple Component",component:f,exact:!0},{path:"/props-component",name:"Props Component",component:C,exact:!0},{path:"/lifecycle-component",name:"Lifecycle Component",component:M,exact:!0},{path:"/slots-component",name:"Slots Component",component:S,exact:!0},{path:"/extend-component",name:"Extend Component",component:R,exact:!0},{path:"/directives-component",name:"Directives Component",component:T,exact:!0},{path:"/store-component",name:"Store Component",component:P,exact:!0},{path:"/services",name:"Services",component:Object(w.a)()(A),exact:!0}],E=n(7);var W=function(){return Object(m.jsx)("div",{children:Object(m.jsxs)(h.a,{children:[Object(m.jsx)(u,{}),Object(m.jsx)("header",{children:Object(m.jsx)(j,{})}),Object(m.jsx)("main",{children:Object(m.jsx)("section",{children:Object(m.jsx)(E.c,{children:N.map((function(e,t){return Object(m.jsx)(E.a,{path:e.path,exact:e.exact,render:function(t){return Object(m.jsx)(e.component,Object(c.a)(Object(c.a)({},t),e.props))}},t)}))})})}),Object(m.jsx)("footer",{})]})})},D=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,275)).then((function(t){var n=t.getCLS,a=t.getFID,o=t.getFCP,i=t.getLCP,r=t.getTTFB;n(e),a(e),o(e),i(e),r(e)}))},J=(n(272),n(28)),F=n(39),H=n(20),G={page:{init:{header:"Inicjalizacja projektu",project:{header:"Inicjalizacja projektu",content:"Podstaw\u0105 rozpocz\u0119cia pracy z bibliotek\u0105 React jest dodanie bazowej biblioteki do projektu. W tym celu mo\u017cna skorzysta\u0107 z r\xf3\u017cnych narz\u0119dzi u\u0142atwiaj\u0105cych postawienie pierwszych krok\xf3w w tym frameworku. Najbardziej podstawowym narz\u0119dziem jest 'Create React App' pozwalaj\u0105cym na wygodnie postawi\u0107 \u015brodowisko do budowania prostej Single Page Application (SPA). Do bardziej rozbudowanych projekt\xf3w zalecam u\u017cycia narz\u0119dzi typu Webpack, Rollup czy Vite"},cra:{header:"Create React App (CRA) - Przygotowanie projektu",content:"U\u017cywaj\u0105c narz\u0119dzia CRA utworzenie projektu 'framework-hero' wymaga jedynie wykonania poni\u017cszej komendy:",content2:"Skrytp ten generuje podstawowy projekt SPA oparty o framework React. Wygenerowan\u0105 struktur\u0119 plik\xf3w mo\u017cna podzieli\u0107 na 4 sekecje:",section:{node:"node_modules - Folder zawieraj\u0105cy zwen\u0119trzne zale\u017cno\u015bci",public:"public - Folder z zasobami statycznymi (obrazki, czcionki, itd.)",source:"src - G\u0142owny folder zawieraj\u0105cy kod aplikacji",root:"Oraz katalog nadrz\u0119dny w kt\xf3rym znajduj\u0119 si\u0119 plik 'package.json' oraz reszta plik\xf3w konfiguracyjnych dla \u015brodowiska (tsconfig.js, itd.)"},content3:"W zale\u017cno\u015bci od wielko\u015bci projektu oraz preferencji deweloper\xf3w struktura katalg\xf3w wewen\u0105trz 'src' mo\u017ce si\u0119 znacz\u0105co r\xf3\u017cni\u0107. Osobi\u015bcie polecam zapozna\u0107 si\u0119 z r\xf3\u017cnymi 'dobrymi praktykami' zwi\u0105zanymi z tworzeniem struktry folder\xf3w. React nie wymusza stosowania si\u0119 konkretnej struktury, co mo\u017ce prowadzi\u0107 do ba\u0142aganu lub ograniczeniu mo\u017cliwo\u015bci rozszerzania kodu. Dlatego warto jest zachowyw\u0107 porz\u0105dek i odpowiednio wydziela\u0107 modu\u0142y oraz komponenty."},craTs:{header:"Create React App - Typescript",content:"Jak ju\u017c wspomnia\u0142em wcze\u015bniej, porz\u0105dek w strukturze plik\xf3w pozwala \u0142atwiej utrzymywa\u0107 tw\xf3j projekt. React domy\u015blnie jest bibliotek\u0105 JavaScriptow\u0105, dzi\u0119ki czemu \u0142atwiej jest zacz\u0105\u0107 tworzy\u0107 pierwsze aplikacje. Jednak im bardziej projekt ro\u015bnie tym wi\u0119cej pojawia si\u0119 r\xf3\u017cnych zale\u017cno\u015bci, kt\xf3re \u0142atwiej jest utrzyma\u0107 stosuj\u0105c programowanie obiektowe, czy chocia\u017c wymuszaj\u0105c struktur\u0119 danych poprzez typowanie oraz interfejsy. Dzi\u0119ki takiemu zabiegowi mo\u017cna wprowadza\u0107 bardziej z\u0142o\u017cone wzorce projektowe do aplikacji upraszczaj\u0105c przy tym proces tworzenia aplikacji.",content2:"TypeScript pozwala na rozszerzenie funkcjonalno\u015bci j\u0119zyka JavaScript dzi\u0119ki czemu nasza aplikacja napisana w React jest mniej podatna na g\u0142upie b\u0142\u0119dy wynikaj\u0105ce z niedopatrzenia jakiego typu dane otrzymujemy od u\u017cytkownika, czy z interfejsu API. Wymaga to od dewelopera wi\u0119kszego pilnowania struktury swojego kodu, jednak p\xf3\u017aniejsze szukanie b\u0142\u0119d\xf3w, czy rozszerzanie funkcjonalno\u015bci jest znacznie przyjemniejsze.",content3:"Dodanie obs\u0142ugi j\u0119zyka TypeScript jest opcjonalne i mo\u017ce by\u0107 dodane w dowolnej fazie projektu. Jednak\u017ce w przypadku tworzenia takiego projektu od zera wystarczy doda\u0107 dotatkowy parametr do skryptu inicjalizuj\u0105cego:",content4:"Wygenerowana struktura plik\xf3w dla projektu TypeScript jest identyczna. R\xf3\u017cnic\u0105 s\u0105 rozszerzenia plik\xf3w oraz plik konfiguracyjny dla obs\u0142ugi j\u0119zyka 'tsconfig.json'. Docelowo zbudowany projekt jest kompilowany do plik\xf3w JavaScript tak jak to by\u0142o w poprzednim przypadku."},run:{header:"CRA - Uruchominie serwera deweloperskiego",content:"Korzystaj\u0105c z narz\u0119dzia 'Create React App' z automatu dostajemy skonfigurowany serwer deweloperski. Skrypt uruchamiaj\u0105cy jest do\u0142\u0105czony do pliku 'package.json' dzi\u0119ki czemu uruchomienie aplikacji i podgl\u0105d 'na \u017cywo' mo\u017cna uruchomi\u0107 jednym poleceniem:"},other:{header:"Inne narz\u0119dzia",content:"Przytoczony powy\u017cej przyk\u0142ad ma za zadanie wprowadzi\u0107 u\u017cytkownika do tworzenia aplikacji React. Jednak \u015brodowisko aplikacji webowych jest bardzo dynamiczne i zmienia si\u0119 bardzo szybko. Bardziej zaawansowanym i uniwersalnym narz\u0119dziem pozwalaj\u0105cym na budowanie i tworzenie projekt\xf3w obecnie jest Webpack. Zadaniem CRA jest szybkie przygotowanie \u015brodowiska do pracy nad aplikacj\u0105. Moim celem by\u0142o przybli\u017cenie jedynie jak mo\u017cna zainicjalizowa\u0107 prosty projekt, kt\xf3ry b\u0119dzie tworzony w oparciu o framework React oraz jak to wygl\u0105da w zestawieniu z Angularem czy Vue.js"}},basic:{intro:{header:"Wprowadzenie do komponent\xf3w",content:"React jest zbudowany z 'Element\xf3w', kt\xf3re s\u0105 najmniejszymi budulcami aplikacji. Element mo\u017ce by\u0107 cz\u0119\u015bci\u0105 czego\u015b wi\u0119kszego, co mo\u017cna nazwa\u0107 \u201ekomponentem\u201d. React elementem mo\u017ce by\u0107 przyk\u0142adowo paragraf, nag\u0142\xf3wek, sekcja czy inny znany znacznik HTMLowy, ale mog\u0105 to by\u0107 r\xf3wnie\u017c inne obiekty z biblioteki 'React'. Po\u0142\u0105czone elementy mog\u0105 tworzy\u0107 bardziej z\u0142o\u017cone struktury jakim s\u0105 komponenty, z kt\xf3rych p\xf3\u017aniej mo\u017cna tworzy\u0107 inne wi\u0119ksze komponenty, a\u017c po ca\u0142e strony czy bardziej z\u0142o\u017cone struktury.",content2:"Biblioteka React do wersji 17 u\u017cywa\u0142a metody ReactDOM.render() a od wersji 18 ReactDOM.createRoot() aby wyrenderowa\u0107 podany przez nas element do drzewka DOM docelowej strony.",content3:"Termin \u201ekomponent\u201d jest bardzo cz\u0119sto u\u017cywany obecnie przy tworzeniu stron internetowych. W React jest to obiekt JavaScriptowy zawieraj\u0105cy pewien zbi\xf3r element\xf3w oraz funkcji, kt\xf3ry dodatkowo mo\u017ce przyjmowa\u0107 pewne zwen\u0119trzne w\u0142a\u015bciwo\u015bci zwracaj\u0105c ostatecznie wyrenderowany ReactElement. Komponent mo\u017cna zdefiniowa\u0107 poprzez rozszerzenie klasy 'React.Component' tworz\u0105c w ten spos\xf3b 'Komponent Klasowy', lub poprzez utworzenie funkcji kt\xf3ra b\u0119dzie docelowo zwraca\u0107 ReactElement co nazywane jest 'Komponentem Funkcyjnym'. React wprowadza nowy rodzaj sk\u0142adni JSX (JavaScript XML) pozwalaj\u0105cej na pisanie kodu HTML wewn\u0105trz j\u0119zyka JavaScript."},sfc:{header:"Single File Component (Jeden plik na komponent)",content:"W poprzedniej sekcji wspomina\u0142em o porz\u0105dku w strukturze plik\xf3w, dzi\u0119ki kt\xf3rej \u0142atwiej jest rozszerza\u0107 kod naszej aplikacji. W framewokru React jeden komponent powinny by\u0107 zdefiniowany w pojedynczym pliku '.jsx' lub '.tsx' (dla komponent\xf3w napisanych w TypeScript). Nazwy plik\xf3w zawieraj\u0105cych komponenty powinny by\u0107 pisane wed\u0142ug notacji PascalCase.",classComponent:{header:"Komponenty klasowe",content:"Przed wprowadzeniem wersji 16.8 Reacta komponenty klasowe by\u0142y jedynym sposobem na zarz\u0105dzaniem stanem czy cyklem \u017cycia komponent\xf3w. Wcze\u015bniej komponenty funkcyjne traktowano jako bezstanowe. Obecnie jednak komponenty klasowe s\u0105 powoli wypierane z powodu ich z\u0142o\u017conej sk\u0142adni, lecz nale\u017cy wiedzie\u0107 jak takie komponenty si\u0119 tworzy.",content2:"Komponent klasowy jest rodzajem zwyk\u0142ej klasy JavaScript, kt\xf3ra rozszerza klas\u0119 'React.Component'. Ka\u017cdy komponent musi zwraca\u0107 ReactElement, wi\u0119c w tym celu, aby wyrenderowa\u0107 kod HTML nale\u017cy zdefiniowa\u0107 metod\u0119 'render()', kt\xf3ra b\u0119dzie zwraca\u0107 struktur\u0119 napisan\u0105 przy uzyciu sk\u0142adni JSX.",content3:"Komponenty klasowe potrafi\u0105 zarz\u0105dza\u0107 stanem komponentu, czy mog\u0105 implementowa\u0107 w\u0142asn\u0105 logik\u0119 zdarze\u0144 wywo\u0142anych podczas r\xf3\u017cnych etap\xf3w cyklu \u017cycia komponentu takie jak 'componentDidMount' itd. Dodatkowo mo\u017cemy inicjalizowa\u0107 bie\u017c\u0105cy stan wykorzystuj\u0105c konstruktor.",ts:{header:"Komponent klasowy - Typescript",content:"Dzi\u0119ki wprowadzeniu mocnego typowania do Reacta (poprzez u\u017cywanie TypeScriptu) du\u017co \u0142atwiej jest zobaczy\u0107 jakie w\u0142a\u015bciwo\u015bci przyjmuje dany komponent, albo jakie w\u0142a\u015bciwo\u015bci s\u0105 zdefiniowane w danym komponentcie poprzez wprowadzenie interfejs\xf3w. Klasa nadal rozszerza 'React.Component', jednak w tym przypadku nale\u017cy poda\u0107 jakiego typu dane wej\u015bciowe otrzymuje oraz jake w\u0142a\u015bciwo\u015bci stanu definiuje nasz komponent."}},functionComponent:{header:"Komponenty funkcyjne",content:"Framework React pozwala na definiowanie komponent\xf3w za pomoc\u0105 funkcji. Na dobr\u0105 spraw\u0119 s\u0105 to zwyk\u0142e funkcje JavaScript, kt\xf3re zwracaj\u0105 React.Element i mog\u0105 przyjmowa\u0107 r\xf3\u017cne w\u0142a\u015bciwo\u015bci. Od wersji 16.8 biblioteki React te komponenty mog\u0105 obs\u0142ugiwa\u0107 metody aktualizacji stanu i cyklu \u017cycia. Wcze\u015bniej s\u0142u\u017cy\u0142y one tylko i wy\u0142\u0105cznie do cel\xf3w prezentacyjnych. Obecnie s\u0105 podstawowymi elementami z kt\xf3rych buduje si\u0119 aplikacje. S\u0105 one \u0142atwiejsze do odczytania czy testowania i cz\u0119sto zawieraj\u0105 mniej kodu.",content2:"Taki sam komponent mo\u017cna zapisac 'czy\u015bciej' stosuj\u0105c sk\u0142adn\u0119 ECMA Script 6 (ES6), wykorzystuj\u0105c funkcj\u0119 anonimow\u0105 przypisan\u0105 do zmiennej.",content3:"Funkcjonalnie powy\u017cszy komponent dzia\u0142a tak samo jak komponent klasowy. Najwieksz\u0105 r\xf3\u017cnic\u0105 jest uproszczona sk\u0142adnia i pozbycie si\u0119 wielu niepotrzebnych s\u0142\xf3w kluczowych takich jak 'this' czy 'props' dzi\u0119ki czemu kod du\u017cego komponentu jest znacznie bardziej czytelny.",ts:{header:"Komponent funkcyjny - Typescript",content:"Podczas korzystania z TypeScript przy komponentach funkcyjnych nie musimy dostarcza\u0107 interfejsu definuj\u0105cego 'State' (stan), dzi\u0119ki czemu jest mniej kodu do utrzymywania."}}},usage:{header:"U\u017cywanie komponent\xf3w",content:"Aby wyrenderowa\u0107 utworznony przez nas komponent nale\u017cy poda\u0107 jego nazw\u0119 w formie tagu elementu JSX.",content2:"Poniewa\u017c obecnie przy tworzeniu komponent\xf3w React wykorzystuje si\u0119 komponenty funkcyjne - dalsza cz\u0119\u015b\u0107 tego przyk\u0142adu b\u0119dzie opiera\u0107 si\u0119 w\u0142a\u015bnie z wykorzystaniem tego podej\u015bcia."}},props:{intro:{header:"Komponent - w\u0142a\u015bciwo\u015bci, metody i parametry",content:"Komponenty React s\u0105 obiektami kt\xf3re mog\u0105 mie\u0107 pewne wewn\u0119trzne w\u0142a\u015bciwo\u015bci oraz metody. Dodatkowo mog\u0105 przyjmowa\u0107 zewn\u0119trzne dane poprzez parametry (eng. 'props'), kt\xf3re wywo\u0142ywane s\u0105 podobnie jak atrybuty w elementach HTML."},internal:{header:"W\u0142a\u015bciwo\u015bci - dane stanu komponentu",content:"Ka\u017cdy komponent mo\u017ce mie\u0107 swoje w\u0142asne w\u0142a\u015bciwo\u015bci danych stanu. Dane stanu trzymaj\u0105 warto\u015bci zmiennych w pami\u0119ci, dzi\u0119ki czemu mo\u017cemy zapisywa\u0107 warto\u015bci  komponentu i zapewnia\u0107 bardziej z\u0142o\u017con\u0105 logik\u0119 biznesow\u0105.",content2:"Komponenty funkcyjne od wersji 16.8 otrzyma\u0142y now\u0105 metod\u0119 'useState()' pozwalaj\u0105c\u0105 na wprowadzenie stanu do tych komponent\xf3w. Zmienne w ten spos\xf3b zdeklarowane zachowuj\u0105 wszelkie zalety reaktywno\u015bci komponentu, czyli przypisanie nowej warto\u015bci do zmiennej spowoduje przerenderowanie zawarto\u015bci komponentu, tak \u017ceby bie\u017c\u0105ca warto\u015b\u0107 by\u0142a widoczna. Poni\u017cszy przyk\u0142ad demonstruje jak zdefiniowa\u0107 w\u0142a\u015bciwo\u015b\u0107 'welcomeMessage' wraz z 'setterem' czyli funkcj\u0105 pozwalaj\u0105c\u0105 na zmian\u0119 stanu tej w\u0142a\u015bciwo\u015bci ('setWelcomeMessage') z wykorzystaniem funkcji 'useState()'. Funkcja ta zwraca tablic\u0119 zmiennych [a, b], gdzie 'a' jest reaktywn\u0105 w\u0142a\u015bciwo\u015bci\u0105, a 'b' jest metod\u0105 ustawiaj\u0105c\u0105 warto\u015b\u0107 (wspomniany setter). W dalszej cz\u0119sci kodu podawana jest warto\u015b\u0107 pocz\u0105tkowa dla tej w\u0142a\u015bciwo\u015bci jako argument funkcji 'useState()'. Wywo\u0142anie zmiennej w kodzie JSX bazuje na wprowadzniu nazwy zmiennej w nawiasy klamrowe '{ }'.  Dzi\u0119ki temu podczas renderowania zwracany jest nag\u0142\xf3wek z tre\u015bci\u0105 'Hello from State example'. Poni\u017cszy przyk\u0142ad przedstawia przyk\u0142adowy komponent napisany w TypeScript. Wersja JavaScript nie przyjmuje wyra\u017ce\u0144 okre\u015blaj\u0105cych typ.",content3:"W przypadku komponent\xf3w klasowych definiowanie w\u0142a\u015bciwo\u015bci stanu jest bardziej z\u0142o\u017cone. Odbywa si\u0119 ono w trakcie tworzenia obiektu przy wywo\u0142aniu konstruktora. Nale\u017cy zdefiniowa\u0107 obiekt 'state' poprzez dodanie w\u0142asnych w\u0142a\u015bciwo\u015bci. R\xf3wnie\u017c w tym miejscu definiowane s\u0105 warto\u015bci pocz\u0105tkowe. Istotne w tym przypadku jest przekazywanie parametr\xf3w 'props\xf3w' do konstruktora i wywo\u0142anie metody nadrz\u0119dnej z przekazaniem tego argumentu.",content4:"Poni\u017cej przedstawiony zosta\u0142 komponent klasowy napisany w j\u0119zyku TypeScript:"},methods:{header:"Metody",content:"W przypadku komponent\xf3w funkcyjnych jak i komponent\xf3w klasowych definiowanie metod nie wymaga specjalnej sk\u0142adni. Metody w komponentach klasowych wygl\u0105daj\u0105 tak samo jak to ma miejsce w klasycznych klasach JavaScript (przyk\u0142adem jest wymagana metoda 'render()'), natomiast w przypadku komponent\xf3w funkcyjnych mo\u017cna je zdefiniowa\u0107 jako zwyk\u0142a funkcja lub przypisa\u0107 funkcj\u0119 anonimow\u0105 do zmiennej."},props:{header:"Parametry",content:"Parametrami ('props') nazywane s\u0105 zwen\u0119trzne w\u0142a\u015bciwo\u015bci komponentu. Pozwalaj\u0105 one przekazywa\u0107 argumenty z rodzica do komponentu docelowego (nazywanego dzieckiem). W przypadku JSX parametry przekazywane s\u0105 w formacie atrybut\xf3w XML podobnie jak w przypadku zwyk\u0142ych element\xf3w HTML. Argumenty domy\u015blnie s\u0105 przekazywane jak typ 'string'.",content2:"W przypadku komponent\xf3w funkcyjnych wystarczy wskaza\u0107 parametr na wej\u015bciu, aby m\xf3c p\xf3\u017aniej z niego korzysta\u0107 w kodzie. Dobr\u0105 praktyk\u0105 jest wykorzystywanie operatora destrukturyzacji (ang. destructuring assignment) w celu wyci\u0105gni\u0119cia w\u0142a\u015bciwych nazw parametr\xf3w.",content3:"Inaczej wygl\u0105da to w przypadku komponent\xf3w klasowych. W tym przypadku parametry przekazywane s\u0105 poprzez konstruktor. Wa\u017cne jest, aby wywo\u0142a\u0107 konstruktor metody nadrz\u0119dnej z wywo\u0142aniem otrzymanych argument\xf3w.",content4:"Opakowuj\u0105c to przy u\u017cyciu TypeScript komponent klasowy nie musimy ju\u017c wywo\u0142ywa\u0107 konstruktora w celu zainicjalizowania parametr\xf3w. Dzi\u0119ki czemu kod mo\u017ce wygl\u0105da\u0107 w nast\u0119puj\u0105cy spos\xf3b:",variables:{header:"Przekazywanie zmiennych",content:"Parametry mog\u0105 przyjmowa\u0107 dowolny typ. Przekazanie innych typ\xf3w ni\u017c 'string' w JSX wymaga wrzucenia w klamry kod JavaScript reprezentuj\u0105cy dany obiekt, lub zmienn\u0105."}},events:{header:"Emitowanie zdarze\u0144",content:"W bibliotece React nie ma czego\u015b takiego jak 'emitowanie zdarze\u0144'. Tutaj stosowane jest podej\u015bcie z przekazywaniem w\u0142asnego argumentu do obs\u0142ugi zdarze\u0144 (eventHandler) do dziecka poprzez parametry. W komponencie dzieka przy definicji parametr\xf3w wej\u015bciowych nale\u017cy r\xf3wnie\u017c poda\u0107 te kt\xf3re maj\u0105 by\u0107 funkcj\u0105 zwrotn\u0105 (ang. callback function). To podej\u015bcie jest znacz\u0105co inne ni\u017c w przypadku omawianych framework\xf3w takich jak Angular czy Vue. W uproszczeniu to komponent dziecka wywo\u0142uje metod\u0119 z parametru, kt\xf3ra w komponencie rodzica mo\u017ce by\u0107 obs\u0142u\u017cona.",content2:"W momencie klikni\u0119cia na przycisk 'Increase number' (1) przechwytywane jest zdarzenie 'click' poprzez metod\u0119 'onClick', kt\xf3ra w momencie wywo\u0142ania wykonuje wewn\u0119trzn\u0105 funkcj\u0119 komponentu 'increaseNumber()'. Wtedy przechwytywane jest zdarzenie (2) maj\u0105ce za zadanie zmian\u0119 stanu komponentu i zwiekszenie warto\u015bci w\u0142a\u015bciwo\u015bci 'currentValue' o jeden. Poniewa\u017c przytoczony zosta\u0142 przyk\u0142ad z komponentem funkcyjnym nale\u017cy doda\u0107 zaczep (ang. hook) stanu 'useEffect()' nas\u0142uchuj\u0105cy na zmian\u0119 warto\u015bci w\u0142a\u015bciwo\u015bci '[currentValue]'. W momencie zmiany warto\u015bci tego stanu (3) wywo\u0142ywana jest funckja zwrotna przekazan\u0105 poprzez parametr 'increasedEvent' z bie\u017c\u0105c\u0105 warto\u015bci\u0105 stanu przekazan\u0105 jako argument. Podej\u015bcie z wykorzystaniem zaczepu 'useEffect()' jest specyficzne dla komponent\xf3w funkcyjnych. Gdyby\u015bmy chcieli wywo\u0142a\u0107 parametr 'increasedEvent' wewn\u0105trz metody 'increaseNumber' zaraz po linijce 'setCurrentValue(...)' rodzic otrzyma\u0142by poprzedni\u0105 warto\u015b\u0107 stanu. Jest to spowodowane tym, \u017ce wywo\u0142anie settera 'setCurrentValue' jest zdarzeniem asynchronicznym.",content3:"W przypadku TypeScript wa\u017cne jest odpowiednie zdefiniowanie interfejsu. Parametr 'increasedEvent' jest funkcj\u0105 anonimow\u0105, kt\xf3ra przyjmuje argumenty typu 'number'. W powy\u017cszym przyk\u0142adznie uproszczone zosta\u0142o r\xf3wnie\u017c wywo\u0142anie metody 'increaseNumber' na przycisku. Zabieg ten jest mo\u017cliwy poniewa\u017c na wywo\u0142anie funkcji 'onClick' chcemy r\xf3wnie\u017c wywo\u0142a\u0107 funckj\u0119 'increaseNumber', kt\xf3rej parametry wej\u015bciowe wzajemnie si\u0119 pokrywaj\u0105 (lub tak jak w tym przypadku s\u0105 pomijane).",content4:"Komponent rodzica b\u0119dzie dzia\u0142a\u0107 na podobnej zasadzie jak w tym momencie pracowali\u015bmy podczas obs\u0142ugi zdarze\u0144 wywo\u0142anych przez przycisk. W rodzicu r\xf3wnie\u017c wystarczy, \u017ce obs\u0142u\u017cymy wywo\u0142anie przychodz\u0105ce z parametru 'increasedEvent'. Tym razem jednak przechwytujemy 'event' wygenerowany przez komponent dziecka i jego warto\u015b\u0107 przekazujemy do wewn\u0119trznej funckji 'onIncreased'."}},lifecycle:{hooks:{header:"Cykl \u017cycia komponentu - zaczepy",content:"Zaczepy cyklu \u017cycia komponent\xf3w (ang. component lifecycle hooks) to interfejsy pozwalaj\u0105ce na napisanie swoich w\u0142asnych funkcji kt\xf3re wywo\u0142aj\u0105 si\u0119 w okre\u015blonym momencie \u017cycia komponentu. Najcz\u0119\u015bciej zdarzenia emitowane s\u0105 podczas tworzenia, modyfikacji, albo tu\u017c przed zniszczeniem komponetu. Wraz z Reactem w wersji 16.8 dodane zosta\u0142e zaczepy do komponent\xf3w funkcyjnych. Wcze\u015bniej ich ob\u0142u\u017cenie by\u0142o mo\u017cliwe jedynie wykorzystuj\u0105c komponenty klasowe."},mount:{header:"Tworzenie",content:"Ten zaczep uruchamia si\u0119 tylko raz podczas inicjalizacji komponent\xf3w. R\xf3\u017cnica pomi\u0119dzy tym zaczepem a wywo\u0142aniem procesu inicjalizacji komponentu w konstruktorze jest znacz\u0105ca, poniewa\u017c funkcja zaczepu wywo\u0142ywana jest po wyrenderowaniu komponentu. Czyli z poziomu tej funkcji jeste\u015bmy w stanie operowa\u0107 na elementach drzewka DOM. Najcz\u0119\u015bciej jednak ten zaczep jest przydatny do pobierania pocz\u0105tkowych danych z zewn\u0119trznych \u017ar\xf3de\u0142 i zapisywania ich do w\u0142a\u015bciwo\u015bci danych stanu.",content2:"W komponentach funkcyjnych stosuje si\u0119 metod\u0119 'useEffect(fn, args)', kt\xf3ra przyjmuje dwa argumenty. Pierwszym z nich jest funkcja sprz\u0119\u017cenia zwrotnego (fn), wewn\u0105trz kt\xf3rej definiujemy co ma si\u0119 wykona\u0107. Drugi argument (args) okre\u015bla nas\u0142uchiwanie na zmian\u0119 stanu tego komponentu. W przypadku inicjalizacji podawana jest pusta tablica ('[]'). Dzi\u0119ki temu nie nas\u0142uchujemy na \u017cadnej w\u0142a\u015bciwo\u015bci, ale i tak raz wywo\u0142amy ten zaczep.",content3:"Komponenty klasowe maj\u0105 prostsz\u0105 sk\u0142adni\u0119 poniewa\u017c wystarczy przeci\u0105\u017cy\u0107 funkcj\u0119 'componentDidMount()':"},update:{header:"Aktualizacja",content:"Zaczep aktualizacji wywo\u0142ywany jest ka\u017cdorazowo przy ka\u017cdej aktualizacji stanu komponentu. Zbyt wiele aktualizacji mo\u017ce powodowa\u0107 problemy z wydajno\u015bci\u0105. Dlatego bardzo wa\u017cne jest, aby u\u017cywa\u0107 go ostro\u017cnie. Tak jak w poprzednim przypadku w komponencie funkcyjnym, wywo\u0142ujemy funkcj\u0119 zaczepu 'useEffect()'. Tym razem jako drugi argument podawana jest tablica ze zmienn\u0105, kt\xf3ra ma by\u0107 obserwowana.",content2:"W komponentach klasowych nale\u017cy zdefiniowa\u0107 metod\u0119 o nazwie 'componentDidUpdate'. Metoda ta otrzymuje dwa parametry: poprzednie w\u0142a\u015bciwo\u015bci i poprzednie w\u0142a\u015bciwo\u015bci danych stanu. Mo\u017cemy wi\u0119c sprawdzi\u0107, czy konkretna warto\u015b\u0107 w\u0142a\u015bciwo\u015bci lub stanu uleg\u0142a zmianie i zareagowa\u0107 na to zdarzenie. Na przyk\u0142ad mo\u017cemy pobra\u0107 now\u0105 list\u0119 zdj\u0119\u0107 za ka\u017cdym razem, gdy zmieni si\u0119 w\u0142a\u015bciwo\u015b\u0107 GalleryID.",content3:"Jak wida\u0107 metoda useEffect jest prostsza i czyni kod bardziej czytelnym. Ma jednak znacz\u0105c\u0105 wad\u0119. U\u017cywaj\u0105c jej nie jeste\u015bmy w stanie uzyska\u0107 dost\u0119pu do poprzednich warto\u015bci w\u0142a\u015bciwo\u015bci czy stanu."},delete:{header:"Usuwanie",content:"Na koniec zosta\u0142a metoda wywo\u0142ywana tu\u017c przed usuni\u0119ciem lub odmontowaniem komponentu. Tak jak metoda inicjalizuj\u0105ca jest ona wywo\u0142ywana tylko raz w trakcie \u017cycia komponentu. Ten zaczep mo\u017cna wykorzysta\u0107 w celu wyczyszczenia danych komponentu (interwa\u0142\xf3w, czy funkcji timeout). W tym celu wykorzystywana jest metoda 'componentWillUnmout()'",content2:"Niestety nie jest ona dost\u0119pna dla komponent\xf3w funkcyjnych."}},service:{provider:{header:"Serwisy i konteksty",content:"Wielk\u0105 zalet\u0105 framework\xf3w takich jak React jest mo\u017cliwo\u015b\u0107 stosowania paradygmatu odwr\xf3conego sterowania (ang. Inversion of Control, IoC). W idealnym \u015bwiecie komponent powinien zajmowa\u0107 si\u0119 g\u0142\xf3wnie warstw\u0105 prezentacji i przedstawia\u0107 u\u017cytkownikowi ko\u0144cowemu jedynie stan aplikacji. W tym celu mo\u017cna wyci\u0105ga\u0107 logik\u0119 biznesow\u0105 do zewn\u0119trznych klas, dzi\u0119ki czemu \u0142atwiej jest zachowa\u0107 porz\u0105dek w aplikacji zapweniaj\u0105c elastyczno\u015b\u0107 kodu. Klasy maj\u0105ce jasno zdefiniowany cel, zapewniaj\u0105ce konkretn\u0105 logik\u0119 mo\u017cna nazwa\u0107 serwisami. W serwisach mo\u017cna obs\u0142ugiwa\u0107 pobieranie danych z zewn\u0119trznego serwera, lub sprawdza\u0107 poprawno\u015b\u0107 wporwadzanych danych.",content2:"Framework React wprowadza poj\u0119cie 'Kontekstu', dzi\u0119ki kt\xf3remu zamiast przekazywa\u0107 dane z g\xf3ry w d\xf3\u0142 poprzez w\u0142a\u015bciwo\u015bci mo\u017cemy wsp\xf3\u0142dzieli\u0107 pewne w\u0142a\u015bciwo\u015bci przez wiele komponent\xf3w bez konieczno\u015bci ich przekazywania z rodzica do dziecka. Kontekst za za zadanie wsp\xf3\u0142dzieli\u0107 pewien zakres danych, kt\xf3ry dla wszystkich dzieci na r\xf3\u017cnym poziomie zagnie\u017cd\u017cenia ma by\u0107 uznawany za globalny.",content3:"Kontekst jest Reactow\u0105 wersj\u0105 Angularowych 'Serwis\xf3w', z t\u0105 r\xf3\u017cnic\u0105, \u017ce s\u0105 one do\u0142\u0105czane do struktury aplikacji poprzez komponenty 'dostawc\xf3w' (ang. Provider). W Angularze serwisy s\u0105 dostarczane do komponent\xf3w poprzez wstrzykiwanie zale\u017cno\u015bci (ang. Dependency Injection, DI). Dzi\u0119ki tym technikom kod staje si\u0119 lu\u017ano powi\u0105zany i du\u017co \u0142atwiej jest tworzy\u0107 testowalne komponenty co u\u0142atwia znacz\u0105co programowanie sterowane testami (ang. test driven development).",content4:"Serwisy mo\u017cna spotka\u0107 nie tylko w Angularze, ale r\xf3wnie\u017c w innych j\u0119zykach zorientowanych na programowanie obiektowe. Najwi\u0119kszy zysk z korzystania z serwis\xf3w wida\u0107 dopiero przy wi\u0119kszych aplikacjach, a dodatkowo korzystanie z TypeScriptu znacz\u0105co u\u0142atwia dalszy rozw\xf3j aplikacji. U\u017cywaj\u0105c Reacta pomimo braku 'Serwis\xf3w' nic nie stoi na przeszkodzie, \u017ceby tak\u0105 koncepcj\u0119 wprowadzi\u0107. Serwisem mo\u017cemy nazwa\u0107 pewn\u0105 klas\u0119 abstrakcyjn\u0105, lub interfejs wed\u0142ug, kt\xf3rego mo\u017cemy tworzy\u0107 konkretnych dostawc\xf3w zapewniaj\u0105cych dan\u0105 funkcjonalno\u015b\u0107. Kontekst mo\u017ce implementowa\u0107 ten serwis, a w kodzie klienckim mo\u017cemy do niego przypisa\u0107 konkretnych dostawc\xf3w.",content5:"Przyk\u0142adowo powy\u017cszy interfejs definiuj\u0105cy 'PhotoGalleryService' oker\u015bla podstawowe metody s\u0142u\u017c\u0105ce do obs\u0142ugi logiki biznesowej maj\u0105cej na celu odczyt oraz tworzenie galerii obraz\xf3w.",content6:"Klasa dostawcy 'PhotoGalleryApiProvider' jest konkretn\u0105 implementacj\u0105 wcze\u015bniej zdefiniowanego interfejsu 'PhotoGalleryService'. Dostarcza ona dane poszczeg\xf3lnych galerii poprzez zapytania HTTP wys\u0142ane do serwera dostarczaj\u0105cego interfejs REST API. Dzi\u0119ki temu zabiegowi logika odpowiedzialna za pobieranie danych z zewn\u0119trznego \u017ar\xf3d\u0142a znajduje si\u0119 w jednym miejscu i nawet je\u015bli wiele komponent\xf3w mia\u0142oby korzysta\u0107 z tych metod to zachowana jest zasada jednej odpowiedzialno\u015bci (ang. single responsibility principle). Takiego dostawc\u0119 \u0142atwo jest p\xf3\u017aniej zamockowa\u0107 podczas test\xf3w jednostkowych.",content7:"Teraz jeste\u015bmy gotowi do utworzenia kontekstu i dodania go do naszej aplikacji. 'PhotoGalleryContext.Provider' przyjmuje parametr 'value' kt\xf3ry okre\u015bla jaki obiekt b\u0119dzie dost\u0119pny dla wszystkich komponent\xf3w potomnych.",content8:"Aby prawid\u0142owo obs\u0142ugiwa\u0107 dostawc\u0119 nale\u017cy w komponencie dziecka skorzystac z funkcji 'React.useContext()' podaj\u0105c jako argument interesuj\u0105cy nas kontekst. Ten komponent w kt\xf3rym si\u0119gamy po kontekst nazywamy konsumentem (ang. consumer).",content9:"Teraz dzi\u0119ki temu zabiegowi nie musimy przekazywa\u0107 parametr\xf3w przez wysztkie komponenty od g\xf3ry do do\u0142u, ale w odpowiednim momencie mo\u017cemy je wywo\u0142a\u0107 odwo\u0142uj\u0105c si\u0119 przez zmienn\u0105 'galleryService'. W ten spos\xf3b dostarczamy logik\u0119 biznesow\u0105 do naszej aplikacji, kt\xf3r\u0105 mo\u017cemy w \u0142atwy spos\xf3b zaprezentowa\u0107 u\u017cytkownikowi poprzez wartstw\u0119 prezentacji."}}}},L={page:{init:{header:"Project initialization",project:{header:"Project initialization",content:"The key to getting started with React library is adding a core package to your project. For this purpose, you can use various tools to help you take your first steps in this framework. The most basic tool is 'Create React App' which allows you to set up an environment easily for building a simple Single Page Application (SPA). For more complex projects, I recommend the use of tools such as Webpack, Rollup or Vite"},cra:{header:"Create React App (CRA) - Project creation",content:"Using the CRA tool to create project called: 'framework-hero' we only need to execute the following command:",content2:"This script generates a basic SPA project based on the React framework. The generated file structure can be divided into 4 sections:",section:{node:"node_modules - directory with external dependencies",public:"public - directory with static assets (pictures, fonts, etc)",source:"src - main directory with source code of the application",root:"And root directory with 'package.json' file and other config files (tsconfig.js, etc.)"},content3:"Depending on the size of the project and the preferences of developers, the structure of directories within the 'src' may vary significantly. Personally, I recommend you to familiarize with the various 'good practices' related with creating a good folder structure. React doesn't enforce any particular structure, so it can lead to clutter or limit code extensibility. Therefore, it is worth keeping order and separating modules and components appropriately."},craTs:{header:"Create React App - Typescript",content:"As mentioned before, the clean file file structure makes it easier to maintain your project. By default, React is using JavaScript, which makes it easier to get started building your first application. However, the more the project grows, the more complex application is becoming. More easily is to maintain such code using object-oriented programming, or at least forcing the data structure by using typed variables or interfaces. Thanks to this, you can introduce more complex design patterns into the application, that simplify the process of application cration.",content2:"TypeScript allows you to extend the functionality of the JavaScript language. Based on that our React application is less prone to errors caused by data-type mismatch and we can more easly handle data we receive from the user or from the API interface. This requires the developer to pay more attention to the structure of his code, but later looking for bugs or extending functionality is much more pleasant.",content3:"Adding TypeScript support is optional and can be added at any stage of the project. However, if you are creating such a project from scratch, you just need to add an extra parameter to the initialization script:",content4:"The generated file structure for the TypeScript project is identical. The difference is the file extensions and the configuration file for the language support 'tsconfig.json'. Ultimately, the project is compiled into JavaScript files as it was in the previous case."},run:{header:"CRA - Development server",content:"Using the 'Create React App' tool, we get a configured development server from the machine. The launch script is attached to the 'package.json' file, based on which the application can be launched and the live preview can be run with one command:"},other:{header:"Other tools",content:"The example above is intended to introduce the user to creating React applications. However, the web application environment is very dynamic and is changing very quickly. Webpack is now a more advanced and universal tool that allows you to build and create projects. The task of the CRA is to quickly prepare the environment to work on the application. My goal was to present only how to initiate a simple project, which will be created based on the React framework, and how it looks in combination with Angular or Vue.js"}},basic:{intro:{header:"Component introduction",content:"React is built from 'Elements', which are the smallest building blocks of an application. An element can be part of something larger that can be called a 'component.' For example, a React element can be a paragraph, a header, a section, or any other known HTML tag, but it can also be other objects from the 'React' library. Connected elements can create more complex structures such as components, from which you can later create other larger components, up to whole pages or more complex structures.",content2:"The React library used the ReactDOM.render() method up to version 17 and from version 18 ReactDOM.createRoot() to render the element we specified to the DOM tree of the target page.",content3:"The term 'component' is used a lot today in web development. In React, it is a JavaScript object containing a certain set of elements and functions, which can additionally take some external properties, returning the eventually rendered ReactElement. A component can be defined by extending the class 'React.Component' thus creating a 'Class Component', or by creating a function that will ultimately return a ReactElement which is called a 'Function Component'. React introduces a new kind of JSX (JavaScript XML) syntax that allows you to write HTML code inside JavaScript."},sfc:{header:"Single File Component",content:"In the previous section, I mentioned the order in the file structure, which makes it easier to extend the code of our application. In the React framework, one component should be defined in a single '.jsx' or '.tsx' file (for components written in TypeScript). File names containing components should be written in PascalCase notation.",classComponent:{header:"Class components",content:"Before React 16.8, class components were the only way to manage the state or lifecycle of components. Previously, functional components were considered stateless. Currently, however, class components are slowly being replaced due to their complex syntax, but you should know how to create such components.",content2:"A class component is a kind of regular JavaScript class that extends the 'React.Component' class. Each component must return a ReactElement, so in order to render the HTML code, define the 'render()' method, which will return a structure written using JSX syntax.",content3:"Class components can manage the state of a component, or they can implement their own logic of events fired during various stages of the component life cycle, such as 'componentDidMount' etc. Additionally, we can initialize the current state using a constructor.",ts:{header:"Class component - Typescript",content:"By introducing strongly typed variables into React (by using TypeScript), it's much easier to see what properties a component takes, or what properties are defined in a component by introducing interfaces. The class still extends 'React.Component', but in this case you need to specify what type of input it receives and what state properties our component defines."}},functionComponent:{header:"Functional components",content:"These are regular JavaScript functions that return React.Element and can take a variety of properties. As of React 16.8, these components can support state and lifecycle update methods. Previously, they were used only for presentation purposes. Currently, they are the basic elements of which applications are built. They are easier to read or test, and often contain less code.",content2:"The same component can be written 'cleaner' using the ECMAScript6 (ES6) syntax, using the anonymous function assigned to the variable.",content3:"Baisicly, the above functional component works the same as a class component. The biggest difference is the simplified syntax and getting rid of many unnecessary keywords such as 'this' or 'props' making the code of a large component much more readable.",ts:{header:"Functional component - Typescript",content:"When using TypeScript with function components, we don't need to provide an interface defining 'State', so there is less code to maintain."}}},usage:{header:"Component usage",content:"In order to render the component we created, its name should be given in the form of a JSX element tag.",content2:"Since React components are now based on functional components, the rest of this example will use this approach."}},props:{intro:{header:"Component - state, methods and properties",content:"React components are objects that can have certain internal state properties and methods. Additionally, they can accept external data via properties (common name: 'props'), which are invoked similarly to attributes in HTML elements."},internal:{header:"State - component internal properties",content:"Each component can have its own state data properties. State data keeps variable values in memory so we can save component values and provide more complex business logic.",content2:"Functional components since React version 16.8 have a new 'useState ()' method that allows you to enter the state into these components. Variables thus declared retain all the advantages of component reactivity, i.e. assigning a new value to a variable will re-render the component content so that the current value is visible. To do that we are using the 'useState ()' function. The following example demonstrates how to define the 'welcomeMessage' property. Second argument is the 'setter' that is a function that allows you to change the state of this property ('setWelcomeMessage'). This function returns an array of variables [a, b], where 'a' is a reactive property and 'b' is a method that sets the value (the setter mentioned). Later in the code, the initial value for this property is specified as an argument to the 'useState()' function. Invoking a variable in JSX code is based on entering the variable name in curly braces '{}'. As a result, a header with the text 'Hello from State example' is returned during rendering. The following example shows an example component written in TypeScript. The JavaScript version does not accept type expressions.",content3:"For class components, defining state properties is more complex. It takes place while creating the object during calling the constructor. User can define the state object by adding his own properties. Also during the constructor invocation the initial values are defined. The important thing in this case is that we are passing 'props' parameters to the constructor and calling the parent method with this argument.",content4:"The following is presented a class component written in TypeScript:"},methods:{header:"Methods",content:"In the case of functional components as well as class components, defining methods does not require any special syntax. Methods in class components look the same as in classic JavaScript classes (an example is the required 'render ()' method), while for functional components they can be defined as a regular function or assigned an anonymous function to a variable."},props:{header:"Properties",content:"Properties ('props') are called the external properties of a component. They allow arguments to be passed from the parent to the target component (called a child). In the case of JSX, the parameters are passed like the XML attribute very similar to regular HTML elements. By default, the arguments are passed as the type 'string'.",content2:"In the case of functional components, it is enough to provide a argument in the parametrer to be able to use it later in the code. It is good practice to use the destructuring assignment operator to extract the correct parameter names.",content3:"This is not the case for class components. In this case, the parameters are passed through the constructor. It is important to call the constructor of the parent method with the arguments received.",content4:"By wrapping it up with TypeScript, we no longer need to call the constructor to initialize the parameters. So the code can look like this:",variables:{header:"Passing variables",content:"Properties can be anything. Passing other types than 'string' in JSX requires throwing the JavaScript code representing the object or variable into the braces."}},events:{header:"Event emitting",content:"There is no such thing as 'emitting events' in the React library. Here, the approach is to pass your own argument to handle events (eventHandler) to the child through parameters. When defining the input parameters, in the child component, you should also specify those that are going to be a callback functions. This approach is significantly different than in the case of discussed frameworks such as Angular or Vue. In simple terms, it is the child component that calls the method from the parameter that can be handled in the parent component.",content2:"When clicking on the 'Increase number' button (1), the 'click' event is caught by the 'onClick' method, which executes the internal function of the 'increaseNumber ()' component at the time of calling. Then the event (2) is caught, which is to change the state of the component and increase the value of the 'currentValue' property by one. As an example with a function component is given, you should add a 'useEffect ()' state hook that listens for a change in the value of the '[currentValue]' property. When the value of this state is changed (3), the return function passed through the 'increasedEvent' parameter is called with the current state value passed as an argument. The 'useEffect ()' hook approach is specific to function components. If we wanted to call the 'increasedEvent' parameter inside the 'increaseNumber' method right after the 'setCurrentValue (...)' line, the parent would get the previous state value. This is because calling setter 'setCurrentValue' is an asynchronous event.",content3:"In the case of TypeScript, it is important to properly define the interface. The 'increasedEvent' parameter is an anonymous function that takes arguments of the type 'number'. In the above example, calling the 'increaseNumber' method on the button has also been simplified. This procedure is possible because when calling the 'onClick' function we also want to call the 'increaseNumber' function, the input parameters of which overlap (or, as in this case, they are omitted).",content4:"The parent component will work in a similar way as we worked at this point in handling button events. In the parent, it is also enough to handle the call coming from the 'increasedEvent' parameter. This time, however, we capture the 'event' generated by the child's component and pass its value to the internal 'onIncreased' function."}},lifecycle:{hooks:{header:"Component lifecycle hooks",content:"Component lifecycle hooks are interfaces that allow you to write your own functions that will be called at a certain point in the life of a component. Most often, events are emitted while creating, modifying, or just before destroying a component. With React 16.8, hooks have been added to functional components. Previously, debiting them was possible only by using class components."},mount:{header:"Creation",content:"This hook only fires once during component initialization. The difference between this hook and the component initialization process call in the constructor is significant because the hook function is called after the component is rendered. So from the level of this function we are able to operate on the elements of the DOM tree. Most often, however, this hook is useful for retrieving initial data from external sources and writing it to state data properties.",content2:"Function components use the 'useEffect (fn, args)' method that takes two arguments. The first is the callback function (fn), inside which we define what is to be performed. The second argument (args) is to listen for this component's state change. An empty array ('[]') is given when initializing. Thanks to this, we are not listening for any property, but we will trigger this hook once.",content3:"Class components have a simpler syntax because you just need to override the 'componentDidMount ()' function:"},update:{header:"Update",content:"The update hook is triggered each time the component status is updated. Too many updates can cause performance issues. Therefore, it is very important to use it carefully. As in the previous case in the function component, we call the hook function 'useEffect ()'. This time the table with the variable to be monitored is given as the second argument.",content2:"In class components, you must define a method named 'componentDidUpdate'. This method receives two parameters: the previous properties and the previous state data properties. So we can check if a specific property or state value has changed and react to that event. For example, we can retrieve a new photo list every time the GalleryID property changes.",content3:"As you can see, the useEffect method is simpler and makes the code more readable. However, it has a significant drawback. Using it, we are not able to access the previous property or state values."},delete:{header:"Deletion",content:"Finally, this method is called just before removing or unmounting a component. Like an initialization method, it is only called once during the lifetime of a component. This hook can be used to clear component data (intervals or timeout functions). The 'componentWillUnmout ()' method is used for this purpose.",content2:"Unfortunately, it is not available for functional components."}},service:{provider:{header:"Service and context",content:"The great advantage of frameworks such as React is the ability to use the Inversion of Control (IoC) paradigm. In an ideal world, a component should mainly deal with the presentation layer and only present the state of the application to the end user. For this purpose, business logic can be pulled into external classes, which makes it easier to keep the application organized while providing code flexibility. Classes with a clearly defined purpose and providing specific logic can be called services. The websites can handle data download from an external server or check the correctness of imported data.",content2:"The React framework introduces the concept of 'Context', so that instead of passing data from the top down through properties, we can share certain properties across multiple components without having to pass them from parent to child. The context is designed to share a certain range of data that is to be considered global for all children at different levels of nesting.",content3:"Context is a React version of Angular 'Service', with the difference that they are attached to the application structure via Provider components. In Angular, services are attached to components by Dependency Injection (DI) mechanism. Thanks to these techniques, the code becomes loosely coupled and it is much easier to create testable components, which significantly facilitates test-driven development.",content4:"Services can be found not only in Angular, but also in other object-oriented programming languages. The greatest advantage from using services is visible with larger applications, and additionally, with the use of TypeScript that significantly facilitates the further development of the application. Using React, despite the lack of 'Services', nothing stands in the way of introducing such a concept. We can call a service a certain abstract class, or an interface according to which we can create specific provider that provide a given functionality. Context can implement this service, and in the client code we can assign specific providers to it.",content5:"For example, the above interface defining 'PhotoGalleryService' defines the basic methods for handling business logic for reading and creating an image gallery.",content6:"The provider class 'PhotoGalleryApiProvider' is a concrete implementation of the previously defined 'PhotoGalleryService' interface. It provides the data of individual galleries through HTTP requests sent to the server  REST API interface. Thanks to this, the logic responsible for collecting data from an external source is in one place and even if many components were to use these methods, and the single responsibility principle is maintained. Such a provider is easy to mock later during unit testing.",content7:"Now we are ready to create the context and add it to our application. 'PhotoGalleryContext.Provider' takes a 'value' parameter which specifies what object will be available to all child components.",content8:"To properly handle the provider, use the 'React.useContext()' function in the child component, giving the context of interest as an argument. This component in which we reach for the context is called the 'consumer'.",content9:"Now, we do not have to pass parameters through all components from top to bottom, but at the right component we can call context variables by referring to the 'galleryService'. In this way, we provide business logic to our application, which we can easily present to the user through the presentation value."}}}};J.a.use(F.a).use(H.e).init({fallbackLng:"pl",resources:{en:{translation:L},pl:{translation:G}}});J.a;r.a.render(Object(m.jsx)(o.a.StrictMode,{children:Object(m.jsx)(W,{})}),document.getElementById("root")),D()},44:function(e,t,n){},45:function(e,t,n){},46:function(e,t,n){},53:function(e,t,n){}},[[273,1,2]]]);
//# sourceMappingURL=main.b7a83beb.chunk.js.map