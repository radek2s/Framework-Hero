{"version":3,"sources":["layout/Navbar.tsx","layout/Topbar.tsx","views/Basic.tsx","views/Home.tsx","views/Initialization.tsx","views/Props.tsx","views/Slots.tsx","views/Extend.tsx","views/Directives.tsx","views/StoreView.tsx","views/Lifecycle.tsx","views/Service.tsx","router.ts","App.tsx","reportWebVitals.ts","locales/pl/translations.ts","locales/en/translations.ts","i18n.ts","index.tsx"],"names":["Navbar","state","to","React","Topbar","target","this","props","i18n","changeLanguage","value","className","onChange","e","changeLanguageHandler","withTranslation","Basic","t","Home","welcomeMessage","ReactInit","src","alt","PropsExample","SlotsExample","Extend","href","Directives","ren","StoreView","Lifecycle","useTranslation","Service","routes","path","name","component","exact","App","map","route","index","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","translations","page","init","header","project","content","cra","content2","section","node","public","source","root","content3","craTs","content4","run","other","basic","intro","sfc","classComponent","ts","functionComponent","usage","internal","methods","variables","events","lifecycle","hooks","mount","update","delete","service","provider","content5","content6","content7","content8","content9","use","LanguageDetector","initReactI18next","fallbackLng","resources","en","translation","translationsEN","pl","translationsPL","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7a83beb.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Navbar.css';\nimport {\n    Link\n  } from \"react-router-dom\";\n\ninterface Props {\n    // framework: String;\n};\n\ninterface State {\n//   welcomeMessage: String;\n};\n\nexport default class Navbar extends React.Component<Props, State> {\n  state: State = {\n    // welcomeMessage: 'Hello from '\n  };\n\n  render () {\n    return (\n      <div>\n          <nav>\n              <div>\n                  <ul>\n                      <li><Link to=\"/\">Home</Link></li>\n                      <li><Link to=\"/project-initialization\">Project initialization</Link></li>\n                      <li><Link to=\"/simple-component\">Component Example</Link></li>\n                      <li><Link to=\"/props-component\">Component Parameters</Link></li>\n                      <li><Link to=\"/lifecycle-component\">Component Lifecycle</Link></li>\n                      <li><Link to=\"/slots-component\">Component Projection</Link></li>\n                      <li><Link to=\"/extend-component\">Extending components</Link></li>\n                      <li><Link to=\"/services\">Service</Link></li>\n                      <li><Link to=\"/directives-component\">Directives</Link></li>\n                      <li><Link to=\"/store-component\">Store concept</Link></li>\n                  </ul>\n              </div>\n          </nav>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport './Topbar.css';\nimport { withTranslation, WithTranslation } from 'react-i18next'\n\ninterface Props {};\ninterface State {};\n\n class Topbar extends React.Component<Props & WithTranslation, State> {\n\n  changeLanguageHandler({target}: React.ChangeEvent<HTMLSelectElement>) {\n    this.props.i18n.changeLanguage(target.value)\n  }\n \n  render () {\n    return (\n        <div className=\"topbar\">\n            <h1>React page</h1>\n            <div className='language-selector'>\n              <select onChange={(e) => this.changeLanguageHandler(e)}>\n                <option value={\"pl\"}>Polski</option>\n                <option value={\"en\"}>English</option>\n              </select>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default withTranslation()(Topbar)","import * as React from 'react';\nimport Highlight from 'react-highlight'\nimport { withTranslation, WithTranslation } from 'react-i18next'\n\n\ninterface Props {};\ninterface State {};\n\nclass Basic extends React.Component<Props & WithTranslation, State> {\n \n  render () {\n    const { t } = this.props\n    return (\n        <div>\n            <h1>{t(\"page.basic.intro.header\")}</h1>\n\n            <p>{t(\"page.basic.intro.content\")}</p>\n\n            <p>{t(\"page.basic.intro.content2\")}</p>\n\n            <Highlight className=\"xml\">\n                {`<html>\n    <body>\n        <div id=\"root\"></div>\n        <script>\n            const element = <h1>Hello React!</h1>;\n            ReactDOM.render(element, document.getElementById('root'));\n        </script>\n    </body>\n</html>`}\n            </Highlight>\n\n            <p>{t(\"page.basic.intro.content3\")}</p>\n\n            <h2>{t(\"page.basic.sfc.header\")}</h2>\n\n            <p>{t(\"page.basic.sfc.content\")}</p>\n\n            <h3>{t(\"page.basic.sfc.classComponent.header\")}</h3>\n\n            <p>{t(\"page.basic.sfc.classComponent.content\")}</p>\n\n            <p>{t(\"page.basic.sfc.classComponent.content2\")}</p>\n\n            <Highlight className=\"javascript\">\n                {`class SingleComponentSelector extends React.Component {\n    render() {\n        return <h1>Hello from React SFC</h1>\n    }\n}\nexport default SingleComponentSelector`}\n            </Highlight>\n\n            <p>{t(\"page.basic.sfc.classComponent.content3\")}</p>\n\n            <h4>{t(\"page.basic.sfc.classComponent.ts.header\")}</h4>\n\n            <p>{t(\"page.basic.sfc.classComponent.ts.content\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`interface MyComponentProps {};\ninterface MyComponentState {};\n\nclass SingleComponentSelector extends React.Component<MyComponentProps, MyComponentState> {\n    render(): JSX.Element {\n        return <h1>Hello from React SFC</h1>\n    }\n}\nexport default SingleComponentSelector`}\n</Highlight>\n\n            <h3>{t(\"page.basic.sfc.functionComponent.header\")}</h3>\n\n            <p>{t(\"page.basic.sfc.functionComponent.content\")}</p>\n\n            <Highlight className=\"javascript\">\n                {`function SingleComponentSelector() {\n    return <h1>Hello from React SFC</h1>\n}\nexport default SingleComponentSelector`}\n            </Highlight>\n\n            <p>{t(\"page.basic.sfc.functionComponent.content2\")}</p>\n\n            <Highlight className=\"javascript\">\n                {`const SingleComponentSelector = () => {\n    return <h1>Hello from React SFC</h1>\n}\nexport default SingleComponentSelector`}\n            </Highlight>\n\n            <p>{t(\"page.basic.sfc.functionComponent.content3\")}</p>\n\n            <h4>{t(\"page.basic.sfc.functionComponent.ts.header\")}</h4>\n\n            <p>{t(\"page.basic.sfc.functionComponent.ts.content\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`interface MyComponentProps {};\nconst SingleComponentSelector: React.FC<MyComponentProps> = () => {\n    return <h1>Hello from React SFC</h1>\n}\nexport default SingleComponentSelector`}\n            </Highlight>\n\n\n\n            \n\n            <h2>{t(\"page.basic.usage.header\")}</h2>\n\n            <p>{t(\"page.basic.usage.content\")}</p>\n\n            <Highlight className=\"javascript\">\n                {`import SingleComponentSelector from './SingleComponentSelector'\n...\nconst element = <SingleComponentSelector />;\nReactDOM.render(element, document.getElementById('root'));`}\n            </Highlight>\n\n            <p>{t(\"page.basic.usage.content2\")}</p>\n        </div>\n    );\n  }\n}\n\nexport default withTranslation()(Basic)","import * as React from 'react';\n\ninterface Props {\n    framework: String;\n};\n\ninterface State {\n  welcomeMessage: String;\n};\n\nexport default class Home extends React.Component<Props, State> {\n  state: State = {\n    welcomeMessage: 'Hello React'\n  };\n\n  render () {\n    return (\n      <div>\n          <h1>{this.state.welcomeMessage}</h1>\n          <p>\n            In general this is a JavaScript library for building user interfaces.\n            React has been released in 2013 by Jordan Walke from Facebook company.\n            It is mostly used to create interactive Single Page Applications (SPA).\n            Why React is so popular? Because it start using Virtual DOM (Document Object Model)\n            to render the UI. All the DOM manipulation is done in JavaScript so \n            React is very fast but keeps in memory the whole DOM tree. This approach\n            with JavaScript everywhere caused that React start using the JSX (JavaScript XML)\n            syntax to write the UI. Using that approach user can write the HTML code \n            directly in the JavaScript.\n          </p>\n\n          <p>\n            It is the most popular JavaScript framework for building user interfaces.\n            Used by Facebook, Instagram, Microsoft, Netflix, PayPal, and many more.\n            Using React you can start creating Component-Based Applications that \n            could be very fast and scalable. Encapsulated components helps you \n            to organize your code and reuse it. Declarative views helps you to \n            create interactive user interfaces and keeping the state of your application\n            without too much effort. \n          </p>\n\n          <p>\n            React is very popular so it has also many additional libraries and tools\n            that can extend the functionality of your application. Community of React\n            developers is very big and it is very easy to find the best solution for\n            any trouble. Base React library is responsible for the rendering of the\n            view layer. So to create more complex applications you have to find the \n            additional packages that will help you to create the more advanced components.\n          </p>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight';\nimport { withTranslation, WithTranslation } from 'react-i18next'\n\n\ninterface Props {};\ninterface State {};\n\nclass ReactInit extends React.Component<Props & WithTranslation, State> {\n \n  render (): JSX.Element {\n    const { t } = this.props\n    return (\n        <div>\n            <h1>{t(\"page.init.project.header\")}</h1>\n\n            <p>\n                {t(\"page.init.project.content\")}\n            </p>\n\n            <h2>{t(\"page.init.cra.header\")}</h2>\n\n            <p>{t(\"page.init.cra.content\")}</p>\n\n            <Highlight className='bash'>\n                {`npx create-react-app framework-hero`}\n            </Highlight>\n\n            <p>{t(\"page.init.cra.content2\")}</p>\n\n            <ul>\n                <li>{t(\"page.init.cra.section.node\")}</li>\n                <li>{t(\"page.init.cra.section.public\")}</li>\n                <li>{t(\"page.init.cra.section.source\")}</li>\n                <li>{t(\"page.init.cra.section.root\")}</li>\n            </ul>\n\n            <img src='images/view/init_01.png' alt='JavaScript project'/>\n\n            <p>{t(\"page.init.cra.content3\")}</p>\n\n            <h2>{t(\"page.init.craTs.header\")}</h2>\n\n            <p>{t(\"page.init.craTs.content\")}</p>\n\n            <p>{t(\"page.init.craTs.content2\")}</p>\n\n            <p>{t(\"page.init.craTs.content3\")}</p>\n\n            <Highlight className='bash'>\n                {`npx create-react-app framework-hero --template typescript`}\n            </Highlight>\n\n            <p>{t(\"page.init.craTs.content4\")}</p>\n\n            <img src='images/view/init_02.png' alt='TypeScript project'/>\n\n            <h2>{t(\"page.init.run.header\")}</h2>\n\n            <p>{t(\"page.init.run.content\")}</p>\n\n            <Highlight className='bash'>\n                {`npm run start`}\n            </Highlight>\n\n            <h2>{t(\"page.init.other.header\")}</h2>\n\n            <p>{t(\"page.init.other.content\")}</p>\n      \n        </div>\n    );\n  }\n}\nexport default withTranslation()(ReactInit)","import * as React from 'react';\nimport Highlight from 'react-highlight'\nimport { withTranslation, WithTranslation } from 'react-i18next'\n\n\ninterface Props {};\ninterface State {};\n\nclass PropsExample extends React.Component<Props & WithTranslation, State> {\n \n  render () {\n    const { t } = this.props\n    return (\n        <div>\n            <h1>{t(\"page.props.intro.header\")}</h1>\n\n            <p>{t(\"page.props.intro.content\")}</p>\n\n            <h2>{t(\"page.props.internal.header\")}</h2>\n\n            <p>{t(\"page.props.internal.content\")}</p>\n\n            <p>{t(\"page.props.internal.content2\")}</p>\n\n\n            <Highlight className=\"typescript\">\n                {`import React, { useState } from 'react'\n\nconst ExampleComponent:React.FC = () => {\n    const [welcomeMessage, setWelcomeMessage] = useState<string>('State example')\n\n    return (<h1>Hello from {welcomeMessage}</h1>)\n}\nexport default ExampleComponent`}\n            </Highlight>\n\n            <p>{t(\"page.props.internal.content3\")}</p>\n\n            <Highlight className=\"javascript\">\n                {`import React from 'react'\n\nclass ExampleComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            welcomeMessage: 'State example',\n        }\n    }\n\n    render() { return (<h1>Hello from {this.state.welcomeMessage}</h1>) }    \n}\nexport default ExampleComponent`}\n            </Highlight>\n\n            <p>{t(\"page.props.internal.content4\")}</p>\n\n            <Highlight className=\"javascript\">\n                {`import React from 'react'\n\ninterface Props {}\ninterface State {\n    welcomeMessage: string\n}\nclass ExampleComponent extends React.Component<Props, State> {\n    state: State = {\n        welcomeMessage: 'State example'\n    }\n\n    render() { return (<h1>Hello from {this.state.welcomeMessage}</h1>) }    \n}\nexport default ExampleComponent`}\n            </Highlight>\n\n            <h2>{t(\"page.props.methods.header\")}</h2>\n\n            <p>{t(\"page.props.methods.content\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`//ExampleComponent.tsx - typescript example\nconst ExampleComponent:React.FC = () => {\n    const [welcomeMessage, setWelcomeMessage] = useState<string>('State example')\n\n    // Classic function approach\n    function updateMessage(message: string): void {\n        setWelcomeMessage(message)\n    }\n\n    // Anonymous function approach\n    const getPrefixedMessage = ():string => {\n        return \"Example - \" + welcomeMessage;\n    }\n\n    ...\n}`}\n            </Highlight>\n\n            <h2>{t(\"page.props.props.header\")}</h2>\n\n            <p>{t(\"page.props.props.content\")}</p>\n\n            <Highlight className=\"javascript\">\n                {`element = <FunctionComponent framework=\"React child component\" />`}\n            </Highlight>\n\n            <p>{t(\"page.props.props.content2\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`//Basic example\nconst FunctionComponent = (props) => {\n    return <h1>Hello from {props.framework}</h1>;\n}`}</Highlight><Highlight className=\"typescript\">{`//TypeScript example\ninterface MyProps {\n    framework: string\n}\nconst FunctionComponent: React.FC<MyProps> = (props) => {\n    return <h1>Hello from {props.framework}</h1>\n}\n`}</Highlight><Highlight className=\"typescript\">{`//TypeScript example with ES6 property destructuring\ninterface MyProps {\n    framework: string\n}\nconst FunctionComponent: React.FC<MyProps> = ({ framework }) => {\n    return <h1>Hello from {framework}</h1>\n}\n`}\n            </Highlight>\n\n            <p>{t(\"page.props.props.content3\")}</p>\n\n            <Highlight className=\"javascript\">{`class ClassComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        ...\n    }\n    ...\n\n    render() {\n        return <h1>Hello from {this.props.framework}</h1>\n    }\n}`}\n            </Highlight>\n\n            <p>{t(\"page.props.props.content4\")}</p>\n\n            <Highlight className=\"typescript\">{`interface Props {\n    framework: string\n}\ninterface State {}\n\nclass ClassComponent extends React.Component<Props,State> {\n    render(): JSX.Element {\n        return <h1>Hello from {this.props.framework}</h1>\n    }\n}`}\n            </Highlight>\n\n            <h3>{t(\"page.props.props.variables.header\")}</h3>\n\n            <p>{t(\"page.props.props.variables.content\")}</p>\n\n            <Highlight className=\"javascript\">{`const uniqueMessage = {id: 1, content: 'example'}\n...\n<ChildComponent message={uniqueMessage} />`}\n            </Highlight>\n\n            <h2>{t(\"page.props.events.header\")}</h2>\n\n            <p>{t(\"page.props.events.content\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`const ChildComponent = (props) => {\n    const [currentValue, setCurrentValue] = useState(0)\n\n    // (3) When 'currentValue' has been updated invoke props event\n    useEffect(() => {\n        props.increasedEvent(currentValue)\n    }, [currentValue])\n\n    // (2) Handle state change evnet\n    const increaseNumber = () => {\n        setCurrentValue(currentValue + 1)\n    }\n\n    // (1) Click button\n    return <button onClick={() => increaseNumber()}>Increase number</button>\n}`}\n            </Highlight>\n\n            <p>{t(\"page.props.events.content2\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`//TypeScript example\ninterface ChildProps {\n    increasedEvent: (value: number) => void                    \n}\nconst ChildComponent: React.FC<ChildProps> = (props) => {\n    const [currentValue, setCurrentValue] = useState<number>(0)\n\n    useEffect(() => { props.increasedEvent(currentValue) }, [currentValue])\n\n    const increaseNumber = (): void => {\n        setCurrentValue(currentValue + 1)\n    }\n\n    //We can simplify the method handler invocation\n    return <button onClick={increaseNumber}>Increase number</button>\n}`}\n            </Highlight>\n\n            <p>{t(\"page.props.events.content3\")}</p>\n\n            <p>{t(\"page.props.events.content4\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`const ParentComponent = () => {\n    const [counter, setCounter] = useState(0)\n\n    const onIncreased = (value) => {\n        setCounter(value)\n    }\n\n    return (\n        <div>\n            <p>Clicked: {counter} times.</p>\n            <ChildComponent increasedEvent={(event) => onIncreased(event)}/>\n        </div>\n    )\n}`}\n            </Highlight>\n\n           \n            {/* https://youtu.be/CmUQ5C35_Oc?t=484 */}\n        </div>\n    );\n  }\n}\n\nexport default withTranslation()(PropsExample)","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props { };\ninterface State { };\n\nexport default class SlotsExample extends React.Component<Props, State> {\n\n    render() {\n        return (\n            <div>\n                <h1>Content projection</h1>\n\n                <p>\n                    As in other frameworks we are able to pass other components into\n                    the slots of the component. To do that we have to use <code>children</code>\n                    property from the <code>props</code> component object. That will inform\n                    render method to put there the children elements (elements between\n                    <code>Child</code> tag) provided by the parent.\n                </p>\n\n                <h2>React children</h2>\n\n                <Highlight className=\"javascript\">\n                    {`export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <h1>Header of child</h1>\n                <div>{this.props.children}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} `}\n                </Highlight>\n\n                <Highlight className=\"javascript\">\n                    {`export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                    <section>\n                        <h2>Parent section to be displayed</h2>\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                    </section>\n                </Child>\n            </div>\n        )\n    }\n} `}\n                </Highlight>\n\n                <h2>Multiple-slots</h2>\n\n                <p>\n                    React allows us to use multiple slots called \"named children\".\n                    It works very similar like in other frameworks.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`export default Child extends React.Components {\n    render() {\n        return (\n            <div>\n                <div>{this.props.children.header}</div>\n                <div>{this.props.children.default}</div>\n                <footer>Footer of child</footer>\n            </div>\n        )\n    }\n\n} `}\n                </Highlight>\n\n                <Highlight className=\"javascript\">\n                    {`export default Parent extends React.Components {\n    render() {\n        return (\n            <div>\n                <Child>\n                {{\n                    header: <h2>Parent section to be displayed</h2>,\n                    default: <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                }}\n                </Child>\n            </div>\n        )\n    }\n} `}\n                </Highlight>\n\n\n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props {};\ninterface State {};\n\nexport default class Extend extends React.Component<Props, State> {\n \n  render () {\n    return (\n        <div>\n            <h1>Extending the component</h1>\n\n            <p>\n                Authors of the React framework recommend to follow the pattern of \"Composition\n                over Inheritance\" to provide some logic to our components. This is augmented \n                by powerful composition model of React. Based on their experience, they declare \n                that during the creation of Facebook page they haven't found any use case where \n                the component Inheritance will be a good idea. (<a href=\"https://reactjs.org/docs/composition-vs-inheritance.html\">Source</a>).\n            </p>\n\n            <p>\n                Of course it is possible by extending the other React component class. \n                The first one extends the <code>Component</code> class from React core \n                but this component should not have the render method. The child class \n                will inheritance the methods from the parent class but is must have \n                this missing render method. It is more for creating an abstraction layer\n                to your design but it may provide an additional complexity to your code. \n            </p>\n\n            <Highlight className=\"javascript\">\n                {`class ParentAbstractComponent extends React.Component {\n  greet() {\n    console.log('Hello world!')\n  }\n}\n\nclass ChildComponent extends ParentAbstractComponent {\n  render () {\n    return(\n      <div>\n        <button onClick={this.greet.bind(this)}>\n          Say hello\n        </button>\n      </div>\n    )\n  }  \n} `}\n            </Highlight>\n\n            <p>\n                Developer can't \"override\" the render method but he can use <code>props</code> \n                to pass the additional data and change the behavior of the component.\n            </p>\n\n            <h2>High order components HOC</h2>\n\n            <p>\n                For many components that share the similar behavior, it is possible to create a \n                High-Order Component (HOC) to wrap the component and provide additional functionality. \n                HOCs are functions that take a component and return a new component with new features.\n                That common behavior will be defined once and composed into classes that require it.\n            </p>\n\n            <p>\n                This HOC function takes a component class as a parameter and returns a new component class \n                that has a new functionality. It is similar to the \"Decorator\" pattern known from the Object-Oriented Programming.\n                It is advanced technique for reusing component logic that evolved from the React base.\n                Previously to resolve the multi level design problems in the React, the developers\n                used the \"mixins\". \n            </p>\n\n            <Highlight className=\"javascript\">\n                {`const Loader = (promiseProp, Wrapped) => class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {loading: true, error: null, result: null};\n  }\n\n  componentDidMount() {\n      this.props[promiseProp].then(\n          value => this.setState({loading: false, result: value}),\n          error => this.setState({loading: false, error})\n      );\n  }\n\n  render() {\n      if (this.state.loading) {\n          return <p>Loading. Please wait...</p>;\n      } else if (!!this.state.error) {\n          return <p>Error: {this.state.error.message}</p>;\n      } else {\n          return <Wrapped {...this.props} {this.state.result} />;\n      }\n  }\n};\n`}\n            </Highlight>\n\n            <Highlight className=\"javascript\">\n                {`let AsyncWeatherWidget = Loader(\"weather\", Weather);\n  ... \n\n  <AsyncWeatherWidget weather={fetchWeather('/api/krakow.json')}/>\n`}\n            </Highlight>\n\n            <p>\n                HOC Components doesn't modify the input component but it is wrapping it into a \n                new container component. Wrapped component receives all the props from the container\n                with the addition of the result of the promise. \n            </p>\n\n            <p>\n                More detailed information about HOCs can be found in the <a href=\"https://reactjs.org/docs/higher-order-components.html\">official documentation</a>\n                of the React. During the explanation of the HOCs I based on the article from <a href=\"http://natpryce.com/articles/000814.html\">Natpryce.com</a>\n            </p>\n\n        </div>\n    );\n  }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props { };\ninterface State {\n    ren: number[]\n};\n\nexport default class Directives extends React.Component<Props, State> {\n\n    state: State = {\n        ren: [11, 22, 33],\n    }\n\n\n    render() {\n        return (\n            <div>\n                <h1>Directives? What is it?</h1>\n\n                <p>\n                    If you are looking for directives in the React application you may find it difficult.\n                </p>\n\n                <p>\n                    React keep the state of the Virtual DOM so it is responsible for rendering and generating\n                    the DOM elementns. This is the fundamental principle how the React works. There is no\n                    reason to use something you may known from the Angular or Vue.js framework like\n                    directives that are attached to HTML tags because there is no DOM elements where\n                    that directive could be attached. When you are providing a attribute for\n                    your React component it is treated as property that is passed to the component.\n                </p>\n\n                <h2>Dynamic CSS classes</h2>\n\n                <p>\n                    Ok so we know that we do not have any directives available in the React.js framework. But\n                    how to handle the same issues that Angular and Vue.js handle with directives? The answer\n                    is \"use JavaScript\". React take advantage of the JavaScript and we can use it to create\n                    a functions that will provide the expected behavior.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        <div className={\\`selected \\${this.isAdmin() ? \"\" : \"disabled\"}\\`}>\n            Hello User!\n        </div>\n    )\n}`}\n\n                </Highlight>\n\n                <p>\n                    When the state of a component changes, React performs a re-render and in that\n                    moment we pass the respective CSS classes to our div.\n                </p>\n\n                <h2>Dynamic Inline-styling</h2>\n\n                <p>\n                    This time we will also bind the expression to the style attribute. Because\n                    everything in React is an JavaScript we can easily assing specific object to that\n                    attribute using the assignment operator.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`export default InputLabel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputStyles: {\n                color: this.props.disabled ? \"#999\" : \"#000\",\n                font-weight: this.props.required ? \"bold\" : \"normal\"\n            }\n        }\n    }\n                \n    render() {\n        return (\n            <span style={this.state.inputStyles}>Label text</span>\n        )\n    }\n}`}\n\n                </Highlight>\n\n                <p>\n                    In this example depending on the provided properties we can change the style of\n                    the input label. If we pass the required property the \"Label text\" will be\n                    bolded. In inputStyles object we manipulate the CSS selectors and base on the\n                    state of the component we can change them to specific value. In JSX we only need to\n                    bind the style attribute with the reference of that object. We have to remember that\n                    the \"style\" behave like a property in React.js instead of an classic attribute.\n                </p>\n\n                <h2>Conditional rendering</h2>\n\n                <p>\n                    Again we have to use the clear JavaScript to render a specific HTML code but this\n                    time we can use the \"if\" statement. If the condition is true we will render the\n                    <code>span</code> block with the basket size information. Otherwise this block will\n                    return null that will not be rendered.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketItems > 0 && <span>You have {this.state.basketItems} items in your basket.</span>}\n    )\n}`}\n\n                </Highlight>\n\n                <p>\n                    Here we can see that the amount of items in basket is displayed only when there is more than 0 items.\n                </p>\n\n                <p>\n                    In JSX we can use ternary operator to show two code blocks depending on the condition result.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketItems > 0\n            ? <span>You have {this.state.basketItems} items in your basket.</span>\n            : <span>Your basket is empty.</span>\n        }\n    )\n}`}\n\n                </Highlight>\n\n                <h2>Rendering the list</h2>\n\n                <p>\n                    Finally sometimes we need to render a list of items. Again in this case we can't\n                    use directly a \"for\" directive but we can think of it as a JavaScript code and\n                    we can use the \"map\" function to iterate over the list.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketProducts.map((item) => <div>{item.name}</div>)}\n    )\n}`}\n                </Highlight>\n\n                <p>\n                    In this case we want to present the list of orders and each order will be represented by a\n                    <code>div</code> element that innerText will be the name property of the order.\n                </p>\n                <p>\n                    Using map we can return the zero-based index of the item in the list.\n                    So we can get the index of the item variable that we used in the JSX.\n                    To do that we can extract the second argument form map method and then use it as a variable.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketProducts.map((item, i) => <div>{i+1}: {item.name}</div>)}\n    )\n}`}\n                </Highlight>\n\n                <p>\n                    Sometimes we want to render a dynamic list of items that can be changed when the component\n                    receives new data. In this case every change in the data array will cause the whole list to\n                    be re-rendered. To prevent this we can use the key property that is responsible for tracking\n                    changes in the data array. To do that we only have to bind the key attribute with proper value.\n                    In this case we want to use the id of the item as a key.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    return (\n        {this.state.basketProducts.map((item, i) => <div key={item.id}>{i+1}: {item.name}</div>)}\n    )\n}`}\n                </Highlight>\n\n                <p>\n                    In React this list rendering syntax within JSX may be too long and can be hard\n                    to read. So if we want to provide more complex list rendering we can create\n                    a specific function or variable that will be responsible for rendering the list\n                    in a clear way.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`render() {\n    const itemsList = this.state.basketProducts.map((item, i) => \n        <div key={item.id}>{i+1}: {item.name}</div>);\n    return (\n        <header>{itemsList}</header>\n    );\n}`}\n                </Highlight>\n\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport Highlight from 'react-highlight'\n\n\ninterface Props { };\ninterface State { };\n\nexport default class StoreView extends React.Component<Props, State> {\n\n    render() {\n        return (\n            <div>\n                <h1>From Flux to React Redux concept</h1>\n\n                <p>\n                    Developers of the React on the beginning of that framework  presented the concept called \"Flux\".\n                    The idea of Flux was to replace the classic MVC model of designing a applications to provide a\n                    \"Store\" concept that will just hold the application state. Now the Flux is only in maintenance\n                    mode but the more sophisticated alternatives has born and we can use them right now. For this\n                    project I will focus on the Redux example.\n                </p>\n\n                <p>\n                    Redux is a pattern and library for managing and updating application state by using \"actions\". \n                    React Redux is an official React UI binding layer that allows our components to read\n                    data directly from the Redux store. On the other hand we can dispatch actions that\n                    will update the store state. It is very similar concept that is available in Vue.js\n                    library called Vuex.\n                </p>\n\n                <p>\n                    To start working with Redux we must install the <code>redux</code> package. This is nothing\n                    more than executing the following command <code>npx install react-redux</code>. More detailed\n                    information how to do it you can find in the <a href=\"https://redux.js.org/introduction/installation\">official documentation.</a>\n                </p>\n\n                <p>\n                    After installation we can move to attaching this library to our project. React Redux includes\n                    a <code>Provider</code> component that allow us to use the Redux store in our application.\n                    So we just need to create the entry point like in the example below.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`...\nimport { Provider } from 'react-redux';\nimport store from './store';\n...\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n`}\n                </Highlight>\n\n                <h2>Store state and Actions</h2>\n\n                <p>\n                    Basic purpose of the store is to hold the state of the application. After installation\n                    and attaching the library to our project we can create a Redux State Slice that will hold \n                    our basket items. The state slice requires a name that will be unique for this slice. In \n                    the <code>initialState</code> object we can define the initial value and in the <code>reducer</code>\n                    function we can define the logic to change the state. \n                </p>\n\n                \n\n                <Highlight className=\"javascript\">\n                    {`import { createSlice } form '@reduxjs/toolkit';\n\nexport const basket = createSlice({\n    name: 'basket',\n    initialState: {\n        items: [],\n    }\n    reducer: {\n        addItem: (state, action) => {\n            state.items.push(action.payload);\n        }\n    },\n});\nexport const { addItem } = basket.actions;\nexport default basket.reducer;\n`}\n                </Highlight>\n\n                <p>\n                    When our slice is ready we can add it to our Redux store by adding the <code>basketReducer</code>\n                    to the <code>reducers</code> object. \n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`import { configureStore } form '@reduxjs/toolkit';\nimport basketReducer from './features/basket';\n\nexport default configureStore({\n    reducer: {\n        basket: basketReducer,\n    },\n});\n`}\n                </Highlight>\n\n                <p>\n                    Having this Slice configured we can use it in our code. To read data from \n                    store we use this <code>useSelector</code> function that will return the \n                    basket items array. But to add new item to this array we must dispatch an action \n                    using <code>useDispatch()</code> method. In React we can create an additional \n                    constant that will be a shortcut to the <code>Redux</code> objects.\n                </p>\n\n                <Highlight className=\"javascript\">\n                    {`import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addItem } from './features/basket'\n\nexport function BookItem() {\n    const items = useSelector(state => state.basket.items);\n    const dispatch = useDispatch();\n\n    addBook() {\n        dispatch(addItem(new Book()));\n    }\n\n    ...\n}`}\n\n                </Highlight>\n\n                <p>\n                    This is a basic example of Redux. More details can be found in the \n                    <a href=\"https://redux.js.org/tutorials/essentials/part-1-overview-concepts\">official documentation</a>.\n                    Also when I will learn more about Redux I will show you how to use it in React in more detail.\n                    But now it is a simple example how to achieve the same functionality in Redux and Vuex.\n                </p>\n\n\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Highlight from \"react-highlight\";\nimport { useTranslation } from 'react-i18next'\n\nconst Lifecycle: React.FC = () => {\n    const { t } = useTranslation()\n    return (\n        <div>\n            <h1>{t('page.lifecycle.hooks.header')}</h1>\n\n            <p>{t('page.lifecycle.hooks.content')}</p>\n\n            <h2>{t('page.lifecycle.mount.header')}</h2>\n\n            <p>{t('page.lifecycle.mount.content')}</p>\n\n            <p>{t('page.lifecycle.mount.content2')}</p>\n\n            <Highlight className=\"javascript\">\n                {`// Function Component Example\nconst PhotoGallery = () => {\n    ...\n    useEffect(() => {\n        ...\n        setPhotos(receivedPhotos);\n\n    }, []);\n\n    ...\n}`}\n            </Highlight>\n\n            <p>{t('page.lifecycle.mount.content3')}</p>\n\n            \n\n            <Highlight className=\"javascript\">\n                {`// Class Component Example\nclass PhotoGallery extends React.Component {\n    ...\n\n    componentDidMount() {\n        ... \n        this.setState({photos: receivedPhotos});\n    }\n\n    ...\n}`}\n            </Highlight>\n\n            <h2>{t('page.lifecycle.update.header')}</h2>\n\n            <p>{t('page.lifecycle.update.content')}</p>\n\n            <Highlight className=\"javascript\">\n                {`// Function Component Example\nconst PhotoGallery = ({galleryId}) => {\n    ...\n\n    useEffect(() => {\n        // This part is called every time anything in the component is updated\n    })\n\n    useEffect(() => {\n        // This part is called only when the galleryId is changed\n    }, [galleryId])\n\n    ...\n}`}\n            </Highlight>\n\n            <p>{t('page.lifecycle.update.content2')}</p>\n\n            <Highlight className=\"javascript\">\n                {`// Class Component Example\nclass PhotoGallery extends React.Component {\n    ...\n\n    componentDidUpdate(prevProps, prevState) {\n        // This part is called every time anything in the component is updated\n        ... \n        if(this.props.galleryId !== prevProps.galleryId) {\n            // This part is called only when the galleryId is changed\n        }\n    }\n\n    ...\n}`}\n            </Highlight>\n\n            <p>{t('page.lifecycle.update.content3')}</p>\n\n            <h2>{t('page.lifecycle.delete.header')}</h2>\n\n            <p>{t('page.lifecycle.delete.content')}</p>\n\n            <Highlight className=\"javascript\">\n                {`// Class Component Example\nclass PhotoGallery extends React.Component {\n...\n\n    componentWillUnmount() {\n        ... \n        clearInterval(this.state.refreshInterval);\n    }\n\n    ...\n}`}\n            </Highlight>\n\n            <p>{t('page.lifecycle.delete.content2')}</p>\n\n        </div>\n    )\n\n}\n\nexport default Lifecycle;","import * as React from 'react';\nimport Highlight from 'react-highlight'\nimport { withTranslation, WithTranslation } from 'react-i18next'\n\n\ninterface Props {};\ninterface State {};\n\nclass Service extends React.Component<Props & WithTranslation, State> {\n \n  render () {\n    const { t } = this.props\n    return (\n        <div>\n            <h1>{t(\"page.service.provider.header\")}</h1>\n\n            <p>{t(\"page.service.provider.content\")}</p>\n\n            <p>{t(\"page.service.provider.content2\")}</p>\n\n            <p>{t(\"page.service.provider.content3\")}</p>\n\n            <p>{t(\"page.service.provider.content4\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`export interface PhotoGalleryService {\n    getAllGaleries(): Promise<PhotoGallery[]>\n\n    getGalery(id: number): Promise<PhotoGallery>\n\n    createGalery(photos: Photo[]): Promise<PhotoGallery>\n}`}\n            </Highlight>\n\n            <p>{t(\"page.service.provider.content5\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`export default class PhotoGalleryApiProvider implements PhotoGalleryService {\n    getAllGaleries(): Promise<PhotoGallery[]> {\n        return axios.get('/api/v2/gallery')\n    }\n\n    getGalery(id: number): Promise<PhotoGallery> {\n        return axios.get('/api/v2/gallery/{id}')\n    }\n\n    createGalery(photos: Photo[]): Promise<PhotoGallery> {\n        return axios.post('/api/v2/gallery')\n    }\n}`}\n            </Highlight>\n\n            <p>{t(\"page.service.provider.content6\")}</p>\n\n            <p>{t(\"page.service.provider.content7\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`export const PhotoGalleryContext = React.createContext<PhotoGalleryService>(new PhotoGalleryApiProvider())\n...\nconst apiProvider = new PhotoGalleryApiProvider()\nfunction App() {\n    return (\n        <div className=\"App\">\n            <PhotoGalleryContext.Provider value={apiProvider}>\n                <>\n                    ... Other components ...\n                </>\n            </PhotoGalleryContext.Provider>\n        </div>\n    )\n\n}`}\n            </Highlight>\n\n            <p>{t(\"page.service.provider.content8\")}</p>\n\n            <Highlight className=\"typescript\">\n                {`const GalleryView: React.FC = () => {\n    const galleryService = React.useContext(PhotoGalleryContext)\n\n    useEffect(() => {\n        galleryService.getAllGaleries().then(() => {\n            ...\n        })\n    }, [])\n\n    ...\n}`}\n            </Highlight>\n\n            <p>{t(\"page.service.provider.content9\")}</p>            \n        </div>\n    );\n  }\n}\n\nexport default withTranslation()(Service)","import IRoute from \"./interfaces/route\";\nimport Basic from \"./views/Basic\";\nimport Home from \"./views/Home\";\nimport ReactInit from \"./views/Initialization\";\nimport PropsExample from \"./views/Props\";\nimport SlotsExample from \"./views/Slots\";\nimport Extend from \"./views/Extend\";\nimport Directives from \"./views/Directives\";\nimport StoreView from \"./views/StoreView\";\nimport Lifecycle from \"./views/Lifecycle\";\nimport Service from \"./views/Service\";\n\nexport const routes:IRoute[] = [\n    {\n        path: '/',\n        name: \"Home Page\",\n        component: Home,\n        exact: true,\n    },\n    {\n        path: '/project-initialization',\n        name: \"Project Initialization\",\n        component: ReactInit,\n        exact: true,\n    },\n    {\n        path: '/simple-component',\n        name: \"Simple Component\",\n        component: Basic,\n        exact: true,\n    }, {\n        path: '/props-component',\n        name: \"Props Component\",\n        component: PropsExample,\n        exact: true,\n    }, {\n        path: '/lifecycle-component',\n        name: \"Lifecycle Component\",\n        component: Lifecycle,\n        exact: true,\n    },{\n        path: '/slots-component',\n        name: \"Slots Component\",\n        component: SlotsExample,\n        exact: true,\n    }, {\n        path: \"/extend-component\",\n        name: \"Extend Component\",\n        component: Extend,\n        exact: true,\n    }, {\n        path: \"/directives-component\",\n        name: \"Directives Component\",\n        component: Directives,\n        exact: true,\n    }, {\n        path: \"/store-component\",\n        name: \"Store Component\",\n        component: StoreView,\n        exact: true,\n    }, {\n        path: \"/services\",\n        name: \"Services\",\n        component: Service,\n        exact: true\n    }\n\n];\n\nexport default routes;","import React from 'react';\nimport './App.css';\nimport Navbar from './layout/Navbar';\nimport Topbar from './layout/Topbar';\nimport routes from './router';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Navbar></Navbar>\n        <header>\n          <Topbar></Topbar>\n        </header>\n\n        <main>\n          <section>\n            <Switch>\n              {routes.map((route, index) => (\n                <Route\n                  key={index}\n                  path={route.path}\n                  exact={route.exact}\n                  render={(props: RouteComponentProps<any>) => (\n                    <route.component {...props} {...route.props} />\n                  )}\n                />\n              ))}\n            </Switch>\n          </section>\n        </main>\n\n        <footer></footer>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const translations = {\n    page: {\n        init: {\n            header: \"Inicjalizacja projektu\",\n            project: {\n                header: \"Inicjalizacja projektu\",\n                content: \"Podstawą rozpoczęcia pracy z biblioteką React jest dodanie bazowej biblioteki do projektu. W tym celu można skorzystać z różnych narzędzi ułatwiających postawienie pierwszych kroków w tym frameworku. Najbardziej podstawowym narzędziem jest 'Create React App' pozwalającym na wygodnie postawić środowisko do budowania prostej Single Page Application (SPA). Do bardziej rozbudowanych projektów zalecam użycia narzędzi typu Webpack, Rollup czy Vite\"\n            },\n            cra: {\n                header: \"Create React App (CRA) - Przygotowanie projektu\",\n                content: \"Używając narzędzia CRA utworzenie projektu 'framework-hero' wymaga jedynie wykonania poniższej komendy:\",\n                content2: \"Skrytp ten generuje podstawowy projekt SPA oparty o framework React. Wygenerowaną strukturę plików można podzielić na 4 sekecje:\",\n                section: {\n                    node: \"node_modules - Folder zawierający zwenętrzne zależności\",\n                    public: \"public - Folder z zasobami statycznymi (obrazki, czcionki, itd.)\",\n                    source: \"src - Głowny folder zawierający kod aplikacji\",\n                    root: \"Oraz katalog nadrzędny w którym znajduję się plik 'package.json' oraz reszta plików konfiguracyjnych dla środowiska (tsconfig.js, itd.)\"\n                },\n                content3: \"W zależności od wielkości projektu oraz preferencji deweloperów struktura katalgów wewenątrz 'src' może się znacząco różnić. Osobiście polecam zapoznać się z różnymi 'dobrymi praktykami' związanymi z tworzeniem struktry folderów. React nie wymusza stosowania się konkretnej struktury, co może prowadzić do bałaganu lub ograniczeniu możliwości rozszerzania kodu. Dlatego warto jest zachowywć porządek i odpowiednio wydzielać moduły oraz komponenty.\"\n            },\n            craTs: {\n                header: \"Create React App - Typescript\",\n                content: \"Jak już wspomniałem wcześniej, porządek w strukturze plików pozwala łatwiej utrzymywać twój projekt. React domyślnie jest biblioteką JavaScriptową, dzięki czemu łatwiej jest zacząć tworzyć pierwsze aplikacje. Jednak im bardziej projekt rośnie tym więcej pojawia się różnych zależności, które łatwiej jest utrzymać stosując programowanie obiektowe, czy chociaż wymuszając strukturę danych poprzez typowanie oraz interfejsy. Dzięki takiemu zabiegowi można wprowadzać bardziej złożone wzorce projektowe do aplikacji upraszczając przy tym proces tworzenia aplikacji.\",\n                content2: \"TypeScript pozwala na rozszerzenie funkcjonalności języka JavaScript dzięki czemu nasza aplikacja napisana w React jest mniej podatna na głupie błędy wynikające z niedopatrzenia jakiego typu dane otrzymujemy od użytkownika, czy z interfejsu API. Wymaga to od dewelopera większego pilnowania struktury swojego kodu, jednak późniejsze szukanie błędów, czy rozszerzanie funkcjonalności jest znacznie przyjemniejsze.\",\n                content3: \"Dodanie obsługi języka TypeScript jest opcjonalne i może być dodane w dowolnej fazie projektu. Jednakże w przypadku tworzenia takiego projektu od zera wystarczy dodać dotatkowy parametr do skryptu inicjalizującego:\",\n                content4: \"Wygenerowana struktura plików dla projektu TypeScript jest identyczna. Różnicą są rozszerzenia plików oraz plik konfiguracyjny dla obsługi języka 'tsconfig.json'. Docelowo zbudowany projekt jest kompilowany do plików JavaScript tak jak to było w poprzednim przypadku.\"\n            },\n            run: {\n                header: \"CRA - Uruchominie serwera deweloperskiego\",\n                content: \"Korzystając z narzędzia 'Create React App' z automatu dostajemy skonfigurowany serwer deweloperski. Skrypt uruchamiający jest dołączony do pliku 'package.json' dzięki czemu uruchomienie aplikacji i podgląd 'na żywo' można uruchomić jednym poleceniem:\"\n            },\n            other: {\n                header: \"Inne narzędzia\",\n                content: \"Przytoczony powyżej przykład ma za zadanie wprowadzić użytkownika do tworzenia aplikacji React. Jednak środowisko aplikacji webowych jest bardzo dynamiczne i zmienia się bardzo szybko. Bardziej zaawansowanym i uniwersalnym narzędziem pozwalającym na budowanie i tworzenie projektów obecnie jest Webpack. Zadaniem CRA jest szybkie przygotowanie środowiska do pracy nad aplikacją. Moim celem było przybliżenie jedynie jak można zainicjalizować prosty projekt, który będzie tworzony w oparciu o framework React oraz jak to wygląda w zestawieniu z Angularem czy Vue.js\"\n            }\n        },\n        basic: {\n            intro: {\n                header: \"Wprowadzenie do komponentów\",\n                content: \"React jest zbudowany z 'Elementów', które są najmniejszymi budulcami aplikacji. Element może być częścią czegoś większego, co można nazwać „komponentem”. React elementem może być przykładowo paragraf, nagłówek, sekcja czy inny znany znacznik HTMLowy, ale mogą to być również inne obiekty z biblioteki 'React'. Połączone elementy mogą tworzyć bardziej złożone struktury jakim są komponenty, z których później można tworzyć inne większe komponenty, aż po całe strony czy bardziej złożone struktury.\",\n                content2: \"Biblioteka React do wersji 17 używała metody ReactDOM.render() a od wersji 18 ReactDOM.createRoot() aby wyrenderować podany przez nas element do drzewka DOM docelowej strony.\",\n                content3: \"Termin „komponent” jest bardzo często używany obecnie przy tworzeniu stron internetowych. W React jest to obiekt JavaScriptowy zawierający pewien zbiór elementów oraz funkcji, który dodatkowo może przyjmować pewne zwenętrzne właściwości zwracając ostatecznie wyrenderowany ReactElement. Komponent można zdefiniować poprzez rozszerzenie klasy 'React.Component' tworząc w ten sposób 'Komponent Klasowy', lub poprzez utworzenie funkcji która będzie docelowo zwracać ReactElement co nazywane jest 'Komponentem Funkcyjnym'. React wprowadza nowy rodzaj składni JSX (JavaScript XML) pozwalającej na pisanie kodu HTML wewnątrz języka JavaScript.\",\n            },\n            sfc: {\n                header: \"Single File Component (Jeden plik na komponent)\",\n                content: \"W poprzedniej sekcji wspominałem o porządku w strukturze plików, dzięki której łatwiej jest rozszerzać kod naszej aplikacji. W framewokru React jeden komponent powinny być zdefiniowany w pojedynczym pliku '.jsx' lub '.tsx' (dla komponentów napisanych w TypeScript). Nazwy plików zawierających komponenty powinny być pisane według notacji PascalCase.\",\n                classComponent: {\n                    header: \"Komponenty klasowe\",\n                    content: \"Przed wprowadzeniem wersji 16.8 Reacta komponenty klasowe były jedynym sposobem na zarządzaniem stanem czy cyklem życia komponentów. Wcześniej komponenty funkcyjne traktowano jako bezstanowe. Obecnie jednak komponenty klasowe są powoli wypierane z powodu ich złożonej składni, lecz należy wiedzieć jak takie komponenty się tworzy.\",\n                    content2: \"Komponent klasowy jest rodzajem zwykłej klasy JavaScript, która rozszerza klasę 'React.Component'. Każdy komponent musi zwracać ReactElement, więc w tym celu, aby wyrenderować kod HTML należy zdefiniować metodę 'render()', która będzie zwracać strukturę napisaną przy uzyciu składni JSX.\",\n                    content3: \"Komponenty klasowe potrafią zarządzać stanem komponentu, czy mogą implementować własną logikę zdarzeń wywołanych podczas różnych etapów cyklu życia komponentu takie jak 'componentDidMount' itd. Dodatkowo możemy inicjalizować bieżący stan wykorzystując konstruktor.\",\n                    ts: {\n                        header: \"Komponent klasowy - Typescript\",\n                        content: \"Dzięki wprowadzeniu mocnego typowania do Reacta (poprzez używanie TypeScriptu) dużo łatwiej jest zobaczyć jakie właściwości przyjmuje dany komponent, albo jakie właściwości są zdefiniowane w danym komponentcie poprzez wprowadzenie interfejsów. Klasa nadal rozszerza 'React.Component', jednak w tym przypadku należy podać jakiego typu dane wejściowe otrzymuje oraz jake właściwości stanu definiuje nasz komponent.\"\n                    }\n                },\n                functionComponent: {\n                    header: \"Komponenty funkcyjne\",\n                    content: \"Framework React pozwala na definiowanie komponentów za pomocą funkcji. Na dobrą sprawę są to zwykłe funkcje JavaScript, które zwracają React.Element i mogą przyjmować różne właściwości. Od wersji 16.8 biblioteki React te komponenty mogą obsługiwać metody aktualizacji stanu i cyklu życia. Wcześniej służyły one tylko i wyłącznie do celów prezentacyjnych. Obecnie są podstawowymi elementami z których buduje się aplikacje. Są one łatwiejsze do odczytania czy testowania i często zawierają mniej kodu.\",\n                    content2: \"Taki sam komponent można zapisac 'czyściej' stosując składnę ECMA Script 6 (ES6), wykorzystując funkcję anonimową przypisaną do zmiennej.\",\n                    content3: \"Funkcjonalnie powyższy komponent działa tak samo jak komponent klasowy. Najwiekszą różnicą jest uproszczona składnia i pozbycie się wielu niepotrzebnych słów kluczowych takich jak 'this' czy 'props' dzięki czemu kod dużego komponentu jest znacznie bardziej czytelny.\",\n                    ts: {\n                        header: \"Komponent funkcyjny - Typescript\",\n                        content: \"Podczas korzystania z TypeScript przy komponentach funkcyjnych nie musimy dostarczać interfejsu definującego 'State' (stan), dzięki czemu jest mniej kodu do utrzymywania.\"\n                    }\n                }\n            },\n            usage: {\n                header: \"Używanie komponentów\",\n                content: \"Aby wyrenderować utworznony przez nas komponent należy podać jego nazwę w formie tagu elementu JSX.\",\n                content2: \"Ponieważ obecnie przy tworzeniu komponentów React wykorzystuje się komponenty funkcyjne - dalsza część tego przykładu będzie opierać się właśnie z wykorzystaniem tego podejścia.\"\n            }\n        },\n        props: {\n            intro: {\n                header: \"Komponent - właściwości, metody i parametry\",\n                content: \"Komponenty React są obiektami które mogą mieć pewne wewnętrzne właściwości oraz metody. Dodatkowo mogą przyjmować zewnętrzne dane poprzez parametry (eng. 'props'), które wywoływane są podobnie jak atrybuty w elementach HTML.\",\n            },\n            internal: {\n                header: \"Właściwości - dane stanu komponentu\",\n                content: \"Każdy komponent może mieć swoje własne właściwości danych stanu. Dane stanu trzymają wartości zmiennych w pamięci, dzięki czemu możemy zapisywać wartości  komponentu i zapewniać bardziej złożoną logikę biznesową.\",\n                content2: \"Komponenty funkcyjne od wersji 16.8 otrzymały nową metodę 'useState()' pozwalającą na wprowadzenie stanu do tych komponentów. Zmienne w ten sposób zdeklarowane zachowują wszelkie zalety reaktywności komponentu, czyli przypisanie nowej wartości do zmiennej spowoduje przerenderowanie zawartości komponentu, tak żeby bieżąca wartość była widoczna. Poniższy przykład demonstruje jak zdefiniować właściwość 'welcomeMessage' wraz z 'setterem' czyli funkcją pozwalającą na zmianę stanu tej właściwości ('setWelcomeMessage') z wykorzystaniem funkcji 'useState()'. Funkcja ta zwraca tablicę zmiennych [a, b], gdzie 'a' jest reaktywną właściwością, a 'b' jest metodą ustawiającą wartość (wspomniany setter). W dalszej częsci kodu podawana jest wartość początkowa dla tej właściwości jako argument funkcji 'useState()'. Wywołanie zmiennej w kodzie JSX bazuje na wprowadzniu nazwy zmiennej w nawiasy klamrowe '{ }'.  Dzięki temu podczas renderowania zwracany jest nagłówek z treścią 'Hello from State example'. Poniższy przykład przedstawia przykładowy komponent napisany w TypeScript. Wersja JavaScript nie przyjmuje wyrażeń określających typ.\",\n                content3: \"W przypadku komponentów klasowych definiowanie właściwości stanu jest bardziej złożone. Odbywa się ono w trakcie tworzenia obiektu przy wywołaniu konstruktora. Należy zdefiniować obiekt 'state' poprzez dodanie własnych właściwości. Również w tym miejscu definiowane są wartości początkowe. Istotne w tym przypadku jest przekazywanie parametrów 'propsów' do konstruktora i wywołanie metody nadrzędnej z przekazaniem tego argumentu.\",\n                content4: \"Poniżej przedstawiony został komponent klasowy napisany w języku TypeScript:\"\n            },\n            methods: {\n                header: \"Metody\",\n                content: \"W przypadku komponentów funkcyjnych jak i komponentów klasowych definiowanie metod nie wymaga specjalnej składni. Metody w komponentach klasowych wyglądają tak samo jak to ma miejsce w klasycznych klasach JavaScript (przykładem jest wymagana metoda 'render()'), natomiast w przypadku komponentów funkcyjnych można je zdefiniować jako zwykła funkcja lub przypisać funkcję anonimową do zmiennej.\"\n            },\n            props: {\n                header: \"Parametry\",\n                content: \"Parametrami ('props') nazywane są zwenętrzne właściwości komponentu. Pozwalają one przekazywać argumenty z rodzica do komponentu docelowego (nazywanego dzieckiem). W przypadku JSX parametry przekazywane są w formacie atrybutów XML podobnie jak w przypadku zwykłych elementów HTML. Argumenty domyślnie są przekazywane jak typ 'string'.\",\n                content2: \"W przypadku komponentów funkcyjnych wystarczy wskazać parametr na wejściu, aby móc później z niego korzystać w kodzie. Dobrą praktyką jest wykorzystywanie operatora destrukturyzacji (ang. destructuring assignment) w celu wyciągnięcia właściwych nazw parametrów.\",\n                content3: \"Inaczej wygląda to w przypadku komponentów klasowych. W tym przypadku parametry przekazywane są poprzez konstruktor. Ważne jest, aby wywołać konstruktor metody nadrzędnej z wywołaniem otrzymanych argumentów.\",\n                content4: \"Opakowując to przy użyciu TypeScript komponent klasowy nie musimy już wywoływać konstruktora w celu zainicjalizowania parametrów. Dzięki czemu kod może wyglądać w następujący sposób:\",\n                variables: {\n                    header: \"Przekazywanie zmiennych\",\n                    content: \"Parametry mogą przyjmować dowolny typ. Przekazanie innych typów niż 'string' w JSX wymaga wrzucenia w klamry kod JavaScript reprezentujący dany obiekt, lub zmienną.\"\n                }\n            },\n            events: {\n                header: \"Emitowanie zdarzeń\",\n                content: \"W bibliotece React nie ma czegoś takiego jak 'emitowanie zdarzeń'. Tutaj stosowane jest podejście z przekazywaniem własnego argumentu do obsługi zdarzeń (eventHandler) do dziecka poprzez parametry. W komponencie dzieka przy definicji parametrów wejściowych należy również podać te które mają być funkcją zwrotną (ang. callback function). To podejście jest znacząco inne niż w przypadku omawianych frameworków takich jak Angular czy Vue. W uproszczeniu to komponent dziecka wywołuje metodę z parametru, która w komponencie rodzica może być obsłużona.\",\n                content2: \"W momencie kliknięcia na przycisk 'Increase number' (1) przechwytywane jest zdarzenie 'click' poprzez metodę 'onClick', która w momencie wywołania wykonuje wewnętrzną funkcję komponentu 'increaseNumber()'. Wtedy przechwytywane jest zdarzenie (2) mające za zadanie zmianę stanu komponentu i zwiekszenie wartości właściwości 'currentValue' o jeden. Ponieważ przytoczony został przykład z komponentem funkcyjnym należy dodać zaczep (ang. hook) stanu 'useEffect()' nasłuchujący na zmianę wartości właściwości '[currentValue]'. W momencie zmiany wartości tego stanu (3) wywoływana jest funckja zwrotna przekazaną poprzez parametr 'increasedEvent' z bieżącą wartością stanu przekazaną jako argument. Podejście z wykorzystaniem zaczepu 'useEffect()' jest specyficzne dla komponentów funkcyjnych. Gdybyśmy chcieli wywołać parametr 'increasedEvent' wewnątrz metody 'increaseNumber' zaraz po linijce 'setCurrentValue(...)' rodzic otrzymałby poprzednią wartość stanu. Jest to spowodowane tym, że wywołanie settera 'setCurrentValue' jest zdarzeniem asynchronicznym.\",\n                content3: \"W przypadku TypeScript ważne jest odpowiednie zdefiniowanie interfejsu. Parametr 'increasedEvent' jest funkcją anonimową, która przyjmuje argumenty typu 'number'. W powyższym przykładznie uproszczone zostało również wywołanie metody 'increaseNumber' na przycisku. Zabieg ten jest możliwy ponieważ na wywołanie funkcji 'onClick' chcemy również wywołać funckję 'increaseNumber', której parametry wejściowe wzajemnie się pokrywają (lub tak jak w tym przypadku są pomijane).\",\n                content4: \"Komponent rodzica będzie działać na podobnej zasadzie jak w tym momencie pracowaliśmy podczas obsługi zdarzeń wywołanych przez przycisk. W rodzicu również wystarczy, że obsłużymy wywołanie przychodzące z parametru 'increasedEvent'. Tym razem jednak przechwytujemy 'event' wygenerowany przez komponent dziecka i jego wartość przekazujemy do wewnętrznej funckji 'onIncreased'.\"\n\n            }\n            \n            \n\n        },\n        lifecycle: {\n            hooks: {\n                header: \"Cykl życia komponentu - zaczepy\",\n                content: \"Zaczepy cyklu życia komponentów (ang. component lifecycle hooks) to interfejsy pozwalające na napisanie swoich własnych funkcji które wywołają się w określonym momencie życia komponentu. Najczęściej zdarzenia emitowane są podczas tworzenia, modyfikacji, albo tuż przed zniszczeniem komponetu. Wraz z Reactem w wersji 16.8 dodane zostałe zaczepy do komponentów funkcyjnych. Wcześniej ich obłużenie było możliwe jedynie wykorzystując komponenty klasowe.\"\n            },\n            mount: {\n                header: \"Tworzenie\",\n                content: \"Ten zaczep uruchamia się tylko raz podczas inicjalizacji komponentów. Różnica pomiędzy tym zaczepem a wywołaniem procesu inicjalizacji komponentu w konstruktorze jest znacząca, ponieważ funkcja zaczepu wywoływana jest po wyrenderowaniu komponentu. Czyli z poziomu tej funkcji jesteśmy w stanie operować na elementach drzewka DOM. Najczęściej jednak ten zaczep jest przydatny do pobierania początkowych danych z zewnętrznych źródeł i zapisywania ich do właściwości danych stanu.\",\n                content2: \"W komponentach funkcyjnych stosuje się metodę 'useEffect(fn, args)', która przyjmuje dwa argumenty. Pierwszym z nich jest funkcja sprzężenia zwrotnego (fn), wewnątrz której definiujemy co ma się wykonać. Drugi argument (args) określa nasłuchiwanie na zmianę stanu tego komponentu. W przypadku inicjalizacji podawana jest pusta tablica ('[]'). Dzięki temu nie nasłuchujemy na żadnej właściwości, ale i tak raz wywołamy ten zaczep.\",\n                content3: \"Komponenty klasowe mają prostszą składnię ponieważ wystarczy przeciążyć funkcję 'componentDidMount()':\"\n            },\n            update: {\n                header: \"Aktualizacja\",\n                content: \"Zaczep aktualizacji wywoływany jest każdorazowo przy każdej aktualizacji stanu komponentu. Zbyt wiele aktualizacji może powodować problemy z wydajnością. Dlatego bardzo ważne jest, aby używać go ostrożnie. Tak jak w poprzednim przypadku w komponencie funkcyjnym, wywołujemy funkcję zaczepu 'useEffect()'. Tym razem jako drugi argument podawana jest tablica ze zmienną, która ma być obserwowana.\",\n                content2: \"W komponentach klasowych należy zdefiniować metodę o nazwie 'componentDidUpdate'. Metoda ta otrzymuje dwa parametry: poprzednie właściwości i poprzednie właściwości danych stanu. Możemy więc sprawdzić, czy konkretna wartość właściwości lub stanu uległa zmianie i zareagować na to zdarzenie. Na przykład możemy pobrać nową listę zdjęć za każdym razem, gdy zmieni się właściwość GalleryID.\",\n                content3: \"Jak widać metoda useEffect jest prostsza i czyni kod bardziej czytelnym. Ma jednak znaczącą wadę. Używając jej nie jesteśmy w stanie uzyskać dostępu do poprzednich wartości właściwości czy stanu.\"\n\n            },\n            delete: {\n                header: \"Usuwanie\",\n                content: \"Na koniec została metoda wywoływana tuż przed usunięciem lub odmontowaniem komponentu. Tak jak metoda inicjalizująca jest ona wywoływana tylko raz w trakcie życia komponentu. Ten zaczep można wykorzystać w celu wyczyszczenia danych komponentu (interwałów, czy funkcji timeout). W tym celu wykorzystywana jest metoda 'componentWillUnmout()'\",\n                content2: \"Niestety nie jest ona dostępna dla komponentów funkcyjnych.\"\n            }\n        },\n        service: {\n            provider: {\n                header: \"Serwisy i konteksty\",\n                content:\"Wielką zaletą frameworków takich jak React jest możliwość stosowania paradygmatu odwróconego sterowania (ang. Inversion of Control, IoC). W idealnym świecie komponent powinien zajmować się głównie warstwą prezentacji i przedstawiać użytkownikowi końcowemu jedynie stan aplikacji. W tym celu można wyciągać logikę biznesową do zewnętrznych klas, dzięki czemu łatwiej jest zachować porządek w aplikacji zapweniając elastyczność kodu. Klasy mające jasno zdefiniowany cel, zapewniające konkretną logikę można nazwać serwisami. W serwisach można obsługiwać pobieranie danych z zewnętrznego serwera, lub sprawdzać poprawność wporwadzanych danych.\",\n                content2: \"Framework React wprowadza pojęcie 'Kontekstu', dzięki któremu zamiast przekazywać dane z góry w dół poprzez właściwości możemy współdzielić pewne właściwości przez wiele komponentów bez konieczności ich przekazywania z rodzica do dziecka. Kontekst za za zadanie współdzielić pewien zakres danych, który dla wszystkich dzieci na różnym poziomie zagnieżdżenia ma być uznawany za globalny.\",\n                content3: \"Kontekst jest Reactową wersją Angularowych 'Serwisów', z tą różnicą, że są one dołączane do struktury aplikacji poprzez komponenty 'dostawców' (ang. Provider). W Angularze serwisy są dostarczane do komponentów poprzez wstrzykiwanie zależności (ang. Dependency Injection, DI). Dzięki tym technikom kod staje się luźno powiązany i dużo łatwiej jest tworzyć testowalne komponenty co ułatwia znacząco programowanie sterowane testami (ang. test driven development).\",\n                content4: \"Serwisy można spotkać nie tylko w Angularze, ale również w innych językach zorientowanych na programowanie obiektowe. Największy zysk z korzystania z serwisów widać dopiero przy większych aplikacjach, a dodatkowo korzystanie z TypeScriptu znacząco ułatwia dalszy rozwój aplikacji. Używając Reacta pomimo braku 'Serwisów' nic nie stoi na przeszkodzie, żeby taką koncepcję wprowadzić. Serwisem możemy nazwać pewną klasę abstrakcyjną, lub interfejs według, którego możemy tworzyć konkretnych dostawców zapewniających daną funkcjonalność. Kontekst może implementować ten serwis, a w kodzie klienckim możemy do niego przypisać konkretnych dostawców.\",\n                content5: \"Przykładowo powyższy interfejs definiujący 'PhotoGalleryService' okerśla podstawowe metody służące do obsługi logiki biznesowej mającej na celu odczyt oraz tworzenie galerii obrazów.\",\n                content6: \"Klasa dostawcy 'PhotoGalleryApiProvider' jest konkretną implementacją wcześniej zdefiniowanego interfejsu 'PhotoGalleryService'. Dostarcza ona dane poszczególnych galerii poprzez zapytania HTTP wysłane do serwera dostarczającego interfejs REST API. Dzięki temu zabiegowi logika odpowiedzialna za pobieranie danych z zewnętrznego źródła znajduje się w jednym miejscu i nawet jeśli wiele komponentów miałoby korzystać z tych metod to zachowana jest zasada jednej odpowiedzialności (ang. single responsibility principle). Takiego dostawcę łatwo jest później zamockować podczas testów jednostkowych.\",\n                content7: \"Teraz jesteśmy gotowi do utworzenia kontekstu i dodania go do naszej aplikacji. 'PhotoGalleryContext.Provider' przyjmuje parametr 'value' który określa jaki obiekt będzie dostępny dla wszystkich komponentów potomnych.\",\n                content8: \"Aby prawidłowo obsługiwać dostawcę należy w komponencie dziecka skorzystac z funkcji 'React.useContext()' podając jako argument interesujący nas kontekst. Ten komponent w którym sięgamy po kontekst nazywamy konsumentem (ang. consumer).\",\n                content9: \"Teraz dzięki temu zabiegowi nie musimy przekazywać parametrów przez wysztkie komponenty od góry do dołu, ale w odpowiednim momencie możemy je wywołać odwołując się przez zmienną 'galleryService'. W ten sposób dostarczamy logikę biznesową do naszej aplikacji, którą możemy w łatwy sposób zaprezentować użytkownikowi poprzez wartstwę prezentacji.\"\n\n            }\n        }\n    }\n}\n\nexport default translations","const translations = {\n    page: {\n        init: {\n            header: \"Project initialization\",\n            project: {\n                header: \"Project initialization\",\n                content: \"The key to getting started with React library is adding a core package to your project. For this purpose, you can use various tools to help you take your first steps in this framework. The most basic tool is 'Create React App' which allows you to set up an environment easily for building a simple Single Page Application (SPA). For more complex projects, I recommend the use of tools such as Webpack, Rollup or Vite\"\n            },\n            cra: {\n                header: \"Create React App (CRA) - Project creation\",\n                content: \"Using the CRA tool to create project called: 'framework-hero' we only need to execute the following command:\",\n                content2: \"This script generates a basic SPA project based on the React framework. The generated file structure can be divided into 4 sections:\",\n                section: {\n                    node: \"node_modules - directory with external dependencies\",\n                    public: \"public - directory with static assets (pictures, fonts, etc)\",\n                    source: \"src - main directory with source code of the application\",\n                    root: \"And root directory with 'package.json' file and other config files (tsconfig.js, etc.)\"\n                },\n                content3: \"Depending on the size of the project and the preferences of developers, the structure of directories within the 'src' may vary significantly. Personally, I recommend you to familiarize with the various 'good practices' related with creating a good folder structure. React doesn't enforce any particular structure, so it can lead to clutter or limit code extensibility. Therefore, it is worth keeping order and separating modules and components appropriately.\"\n            },\n            craTs: {\n                header: \"Create React App - Typescript\",\n                content: \"As mentioned before, the clean file file structure makes it easier to maintain your project. By default, React is using JavaScript, which makes it easier to get started building your first application. However, the more the project grows, the more complex application is becoming. More easily is to maintain such code using object-oriented programming, or at least forcing the data structure by using typed variables or interfaces. Thanks to this, you can introduce more complex design patterns into the application, that simplify the process of application cration.\",\n                content2: \"TypeScript allows you to extend the functionality of the JavaScript language. Based on that our React application is less prone to errors caused by data-type mismatch and we can more easly handle data we receive from the user or from the API interface. This requires the developer to pay more attention to the structure of his code, but later looking for bugs or extending functionality is much more pleasant.\",\n                content3: \"Adding TypeScript support is optional and can be added at any stage of the project. However, if you are creating such a project from scratch, you just need to add an extra parameter to the initialization script:\",\n                content4: \"The generated file structure for the TypeScript project is identical. The difference is the file extensions and the configuration file for the language support 'tsconfig.json'. Ultimately, the project is compiled into JavaScript files as it was in the previous case.\"\n            },\n            run: {\n                header: \"CRA - Development server\",\n                content: \"Using the 'Create React App' tool, we get a configured development server from the machine. The launch script is attached to the 'package.json' file, based on which the application can be launched and the live preview can be run with one command:\"\n            },\n            other: {\n                header: \"Other tools\",\n                content: \"The example above is intended to introduce the user to creating React applications. However, the web application environment is very dynamic and is changing very quickly. Webpack is now a more advanced and universal tool that allows you to build and create projects. The task of the CRA is to quickly prepare the environment to work on the application. My goal was to present only how to initiate a simple project, which will be created based on the React framework, and how it looks in combination with Angular or Vue.js\"\n            }\n        },\n        basic: {\n            intro: {\n                header: \"Component introduction\",\n                content: \"React is built from 'Elements', which are the smallest building blocks of an application. An element can be part of something larger that can be called a 'component.' For example, a React element can be a paragraph, a header, a section, or any other known HTML tag, but it can also be other objects from the 'React' library. Connected elements can create more complex structures such as components, from which you can later create other larger components, up to whole pages or more complex structures.\",\n                content2: \"The React library used the ReactDOM.render() method up to version 17 and from version 18 ReactDOM.createRoot() to render the element we specified to the DOM tree of the target page.\",\n                content3: \"The term 'component' is used a lot today in web development. In React, it is a JavaScript object containing a certain set of elements and functions, which can additionally take some external properties, returning the eventually rendered ReactElement. A component can be defined by extending the class 'React.Component' thus creating a 'Class Component', or by creating a function that will ultimately return a ReactElement which is called a 'Function Component'. React introduces a new kind of JSX (JavaScript XML) syntax that allows you to write HTML code inside JavaScript.\",\n            },\n            sfc: {\n                header: \"Single File Component\",\n                content: \"In the previous section, I mentioned the order in the file structure, which makes it easier to extend the code of our application. In the React framework, one component should be defined in a single '.jsx' or '.tsx' file (for components written in TypeScript). File names containing components should be written in PascalCase notation.\",\n                classComponent: {\n                    header: \"Class components\",\n                    content: \"Before React 16.8, class components were the only way to manage the state or lifecycle of components. Previously, functional components were considered stateless. Currently, however, class components are slowly being replaced due to their complex syntax, but you should know how to create such components.\",\n                    content2: \"A class component is a kind of regular JavaScript class that extends the 'React.Component' class. Each component must return a ReactElement, so in order to render the HTML code, define the 'render()' method, which will return a structure written using JSX syntax.\",\n                    content3: \"Class components can manage the state of a component, or they can implement their own logic of events fired during various stages of the component life cycle, such as 'componentDidMount' etc. Additionally, we can initialize the current state using a constructor.\",\n                    ts: {\n                        header: \"Class component - Typescript\",\n                        content: \"By introducing strongly typed variables into React (by using TypeScript), it's much easier to see what properties a component takes, or what properties are defined in a component by introducing interfaces. The class still extends 'React.Component', but in this case you need to specify what type of input it receives and what state properties our component defines.\"\n                    }\n                },\n                functionComponent: {\n                    header: \"Functional components\",\n                    content: \"These are regular JavaScript functions that return React.Element and can take a variety of properties. As of React 16.8, these components can support state and lifecycle update methods. Previously, they were used only for presentation purposes. Currently, they are the basic elements of which applications are built. They are easier to read or test, and often contain less code.\",\n                    content2: \"The same component can be written 'cleaner' using the ECMAScript6 (ES6) syntax, using the anonymous function assigned to the variable.\",\n                    content3: \"Baisicly, the above functional component works the same as a class component. The biggest difference is the simplified syntax and getting rid of many unnecessary keywords such as 'this' or 'props' making the code of a large component much more readable.\",\n                    ts: {\n                        header: \"Functional component - Typescript\",\n                        content: \"When using TypeScript with function components, we don't need to provide an interface defining 'State', so there is less code to maintain.\"\n                    }\n                }\n            },\n            usage: {\n                header: \"Component usage\",\n                content: \"In order to render the component we created, its name should be given in the form of a JSX element tag.\",\n                content2: \"Since React components are now based on functional components, the rest of this example will use this approach.\"\n            }\n        },\n        props: {\n            intro: {\n                header: \"Component - state, methods and properties\",\n                content: \"React components are objects that can have certain internal state properties and methods. Additionally, they can accept external data via properties (common name: 'props'), which are invoked similarly to attributes in HTML elements.\",\n            },\n            internal: {\n                header: \"State - component internal properties\",\n                content: \"Each component can have its own state data properties. State data keeps variable values in memory so we can save component values and provide more complex business logic.\",\n                content2: \"Functional components since React version 16.8 have a new 'useState ()' method that allows you to enter the state into these components. Variables thus declared retain all the advantages of component reactivity, i.e. assigning a new value to a variable will re-render the component content so that the current value is visible. To do that we are using the 'useState ()' function. The following example demonstrates how to define the 'welcomeMessage' property. Second argument is the 'setter' that is a function that allows you to change the state of this property ('setWelcomeMessage'). This function returns an array of variables [a, b], where 'a' is a reactive property and 'b' is a method that sets the value (the setter mentioned). Later in the code, the initial value for this property is specified as an argument to the 'useState()' function. Invoking a variable in JSX code is based on entering the variable name in curly braces '{}'. As a result, a header with the text 'Hello from State example' is returned during rendering. The following example shows an example component written in TypeScript. The JavaScript version does not accept type expressions.\",\n                content3: \"For class components, defining state properties is more complex. It takes place while creating the object during calling the constructor. User can define the state object by adding his own properties. Also during the constructor invocation the initial values are defined. The important thing in this case is that we are passing 'props' parameters to the constructor and calling the parent method with this argument.\",\n                content4: \"The following is presented a class component written in TypeScript:\"\n            },\n            methods: {\n                header: \"Methods\",\n                content: \"In the case of functional components as well as class components, defining methods does not require any special syntax. Methods in class components look the same as in classic JavaScript classes (an example is the required 'render ()' method), while for functional components they can be defined as a regular function or assigned an anonymous function to a variable.\"\n            },\n            props: {\n                header: \"Properties\",\n                content: \"Properties ('props') are called the external properties of a component. They allow arguments to be passed from the parent to the target component (called a child). In the case of JSX, the parameters are passed like the XML attribute very similar to regular HTML elements. By default, the arguments are passed as the type 'string'.\",\n                content2: \"In the case of functional components, it is enough to provide a argument in the parametrer to be able to use it later in the code. It is good practice to use the destructuring assignment operator to extract the correct parameter names.\",\n                content3: \"This is not the case for class components. In this case, the parameters are passed through the constructor. It is important to call the constructor of the parent method with the arguments received.\",\n                content4: \"By wrapping it up with TypeScript, we no longer need to call the constructor to initialize the parameters. So the code can look like this:\",\n                variables: {\n                    header: \"Passing variables\",\n                    content: \"Properties can be anything. Passing other types than 'string' in JSX requires throwing the JavaScript code representing the object or variable into the braces.\"\n                }\n            },\n            events: {\n                header: \"Event emitting\",\n                content: \"There is no such thing as 'emitting events' in the React library. Here, the approach is to pass your own argument to handle events (eventHandler) to the child through parameters. When defining the input parameters, in the child component, you should also specify those that are going to be a callback functions. This approach is significantly different than in the case of discussed frameworks such as Angular or Vue. In simple terms, it is the child component that calls the method from the parameter that can be handled in the parent component.\",\n                content2: \"When clicking on the 'Increase number' button (1), the 'click' event is caught by the 'onClick' method, which executes the internal function of the 'increaseNumber ()' component at the time of calling. Then the event (2) is caught, which is to change the state of the component and increase the value of the 'currentValue' property by one. As an example with a function component is given, you should add a 'useEffect ()' state hook that listens for a change in the value of the '[currentValue]' property. When the value of this state is changed (3), the return function passed through the 'increasedEvent' parameter is called with the current state value passed as an argument. The 'useEffect ()' hook approach is specific to function components. If we wanted to call the 'increasedEvent' parameter inside the 'increaseNumber' method right after the 'setCurrentValue (...)' line, the parent would get the previous state value. This is because calling setter 'setCurrentValue' is an asynchronous event.\",\n                content3: \"In the case of TypeScript, it is important to properly define the interface. The 'increasedEvent' parameter is an anonymous function that takes arguments of the type 'number'. In the above example, calling the 'increaseNumber' method on the button has also been simplified. This procedure is possible because when calling the 'onClick' function we also want to call the 'increaseNumber' function, the input parameters of which overlap (or, as in this case, they are omitted).\",\n                content4: \"The parent component will work in a similar way as we worked at this point in handling button events. In the parent, it is also enough to handle the call coming from the 'increasedEvent' parameter. This time, however, we capture the 'event' generated by the child's component and pass its value to the internal 'onIncreased' function.\"\n            }\n        },\n        lifecycle: {\n            hooks: {\n                header: \"Component lifecycle hooks\",\n                content: \"Component lifecycle hooks are interfaces that allow you to write your own functions that will be called at a certain point in the life of a component. Most often, events are emitted while creating, modifying, or just before destroying a component. With React 16.8, hooks have been added to functional components. Previously, debiting them was possible only by using class components.\"\n            },\n            mount: {\n                header: \"Creation\",\n                content: \"This hook only fires once during component initialization. The difference between this hook and the component initialization process call in the constructor is significant because the hook function is called after the component is rendered. So from the level of this function we are able to operate on the elements of the DOM tree. Most often, however, this hook is useful for retrieving initial data from external sources and writing it to state data properties.\",\n                content2: \"Function components use the 'useEffect (fn, args)' method that takes two arguments. The first is the callback function (fn), inside which we define what is to be performed. The second argument (args) is to listen for this component's state change. An empty array ('[]') is given when initializing. Thanks to this, we are not listening for any property, but we will trigger this hook once.\",\n                content3: \"Class components have a simpler syntax because you just need to override the 'componentDidMount ()' function:\"\n            },\n            update: {\n                header: \"Update\",\n                content: \"The update hook is triggered each time the component status is updated. Too many updates can cause performance issues. Therefore, it is very important to use it carefully. As in the previous case in the function component, we call the hook function 'useEffect ()'. This time the table with the variable to be monitored is given as the second argument.\",\n                content2: \"In class components, you must define a method named 'componentDidUpdate'. This method receives two parameters: the previous properties and the previous state data properties. So we can check if a specific property or state value has changed and react to that event. For example, we can retrieve a new photo list every time the GalleryID property changes.\",\n                content3: \"As you can see, the useEffect method is simpler and makes the code more readable. However, it has a significant drawback. Using it, we are not able to access the previous property or state values.\"\n\n            },\n            delete: {\n                header: \"Deletion\",\n                content: \"Finally, this method is called just before removing or unmounting a component. Like an initialization method, it is only called once during the lifetime of a component. This hook can be used to clear component data (intervals or timeout functions). The 'componentWillUnmout ()' method is used for this purpose.\",\n                content2: \"Unfortunately, it is not available for functional components.\"\n            }\n        },\n        service: {\n            provider: {\n                header: \"Service and context\",\n                content:\"The great advantage of frameworks such as React is the ability to use the Inversion of Control (IoC) paradigm. In an ideal world, a component should mainly deal with the presentation layer and only present the state of the application to the end user. For this purpose, business logic can be pulled into external classes, which makes it easier to keep the application organized while providing code flexibility. Classes with a clearly defined purpose and providing specific logic can be called services. The websites can handle data download from an external server or check the correctness of imported data.\",\n                content2: \"The React framework introduces the concept of 'Context', so that instead of passing data from the top down through properties, we can share certain properties across multiple components without having to pass them from parent to child. The context is designed to share a certain range of data that is to be considered global for all children at different levels of nesting.\",\n                content3: \"Context is a React version of Angular 'Service', with the difference that they are attached to the application structure via Provider components. In Angular, services are attached to components by Dependency Injection (DI) mechanism. Thanks to these techniques, the code becomes loosely coupled and it is much easier to create testable components, which significantly facilitates test-driven development.\",\n                content4: \"Services can be found not only in Angular, but also in other object-oriented programming languages. The greatest advantage from using services is visible with larger applications, and additionally, with the use of TypeScript that significantly facilitates the further development of the application. Using React, despite the lack of 'Services', nothing stands in the way of introducing such a concept. We can call a service a certain abstract class, or an interface according to which we can create specific provider that provide a given functionality. Context can implement this service, and in the client code we can assign specific providers to it.\",\n                content5: \"For example, the above interface defining 'PhotoGalleryService' defines the basic methods for handling business logic for reading and creating an image gallery.\",\n                content6: \"The provider class 'PhotoGalleryApiProvider' is a concrete implementation of the previously defined 'PhotoGalleryService' interface. It provides the data of individual galleries through HTTP requests sent to the server  REST API interface. Thanks to this, the logic responsible for collecting data from an external source is in one place and even if many components were to use these methods, and the single responsibility principle is maintained. Such a provider is easy to mock later during unit testing.\",\n                content7: \"Now we are ready to create the context and add it to our application. 'PhotoGalleryContext.Provider' takes a 'value' parameter which specifies what object will be available to all child components.\",\n                content8: \"To properly handle the provider, use the 'React.useContext()' function in the child component, giving the context of interest as an argument. This component in which we reach for the context is called the 'consumer'.\",\n                content9: \"Now, we do not have to pass parameters through all components from top to bottom, but at the right component we can call context variables by referring to the 'galleryService'. In this way, we provide business logic to our application, which we can easily present to the user through the presentation value.\"\n            }\n        }\n    }\n}\n\nexport default translations","import i18n from 'i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next'\nimport translationsPL from './locales/pl/translations'\nimport translationsEN from './locales/en/translations'\n\ni18n\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: 'pl',\n        resources: {\n            en: { translation: translationsEN },\n            pl: { translation: translationsPL }\n        }\n    })\n\nexport default i18n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-highlight/node_modules/highlight.js/styles/atom-one-dark.css'\n\nimport './i18n'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}