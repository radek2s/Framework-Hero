(function(e){function t(t){for(var o,c,s=t[0],r=t[1],l=t[2],h=0,p=[];h<s.length;h++)c=s[h],Object.prototype.hasOwnProperty.call(a,c)&&a[c]&&p.push(a[c][0]),a[c]=0;for(o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);d&&d(t);while(p.length)p.shift()();return i.push.apply(i,l||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],o=!0,s=1;s<n.length;s++){var r=n[s];0!==a[r]&&(o=!1)}o&&(i.splice(t--,1),e=c(c.s=n[0]))}return e}var o={},a={app:0},i=[];function c(t){if(o[t])return o[t].exports;var n=o[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.m=e,c.c=o,c.d=function(e,t,n){c.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},c.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,t){if(1&t&&(e=c(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)c.d(n,o,function(t){return e[t]}.bind(null,o));return n},c.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return c.d(t,"a",t),t},c.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},c.p="";var s=window["webpackJsonp"]=window["webpackJsonp"]||[],r=s.push.bind(s);s.push=t,s=s.slice();for(var l=0;l<s.length;l++)t(s[l]);var d=r;i.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("cd49")},"0c7e":function(e,t,n){"use strict";n("dd2c")},"16ee":function(e,t,n){"use strict";n("d9bf")},4130:function(e,t,n){},"854d":function(e,t,n){"use strict";n("4130")},cd49:function(e,t,n){"use strict";n.r(t);n("e260"),n("e6cf"),n("cca6"),n("a79d");var o=n("7a23"),a=Object(o["f"])("footer",null,null,-1);function i(e,t,n,i,c,s){var r=Object(o["u"])("Navbar"),l=Object(o["u"])("Topbar"),d=Object(o["u"])("router-view");return Object(o["o"])(),Object(o["c"])("div",null,[Object(o["f"])(r),Object(o["f"])("header",null,[Object(o["f"])(l)]),Object(o["f"])("main",null,[Object(o["f"])("section",null,[Object(o["f"])(d)])]),a])}var c=Object(o["y"])("data-v-4a615a08");Object(o["r"])("data-v-4a615a08");var s=Object(o["e"])("Home"),r=Object(o["e"])("Project initialization"),l=Object(o["e"])("Component Example"),d=Object(o["e"])("Component Parameters"),h=Object(o["e"])("Component Projection"),p=Object(o["e"])("Extending components"),u=Object(o["e"])("Service"),m=Object(o["e"])("Directives"),b=Object(o["e"])("Store concept");Object(o["p"])();var f=c((function(e,t,n,a,i,f){var v=Object(o["u"])("router-link");return Object(o["o"])(),Object(o["c"])("nav",null,[Object(o["f"])("div",null,[Object(o["f"])("ul",null,[Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/"},{default:c((function(){return[s]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/project-initialization"},{default:c((function(){return[r]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/simple-component"},{default:c((function(){return[l]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/props-component"},{default:c((function(){return[d]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/slots-component"},{default:c((function(){return[h]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/extend-component"},{default:c((function(){return[p]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/services-component"},{default:c((function(){return[u]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/directives-component"},{default:c((function(){return[m]})),_:1})]),Object(o["f"])("li",null,[Object(o["f"])(v,{to:"/store-component"},{default:c((function(){return[b]})),_:1})])])])])})),v=Object(o["g"])({name:"Navbar"}),w=(n("854d"),n("d959")),j=n.n(w);const g=j()(v,[["render",f],["__scopeId","data-v-4a615a08"]]);var O=g,y=Object(o["y"])("data-v-38afbf9e");Object(o["r"])("data-v-38afbf9e");var x={class:"topbar"},V=Object(o["f"])("h1",null,"Vue.js Page",-1);Object(o["p"])();var k=y((function(e,t,n,a,i,c){return Object(o["o"])(),Object(o["c"])("div",x,[V])})),T=Object(o["g"])({name:"Topbar"});n("16ee");const S=j()(T,[["render",k],["__scopeId","data-v-38afbf9e"]]);var I=S,C=Object(o["g"])({name:"FrameworkHero",components:{Navbar:O,Topbar:I}});n("0c7e");const M=j()(C,[["render",i]]);var P=M,B=n("6c02"),W=Object(o["f"])("h1",null,"Some words about Vue.js",-1),L=Object(o["f"])("p",null," Vue.js is an open-source JavaScript framework for building user interfaces and single-page applications. Author of Vue.js is Evan You that is also the main maintainer. It was released in February 2014 so that is the youngest framework from the comparing ones. One of the most popular versions of Vue.js in 2021 is Vue.js 2.0 but in 2020 Vue.js 3.0 has been released and many developers are moving to it. ",-1),H=Object(o["f"])("p",null," Main goal of Vue.js is to make it easy to create user interfaces by incrementally adding features. It provides very adaptable architecture and it is easy to extend it by composiong the components. Components are a way to build reusable, encapsulated, and composable elements of a web application. Components generally gets an input, and changes behavior depending on that changes. Internal methods are used to change the state of the component that can be observed for example as a change in the DOM. Main library of Vue.js is responsible only for the view layer but it has a lot of officially supported libraries and packages. It is like the React, every dependency must be installed separately. So to provide a routing within the application, developer must install external library called Vue Router. It also extending the HTML pages so to build an project with Vue.js it is necessary to install Vue CLI. ",-1);function A(e,t,n,a,i,c){return Object(o["o"])(),Object(o["c"])("div",null,[W,L,H])}var D=Object(o["g"])({name:"Home"});const _=j()(D,[["render",A]]);var q=_,F=Object(o["d"])('<h1>Project initialization</h1><p> Vue.js is a standalone library that contains the core elements required to start building the user interface directly from the HTML page. There is another project called <code>@vue/cli</code> that provides a full system that alow developert rapidly build and deploy applications. It ensure various build tools that can be easily tweaked to match the needs of programmer. The CLI (Command Line Interface) is a tool that allows you to run commands to create a new project or to run the development server. </p><h2>Installing the Vue.js CLI</h2><p> Vue CLI requires <a href="https://nodejs.org/en/">Node.js</a> with version 8.9 or above. Installing the CLI is as simple as running the following command: </p><code>npm install -g @vue/cli</code><p> That will install Vue CLI globaly to the Operating System. To verify if it has been installed correctly, run the following command: <code>vue --version</code></p><h2>Project generation</h2><p> When the tool has been installed now you can create a new project by running the following command: </p><code>vue create framework-hero</code><p> Now the project creator will be asking user to decide how the project should looks like and what dependencies it should use. </p><h2>Running the development server</h2><p> Finally when we have project created we can run the development server to instant prototyping the application. In the main project folder we can run the following command: </p><code>vue serve --open</code>',13);function E(e,t,n,a,i,c){return Object(o["o"])(),Object(o["c"])("div",null,[F])}var N=Object(o["g"])({name:"Project"});const z=j()(N,[["render",E]]);var J=z,$=Object(o["f"])("h1",null,"Component Introduction",-1),R=Object(o["f"])("p",null,[Object(o["f"])("span",{class:"quote"},' "Vue is designed from the ground up to be incrementally adoptable". '),Object(o["f"])("span",{class:"quote--author"},[Object(o["f"])("a",{href:"https://vuejs.org/v2/guide/"},"Vue.js Guide.")]),Object(o["e"])(" As the author of the Vue.js framework guide mentions, Vue goal is to provide a simple, flexible and easy to maintain framework. It is mostly powerful for building single page applications and is open to cooperate with other libraries. ")],-1),U=Object(o["f"])("p",null," Vue.js is very similar to React.js in terms of the way it render data on the screen. But it is also share the same approach with template section that is available in Angular. So to create a web application we will start from creating a component that define a custom elements that can be reused. Like in React this framework use JavaScript to render the data by a virtual DOM. Every data and the DOM elements are reactive and is an Vue.js instance. The app is attached to single DOM element on the page and rest is done by scripts. ",-1),Y=Object(o["f"])("p",null,[Object(o["e"])(' Creation of a component is not such a simple task. Why? Because we can do it in a many ways. For the begining we will attach the Vue.js component into the existing HTML page. To do that we will use the "vue.js" library added to the HTML by '),Object(o["f"])("code",null,"<script>"),Object(o["e"])(" tag. Vue.js component is a JavaScript function that could be called inside the HTML file. ")],-1),G=Object(o["f"])("label",null,"index.html",-1),K=Object(o["f"])("p",null,[Object(o["e"])(" When the new Vue instance is called it search for element with ID provided in "),Object(o["f"])("code",null,"el"),Object(o["e"])(" parameter. In this case we will use "),Object(o["f"])("code",null,"#vue_custom_application"),Object(o["e"])(". That is the declarative rendering example. The template of that application is also defined inside clear HTML file but it also could be a part of the component. ")],-1),Q=Object(o["f"])("h2",null,"Single File Component",-1),X=Object(o["f"])("p",null,[Object(o["e"])(" Vue.js is a very flexible framework that can be used for small projects but could be also a base for the bigger projects. So to maintain the code base we can create a "),Object(o["f"])("code",null,"*.vue"),Object(o["e"])(" files that define specific Vue.js components. This approach require a build tool like Webpack that will compile the code and prepare standalone application. ")],-1),Z=Object(o["f"])("label",null,"SingleComponentSelector.vue",-1),ee=Object(o["d"])("<p> Each Single File Component is a combination of template, script and style sections. As I mentioned before Vue.js is a very flexible framework so you can use different languages for each of this section. For purpouse of this project I will use default JavaScript to compare it with the Angular and React.js approach. </p><ul><li><code>template</code> - defines the HTML template that will be rendered </li><li><code>script</code> - defines the JavaScript or other language Vue component that can contain data, methods and many more things to provide some specific functionality. </li><li><code>style</code> - that defines the CSS definitions for the Vue components or just for a single component if it is <code>scoped</code>. </li></ul><h2>Basic Vue.js Component</h2><p> For smaller projects you will see the approach with components defined inside JavaScript files. Component defined with <code>Vue.component()</code> method has its own tag that is used to place that component on the page. Then the framework will create a new instance of that component. </p><label>component.js</label>",5),te=Object(o["f"])("h2",null,"Component usage",-1),ne=Object(o["f"])("p",null,"To use that component defined before we have to use its tag inside Vue instance.",-1),oe=Object(o["f"])("label",null,"index.html",-1),ae=Object(o["d"])("<p> The <code>basic-component</code> component was globaly registered to Vue instance. That components could be reused in other places. </p><h2>Root Component</h2><p> When project is bigger and use <code>vue-cli</code> to create a Vue.js instance we need a root component that will be the entry point of the application. Single File Components require that definition to be able to provide specific import and export mechanism. Inside <code>public/index.html</code> we can find the <code>&lt;div id=&quot;app&quot;&gt;</code> tag that will be used to render the root component defined in <code>App.vue</code>. But the <code>main.js</code> file will contain the the JavaScript initialization code that is loaded by the index page and attaching that <code>App</code> component to that <code>div</code> with this <code>#app</code> ID. </p>",3);function ie(e,t,n,a,i,c){var s=Object(o["u"])("highlightjs");return Object(o["o"])(),Object(o["c"])("div",null,[$,R,U,Y,G,Object(o["f"])(s,{language:"html",code:e.code0},null,8,["code"]),K,Q,X,Z,Object(o["f"])(s,{language:"vue",code:e.code1},null,8,["code"]),ee,Object(o["f"])(s,{language:"javascript",code:e.code2js},null,8,["code"]),te,ne,oe,Object(o["f"])(s,{language:"html",code:e.code2html},null,8,["code"]),ae])}var ce=n("b056"),se=Object(o["g"])({name:"Basic",props:{framework:String},components:{highlightjs:ce["a"].component},data:function(){return{code0:'<html>\n  <head> \n    <title>Vue.js embedded</title>\n    <script type="text/javascript" src="js/vue.js"><script> \n  </head>\n\n  <body>\n        \n    <div id="vue_custom_application">\n      <h1>Welcome in Vue.js!</h1>\n    </div>\n\n    <script>\n      var vm = new Vue({\n        el: "#vue_custom_application",\n      });\n    <script>\n\n  </body>\n</html>',code1:'<template>\n<h1>Hello from Vue.js SFC</h1>\n</template>\n<script>\nexport default {\n  name: "SingleComponentSelector",\n};\n<script>\n<style>\nh1 {\n  font-weight: bold;\n}\n</style>\n    ',code2html:'<html>\n  <head>\n    <title>Vue.js component</title>\n    <script type="text/javascript" src="js/vue.js"><script>\n  </head>\n\n  <body>\n    <h2>Vue component</h2>\n    <div id="vue_main">\n      <basic-component></basic-component>\n    </div>\n  </body>\n  <script type="text/javascript" src="js/component.js"><script>\n\n</html>',code2js:"Vue.component('basic-component', {\n  template: '<h1>Hello from Vue.js component</h1>',\n});\n\nvar vm = new Vue({\n  el: '#vue_main'\n});\n"}}});const re=j()(se,[["render",ie]]);var le=re,de=Object(o["f"])("h1",null,"Component data, methods and properties",-1),he=Object(o["f"])("p",null," All data within a Vue.js component use reactive data structures. Values and DOM element are linked into the Obervable variables due to that while we will be updatating the value of the variable, we will also be updating the DOM element accordingly. ",-1),pe=Object(o["f"])("h2",null,"Component internal data",-1),ue=Object(o["f"])("p",null,[Object(o["e"])(' Vue component could be treated as an kind of object that has properties and methods. When in Json object notation we create a property we use ":" (colon) to separate the property name from the value. The similar approach is used in Vue.js components. There are a few properties that are responsible for the component\'s behavior. One of them is the '),Object(o["f"])("code",null,"data"),Object(o["e"])(" method. This is responsible for storing the component's data. It should be an function that returns an other objects like in the basic example below. ")],-1),me=Object(o["f"])("label",null,"index.html",-1),be=Object(o["f"])("label",null,"main.js",-1),fe=Object(o["d"])('<p> Now using interpolation experssion in HTML template we can access the data stored in the component&#39;s data and replace that <code>welcomeMessage</code> with the value of that variable. When we use <code>{{ }}</code> (double curly braces) we are using interpolation expression. Specific values are initialized inside that <code>data</code> method and what is important is that that all that variables are an instances of Obervable class. </p><p> That vue.js object has its own lifecycle hooks methods. That allows user to initialize the component&#39;s data later when the component is created or mounted. One of them is the <code>mounted()</code> hook. This is called when the component is attached to the page and rendered the template. More about that is available on the <a href="https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram">Vue.js documentation</a>. </p><h2>Passing properties</h2><p> How to build a application without component interaction? Fortunately Vue.js provides a way to pass properties to the component. Very similar to the way we define data inside component we are defining a properties that are passed to the component. To do that we will use <code>props: [...]</code> property. In a basic example it is a property that has an array of strings. Each of those strings is a property name that could be passed into the component. But there is also a way to define a properties as an object. In that case we have to define the property name as a key and the type of that property as a value. </p><label>Props.vue</label>',5),ve=Object(o["f"])("p",null," Because attributes names in HTML are case-insensitive it doesn't matter if we use in our template camleCased prop names or kebab-cased equivalents. Browser will recognize then and render the correct value. ",-1),we=Object(o["f"])("label",null,"Parent.vue",-1),je=Object(o["d"])("<p> While using the approach with Single File Components we can import and export the components. To use a child component in the parent we have to import it from the origin place and add register that component in the <code>components: {...}</code> property of Parent. Now we can use this props to pass the string value to the child component. </p><h3> Passing Variables </h3><p> Regarding passing a Static variables we can pass a value that could be any type of data. To inform the Vue instance that we want to pass a variable as a value of property we have to use the <code>v-bind</code> directive. Directives are powerful special attributes provided by Vue.js that allow us perform reactive behavior on the DOM. Every Vue.js directive is prefixed with <code>v-</code>. In the example below we are passing a variable as a value of property using <code>v-bind:welcomeMessage</code>. </p><label>Parent.vue</label>",4),ge=Object(o["d"])("<p> Some of the Vue.js directives has a shorthand version. In that case we can use just<code>:</code> (colon) to indicate that we want to pass a variable as a value of property (<code>:welcomeMessage</code>, so we reduced the <code>v-bind</code> text). We have to remember that we should not change the recived value from parent inside the child component. </p><h2> Emmiting Events </h2><p> Communication from child to parent is much easier than providing a props into the component. That works on the same principle like in many other frameworks. We can emit an event from the child to the parent that could handle that action. To emit a such event we neet to use the <code>$emit()</code> method from core Vue.js instance. As the argument we pass the name of the event and the data that will be transfered. Now only the parent have to listen for that event and handle it. To do that we have to use the <code>v-on</code> directive on a specific event name for that component. For that directive there is also a shorthand version so v-on: can be replaced by <code>@</code> (at) sign. </p><label>SingleEmit.vue</label>",4),Oe=Object(o["f"])("p",null,[Object(o["e"])(" The thing that we can see is the new property for our Vue.js component. It is the "),Object(o["f"])("code",null,"methods"),Object(o["e"])(" property. This property is an object that contains all the methods that could be used by the component. In child component we have a method called "),Object(o["f"])("code",null,"increaseNumber()"),Object(o["e"])(" that is responsible for increasing the value of counter inside the child component and the result is emitted to the parent component as an "),Object(o["f"])("b",null,"'increased-event'"),Object(o["e"])(" event. ")],-1),ye=Object(o["f"])("label",null,"Parent.vue",-1),xe=Object(o["f"])("p",null,[Object(o["e"])(" Parent component is listening for the event and when it is emitted it will call the method "),Object(o["f"])("code",null,"onIncreased()"),Object(o["e"])(" that receives the data that was emitted. Recived value is saved to the "),Object(o["f"])("code",null,"counter"),Object(o["e"])(" variable inside the parent component and when it is updated the HTML code is immediately updated. ")],-1);function Ve(e,t,n,a,i,c){var s=Object(o["u"])("highlightjs");return Object(o["o"])(),Object(o["c"])("div",null,[de,he,pe,ue,me,Object(o["f"])(s,{language:"html",code:e.code0html},null,8,["code"]),be,Object(o["f"])(s,{language:"javascript",code:e.code0js},null,8,["code"]),fe,Object(o["f"])(s,{language:"vue",code:e.code1vue},null,8,["code"]),ve,we,Object(o["f"])(s,{language:"vue",code:e.code1parent},null,8,["code"]),je,Object(o["f"])(s,{language:"vue",code:e.code2parent},null,8,["code"]),ge,Object(o["f"])(s,{language:"vue",code:e.code3child},null,8,["code"]),Oe,ye,Object(o["f"])(s,{language:"vue",code:e.code3parent},null,8,["code"]),xe])}var ke=Object(o["g"])({name:"Props",components:{highlightjs:ce["a"].component},data:function(){return{code0html:'<html>\n    <head>\n        <title>Vue.js props</title>\n        <script type="text/javascript" src="js/vue.js"><script>\n    </head>\n\n    <body>\n    <div id="app">\n        <h1>Hello from {{welcomeMessage}}</h1>\n    </div>\n    <script type="text/javascript" src="js/main.js"><script>\n</body>',code0js:"var app = new Vue({\n    el: '#app',\n    data() {\n        return {\n            welcomeMessage: 'Vue.js property!',\n        }\n    },\n})",code1vue:"<template>\n    <h1>Hello from {{welcomeMessage}}</h1>\n</template>\n<script>\nexport default {\n    props: ['welcomeMessage'],\n}\n<script>\n<style>\n</style>\n",code1parent:'<template>\n    <props welcome-message="Vue.js child component"></props>\n</template>\n<script>\nimport Props from "./Props.vue";\nexport default {\n    components: {\n        Props,\n    },\n}\n<script>\n',code2parent:'<template>\n    <props v-bind:welcomeMessage="framework"></props>\n</template>\n<script>\nimport Props from "./Props.vue";\nexport default {\n    components: {\n        Props,\n    },\n    data() {\n        return {\n            framework: \'Vue.js\',\n        }\n    }\n}\n<script>\n',code3child:"<template>\n    <button @click=\"increaseNumber()\">Increase number</button>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            currentValue: 0,\n        }\n    },\n    methods: {\n        increaseNumber() {\n            this.currentValue++;\n            this.$emit('increased-event', this.currentValue);\n        },\n    },\n}\n<script>\n<style>\n</style>\n",code3parent:'<template>\n<div>\n    <p>Clicked: {{counter}} times.</p>\n    <single-emit v-on:increased-event="onIncreased"></single-emit>\n</div>\n</template>\n<script>\nimport SingleEmit from "./SingleEmit.vue";\nexport default {\n    components: {\n        SingleEmit,\n    },\n    data() {\n        return {\n            counter: 0,\n        }\n    },\n    methods: {\n        onIncreased(value) {\n            this.counter = value;\n        },\n    },\n}\n<script>\n<style>\n</style>\n'}}});const Te=j()(ke,[["render",Ve]]);var Se=Te,Ie=Object(o["d"])("<h1>Content projection</h1><p> To build a powerful application that is flexible and extensible, we should provide some outlets for content. Using the <code>slot</code> tag, we can pass not only the properties but also the HTML content to specific the components. That pattern enable us to build a flexible application with more reusable components. </p><h2> Single-slot </h2><p> To serve content into specific component we have to define the <code>slot</code> tag somewhere in the component template. That content distribution api allows us to compose components in more spohisticatd way. Defining a <code>slot</code> tag inside Child inorm Vue where it should place the content of data provided by parent component. The example below shows how to use that selector to render data from the parent component. The content will be rendered below header selector and above the footer. Each child component will be rendered in the same way. So that means that all child components will have a title and a footer but their &quot;body&quot; will be different depending on the data provided by parent. Now everthing within <code>child</code> tag will be rendered inside Child component inside the <code>slot</code> tag. </p><label>Child.vue</label>",5),Ce=Object(o["f"])("label",null,"Parent.vue",-1),Me=Object(o["d"])("<p> Taht content distribution pattern is a powerful tool to build flexible and extensible components. This could be used to build a common component that will be displaying different content on the dashboard. This could be also a template for a blog post and so on. </p><h2> Multiple-slots </h2><p> Sometimes to compose components we will need more than one slot. It could be easly resolved by adding a <code>name</code> attribute to the <code>slot</code> tag. The name attribute creates a unique named outlet for the component. If we do not provide that attribute to the slot tag by default it will have &quot;default&quot; name. To use that named outlet we have to use the <code>template</code> tag with additional directive <code>v-slot:name</code> where name is the name of the slot in child component. </p><label>Child.vue</label>",4),Pe=Object(o["f"])("label",null,"Parent.vue",-1);function Be(e,t,n,a,i,c){var s=Object(o["u"])("highlightjs");return Object(o["o"])(),Object(o["c"])("div",null,[Ie,Object(o["f"])(s,{language:"vue",code:e.code0child},null,8,["code"]),Ce,Object(o["f"])(s,{language:"vue",code:e.code0parent},null,8,["code"]),Me,Object(o["f"])(s,{language:"vue",code:e.code1child},null,8,["code"]),Pe,Object(o["f"])(s,{language:"vue",code:e.code1parent},null,8,["code"])])}var We=Object(o["g"])({name:"Slots",components:{highlightjs:ce["a"].component},data:function(){return{code0child:"<template>\n    <div>\n        <h1>Header of child</h1>\n        <slot></slot>\n        <footer>Footer of child</footer>\n    </div>\n</template>\n<script>\nexport default { }\n<script>",code0parent:'<template>\n    <div>\n        <child>\n            <section>\n                <h2>Parent section to be displayed</h2>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n            </section>\n        </child>\n    </div>\n</template>\n<script>\nimport Child from "./Child.vue";\nexport default {\n    components: {\n        Child\n    },\n}\n<script>',code1child:'<template>\n    <div>\n        <slot name="header"></slot>\n        <slot></slot>\n        <footer>Footer of child</footer>\n    </div>\n</template>\n<script>\nexport default { }\n<script>',code1parent:'<template>\n    <div>\n        <child>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n            <template v-slot:header>\n                <h2>Parent section to be displayed</h2>\n            </template>\n        </child>\n    </div>\n</template>\n<script>\nimport Child from "./Child.vue";\nexport default {\n    components: {\n        Child\n    },\n}\n<script>'}}});const Le=j()(We,[["render",Be]]);var He=Le,Ae=Object(o["f"])("h1",null,"Extending the component",-1),De=Object(o["f"])("p",null,' In Vue.js there are multiple ways how to extend components. For Vue.js that is possible but it is not commonly used aproach. We should try to follow the rule "Composition over Inheritance" where we try to use our components as a composition of other components. But this approach is not always possible or not always suits our needs. We may need to create a Mixin or other more advanced pattenrs to our code. But let me start from the strach. ',-1),_e=Object(o["f"])("h2",null,"Component Inheritance",-1),qe=Object(o["f"])("p",null,' Like in Angular we can use inheritance mechanism to create a new child component that share some logic from the parent component. This approach has some pros and cons and we should be aware of them while we are designing our application. Components in Vue.js are some kind of class components so we can think of them as classes that can be inheritated. Inheritance approach may add some complexity to code so think twice before you decide to use this pattern instead the simpler ones like using "Slots", "Props-driven teplate" or "JavaScript utility functions". ',-1),Fe=Object(o["f"])("label",null,"WeatherBase.vue",-1),Ee=Object(o["f"])("p",null," At the beginning we have a base component that contain the Weather data. The base component have defined basic template that can be but doesnt have to be overriden. The next step is to create a child component that will inherit the base component. ",-1),Ne=Object(o["f"])("p",null," (Yeah I know that there should be an logic that will be responsible for fetching the data from the server but the point is that the base component has some logic that is common for all the child components.) ",-1),ze=Object(o["f"])("label",null,"WeatherSummary.vue",-1),Je=Object(o["f"])("label",null,"WeatherDetails.vue",-1),$e=Object(o["f"])("p",null,[Object(o["e"])(" Using the "),Object(o["f"])("b",null,"extends"),Object(o["e"])(" property in child component we can inherit the WeatherBase component. The child class will have all properties of the parent component. If we define in child a property that exists in the parent class it will be overwritten. What is more if we do not define a "),Object(o["f"])("code",null,"template"),Object(o["e"])(" tag in the child component it will inherit the parent template. ")],-1),Re=Object(o["f"])("h2",null,"Mixins",-1),Ue=Object(o["f"])("p",null,[Object(o["e"])(" Other way to extend the component is to use the "),Object(o["f"])("b",null,"Mixins"),Object(o["e"])(' property. Mixin pattern helps to organize features and spread them into a separate objects. This approach lets us control which logic we want to share and reuse between components. Mixin is merged into the specific component so we can say that all options inside the mixin are "mixed" into the component. This pattern may be useful if we work with a simple scenario but for more complex project we have to be aware of naming collisions and other downsides of the mixins. Sometiems (especially for component that use more than one mixin) it will be hard to understand what a component does or how it works. ')],-1),Ye=Object(o["f"])("label",null,"notification.js",-1),Ge=Object(o["f"])("p",null,[Object(o["e"])(" This notification mixin is responsible for showing the notification. We can imagine that many components can use this mixin to share the notification logic. So to use it we just need to import that mixin and add it to the component property "),Object(o["f"])("b",null,"mixins"),Object(o["e"])(". ")],-1),Ke=Object(o["f"])("label",null,"Player.vue",-1),Qe=Object(o["f"])("p",null,' Now this "Player component" will have all the functionality of the "notification" mixin. We have to remember that the mixin is merged into the component so if we change the properties of the mixin it will change only for this component. ',-1),Xe=Object(o["f"])("p",null,[Object(o["e"])(" Sometimes we will have situation when the mixin contain the overlapping options. By default Vue.js will merge the options in the order of the mixins using appropriate strategies. Options that expect object values, for example methods, components and directives, will be merged into the same object. But Hook functions with the same name will be merged into an array so all of them will be called. Keep in mind that mixin hooks will be called before the component's hooks. There are also some other strategies that can be used to merge the options but more details can be found in the "),Object(o["f"])("a",{href:"https://vuejs.org/v2/guide/mixins.html"},"official documentation"),Object(o["e"])(". ")],-1),Ze=Object(o["f"])("h2",null,"High Order Components (HOC)",-1),et=Object(o["f"])("p",null," Last concept that can help us to exdent the component is a architectural pattern called High Order Components (HOC). It was borrowed from the React where this pattern is very popular. Main purpouse is to enhance a component's functionality by wrapping it into a function to return another component. This pattern is more complex than the other two but can provide a lot of possibilities and keep the code clean and scalabe. It add an additional wrapper component to our code but it sill will be more organized than the prevoius ones. ",-1),tt=Object(o["f"])("label",null,"HoComponent.js",-1),nt=Object(o["f"])("p",null,[Object(o["e"])(" This is the HoComponent.js file. It is a function that takes a component and adds some functionality to it. This new component will contain additional property that will be used to enhance the original component. To find more about HOC you can read some of the articles on the web. One of the expample on which I based on was from "),Object(o["f"])("a",{href:"https://pusher.com/tutorials/higher-order-components-vue/"},"Pusher.com"),Object(o["e"])(". ")],-1);function ot(e,t,n,a,i,c){var s=Object(o["u"])("highlightjs");return Object(o["o"])(),Object(o["c"])("div",null,[Ae,De,_e,qe,Fe,Object(o["f"])(s,{language:"vue",code:e.code0},null,8,["code"]),Ee,Ne,ze,Object(o["f"])(s,{language:"vue",code:e.code1},null,8,["code"]),Je,Object(o["f"])(s,{language:"vue",code:e.code2},null,8,["code"]),$e,Re,Ue,Ye,Object(o["f"])(s,{language:"javascript",code:e.code3},null,8,["code"]),Ge,Ke,Object(o["f"])(s,{language:"vue",code:e.code3vue},null,8,["code"]),Qe,Xe,Ze,et,tt,Object(o["f"])(s,{language:"javascript",code:e.code4},null,8,["code"]),nt])}var at=Object(o["g"])({name:"Extend",components:{highlightjs:ce["a"].component},data:function(){return{code0:"<template>\n    <div>\n        <h1>Weather widget</h1>\n    </div>\n</template>\n<script>\nexport default {\n  name: \"WeatherBase\",\n  data() {\n      return {\n          weather: {\n              day: 'Monday',\n              forecast: 'Snow',\n              temperature: '13°C',\n              wind: 'N',\n              windSpeed: '50km/h',\n              humidity: '50%'\n          }\n      }\n  }\n};\n<script>\n<style>\n</style>\n",code1:"<template>\n    <div>\n        <span>{{weather.day}}</span>\n    <div>\n        <span>{{weather.forecast}}</span>\n        <span>{{weather.temperature}}</span>\n    </div>\n</div>\n</template>\n<script>\nimport WeatherBase from './WeatherBase.vue';\n\nexport default {\n  name: \"WeatherDetails\",\n  extends: WeatherBase,\n};\n<script>\n<style>\n</style>\n",code2:"<template>\n<div>\n    <span>{{weather.day}}</span>\n    <div>\n        <span>{{weather.forecast}}</span>\n        <span>{{weather.temperature}}</span>\n        <span>{{weather.wind}} {{weather.windSpeed}}</span>\n        <span>{{weather.humidity}}</span>\n    </div>\n</div>\n</template>\n<script>\nimport WeatherBase from './WeatherBase.vue';\n\nexport default {\n  name: \"WeatherSummary\",\n  extends: WeatherBase,\n};\n<script>\n<style>\n</style>\n",code3:"export default {\n  data() {\n    return {\n      notificationVisible: false,\n    }\n  },\n  methods: {\n    showNotification() {\n      this.notificationVisible = true;\n    },\n    hideNotification() {\n      this.notificationVisible = false;\n    },\n  },\n}",code3vue:'<template>\n<div>\n  <button @click="showNotification">Show notification</button>\n</div>\n</template>\n<script>\nimport notificationMixin from \'./notification.js\';\n\nexport default {\n  name: "Player",\n  mixins: [notificationMixin],\n  ...\n}\n<script>\n<style>\n</style>',code4:'const HoC = (component, additionalMethod) => {\n  return Vue.component("HoC", {\n    render(createElement, context) {\n      return createElement(component, {\n        props: {\n          returnedData: this.returnedData\n        }\n      });\n    },\n    data() {\n      return {\n        returnedData: additionalMethod()\n      };\n    }\n  });\n};\nexport default HoC;'}}});const it=j()(at,[["render",ot]]);var ct=it,st=Object(o["d"])("<h1>Directives in Vue.js</h1><p> In Vue.js like in Angular we can use some build-in directives that can add some additional behavior to our components. Unlike in Angular documentation in Vue directives are not directly named and divided to specific structural or attribute directives. But nothing stands in the way of using them. Directives are special attributes with the <code>v-</code> prefix that expect a single JavaScript expression as a value. If that value changes the Vue.js engine will apply the changes to the element regarding the directive. One of the most common directive in Vue is <code>v-bind</code> that is used to bind any data or property to the element because mustaches cannot be used inside HTML attributes. The second one that we have seen is the <code>v-on</code> directive that is used to listening the DOM events. </p><h2>Build-in attribute directives</h2><p> Using that concept we can bind any data to specific elements to manipulate them. Very often we need to manipulate the element class list or its inline styles so to do that in Vue.js we can attach the <code>v-bind</code> directive to the proper attribute. In our expression we only need to generate the final string value that we want to bind to the element. </p><h3>v-bind:class</h3><p> Attaching the v-bind directive to the class attribute will inform the Vue.js that we want to bind the class attribute to the result of our expression. In that way we can add or remove CSS classes to the element dynamically. If expression returns a <code>true</code> the class will be added to the element, otherwise it will be removed. </p><label>directive.vue</label>",7),rt=Object(o["f"])("p",null,[Object(o["e"])(" In that case we attached the v-bind directive to the class attribute of the div element. This directive will receive a object with the CSS classes that we want to add or remove depending on the state of our component. The 'selected' class will be added always because the expression is always true, but the 'disabled' class will be added only if the "),Object(o["f"])("code",null,"isAdmin()"),Object(o["e"])(" method returns false. ")],-1),lt=Object(o["f"])("p",null," We can also combine that directive with simple class attribute. Using this approach we can add static CSS classes to the element and extend it with dynamic classes that will be based on the component state. ",-1),dt=Object(o["f"])("label",null,"Login.vue",-1),ht=Object(o["d"])("<p> In this example we can see that the <code>div</code> element will always have the <code>card</code> and <code>card--title</code> classes. But if the <code>isValid</code> property is <code>false</code> this directive will add the <code>card--error</code> class to this HTML element. This time we used the array syntax instead of object to define the classes. If we do it in this way we can also bind the CSS classes result to the data property of the component. Very often to write a clean code we can combine that directive with &quot;computed&quot; property where all the logic is placed and returns a string class name. </p><h3>v-bind:style</h3><p> The same syntax works for the style attribute. This one is responsible for manipulating the inline styles based on the provided expression. </p><label>InputLabel.vue</label>",4),pt=Object(o["d"])("<p> In this example depending on the provided properties we can change the style of the input label. If we pass the <code>required</code> property the &quot;Label text&quot; will be bolded. In <code>inputStyles</code> object we manipulate the CSS selectors and base on the state of the component we can change them to specific value. Easy and understandable. Isn&#39;t it? </p><h3>Attribute directives shorthand</h3><p> The <code>v-</code> prefix is a identification for Vue.js attributes that are in the template. But sometimes we work on the project where every template is managed by Vue so we can reduce the amount of code by using the shorthand. </p><ul><li><code>v-bind:href</code> =&gt; <code>:href</code> - we reduce the whole v-bind closure </li><li><code>v-on:click</code> =&gt; <code>@click</code>- we replace that directive with a &quot;@&quot; symbol </li></ul><h2>Build-in structural directives</h2><p> In Vue.js we can conditionally render a specific HTML elements depenging on the result of the structural directive expression. This directives can modify the DOM structure by adding or removing elements. </p><h3>v-if</h3><p> The v-if directive is used to conditionally render or not a specific HTML block. If the condition expression returns a truthy value the specific code block will be rendered. Otherwise the block will be removed. This directive is a nice guard against the null value. For example if we want to display the name property of the user object we can use the <code>v-if</code> to check if the user object is not null. </p><label>Basket.vue</label>",9),ut=Object(o["f"])("p",null," Here we can see that the amount of items in basket is displayed only when there is more than 0 items. ",-1),mt=Object(o["f"])("p",null,[Object(o["e"])(" The v-if directive can be extended with the "),Object(o["f"])("code",null,"v-else"),Object(o["e"])(" directive that will be rendered when the condition of previous v-if is false. This is useful when we want to present a loading indicator when the data is being fetched and when the data is ready we want to render the component. ")],-1),bt=Object(o["f"])("label",null,"Basket.vue",-1),ft=Object(o["f"])("h3",null,"v-show",-1),vt=Object(o["f"])("p",null,[Object(o["e"])(" v-if directive is used to conditionally render an HTML element. But sometimes we just want to show or hide that element. In that case we can use the "),Object(o["f"])("code",null,"v-show"),Object(o["e"])(" directive. The v-show directive change the CSS display property, when from the other side the v-if directive decide about rendering that code block or not. This slight difference may affect the performance of the application because when we are using v-show everything inside that tag will be rendered but won't be visible. So it does not protect us from the null value. ")],-1),wt=Object(o["f"])("h3",null,"v-for",-1),jt=Object(o["f"])("p",null,[Object(o["e"])(" Finally the "),Object(o["f"])("code",null,"v-for"),Object(o["e"])(" directive. It is responsible for iterating over the array of objects. It will present the list of items based on the host HTML block. This host block will be the definition how Vue.js should present that list. This directive requires a string instruction that define the single item from the specified array. Like in this example "),Object(o["f"])("code",null,'v-for="let item of items"'),Object(o["e"])(". We create a variable item from the items array. ")],-1),gt=Object(o["f"])("label",null,"Orders.vue",-1),Ot=Object(o["f"])("p",null,[Object(o["e"])(" In this case we want to present the list of orders and each order will be represented by a "),Object(o["f"])("code",null,"div"),Object(o["e"])(" element that innerText will be the name property of the order. ")],-1),yt=Object(o["f"])("p",null,[Object(o["e"])(" The "),Object(o["f"])("code",null,"v-for"),Object(o["e"])(" directive context may return the zero-based index of the item in each iteration. So we can get the index of the item variable that we used in the template. To do that we can extract the second argument form the array and then use it as a variable. ")],-1),xt=Object(o["f"])("label",null,"Orders.vue",-1),Vt=Object(o["f"])("p",null," Sometimes we want to render a dynamic list of items that can be changed when the component receives new data. In this case every change in the data array will cause the whole list to be re-rendered. To prevent this we can use the key property that is responsible for tracking changes in the data array. To do that we only have to bind that attribute with proper value. In this case we want to use the id of the item as a key. ",-1),kt=Object(o["f"])("label",null,"Orders.vue",-1),Tt=Object(o["f"])("h2",null,"Custom directives",-1),St=Object(o["f"])("p",null,[Object(o["e"])(" Vue allows us to create our own directives. That can be useful when we want create reusable code that realize specific functionality. This concept is well described in the "),Object(o["f"])("a",{href:"https://vuejs.org/v2/guide/custom-directive.html"},"official documentation"),Object(o["e"])(". ")],-1);function It(e,t,n,a,i,c){var s=Object(o["u"])("highlightjs");return Object(o["o"])(),Object(o["c"])("div",null,[st,Object(o["f"])(s,{language:"vue",code:e.code0},null,8,["code"]),rt,lt,dt,Object(o["f"])(s,{language:"vue",code:e.code1},null,8,["code"]),ht,Object(o["f"])(s,{language:"vue",code:e.code2},null,8,["code"]),pt,Object(o["f"])(s,{language:"vue",code:e.code3},null,8,["code"]),ut,mt,bt,Object(o["f"])(s,{language:"vue",code:e.code3a},null,8,["code"]),ft,vt,wt,jt,gt,Object(o["f"])(s,{language:"vue",code:e.code4},null,8,["code"]),Ot,yt,xt,Object(o["f"])(s,{language:"vue",code:e.code4a},null,8,["code"]),Vt,kt,Object(o["f"])(s,{language:"vue",code:e.code4b},null,8,["code"]),Tt,St])}var Ct=Object(o["g"])({name:"DirectivesView",components:{highlightjs:ce["a"].component},data:function(){return{code0:"<div v-bind:class=\"{'selected': true, 'disabled': !isAdmin()}\">\n      Hello User!\n</div>\n",code1:"<div class=\"card card--title\" v-bind:class=\"[isValid ? '' : 'card--error']\">\n      <h2>Login form</h2>\n</div>\n",code2:"<template>\n  <span v-bind:style=\"inputStyles\">Label text</span>\n</template>\n<script>\nexport default {\n    props: ['required', 'disabled'],\n    data() {\n        return {\n            inputStyles: {\n                fontWeight: this.required ? 'bold' : 'normal',\n                color: this.disabled ? '#999' : '#000',\n            };\n        }\n    }\n}\n<script>\n",code3:'<span v-if="basketItems > 0"> You have {{basketItem}} items in your basket.</span>',code3a:'<span v-if="basketItems > 0">\n  You have {{basketItem}} items in your basket.\n</span>\n<span v-else>\n  Your basket is empty.\n</span>',code4:'<div v-for="let item in basketProducts">{{item.name}}</div>',code4a:'<div v-for="let (item, i) in basketProducts">\n  {{i+1}}: {{item.name}}\n</div>',code4b:'<div v-for="let (item, i) in basketProducts :key=item.id">\n  {{i+1}}: {{item.name}}\n</div>'}}});const Mt=j()(Ct,[["render",It]]);var Pt=Mt,Bt=Object(o["f"])("h1",null,"Vuex - Vue.js Store concept",-1),Wt=Object(o["f"])("p",null,' This will be more advanced topic for the Web-Developer. Vuex is a state management pattern for Vue.js applications. This pattern is build around the concept of "one-way data flow" where View components get data from the Store and update the state by dispatching specific actions that mutate the Store state. In this pattern the "state" is the single source of truth that handles all the data. View components can map the state to the local variables and display the data. This is a very powerful pattern where we need to change the value in one place and the change will be reflected in all the other places. ',-1),Lt=Object(o["f"])("p",null,' OK. But why? Well, the answer is simple. If our application is growing larger and larger, and the components relationships are becoming more complex, we need to make sure that the valid data is being shared between the components. This is where Vuex comes in. We don\'t need to worry about the passing props and synchronizing the data between the components. Vuex store can be treated as a global singleton that holds the state of whole application. Dan Abramov, the author of Redux said that: "Flux libraries are like glasses: you’ll know when you need them." ',-1),Ht=Object(o["f"])("h2",null,"Store state and mutations",-1),At=Object(o["f"])("p",null," Basic purpose of the store is to hold the state of the application. To do this we need to install the Vuex library and then we can create a new store instance. ",-1),Dt=Object(o["f"])("label",null,"Store.js",-1),_t=Object(o["d"])("<p> The Vuex object must be attached to the global Vue instance. Base on that we can access the store from any Vue component by using the <code>this.$store</code> property. The dollar sign is a convention to access the property of the global Vue instance. </p><p> As we know the Vue.js framework must have the initial point where the application is attached. So somewhere in the <code>main.js</code> file we can create this store instance or import it from the separate file. There we should place this <code>Vue.use()</code> method. </p><p> Ok. Now we have our Vuex store object. We have defined there a <code>state</code> property which will be responsible for holding the state of the application. By default the Vuex Store use reactive data structures. This means that the value of an object is automatically updated when the state changes. This is the reason why we can&#39;t change the state directly. To change it we need to commit and mutation that will perform some operation on the state. </p><p> In our case we have the <code>items</code> array that holds the list of items in our shopping cart. Only way how we can update this array is using the <code>addItem()</code> mutation. To do that we must use our store reference and call the <code>commit()</code> method. As the first argument we must pass the name of the mutation. The second argument is the payload that will be passed into it. The example below shows how to add an book item to the shopping cart. </p><label>BookItem.vue</label>",5),qt=Object(o["d"])("<p> Well, we added a new item to the shopping cart but we need to know what is inside our basket. That will be very easy because as I said before the Store object is assigned to the global Vue instance so we can access it from any Vue component. Using the <code>this.$store.state</code> property we can access the state of the store and then we can access the <code>items</code> array. So we can get the list of items in the shopping cart using this <code>this.$store.state.items</code> code. </p><p> Nice, but still not perfect. Sometimes we will have a nested object that we need to access and to solve this problem we can use the <code>computed</code> property of the Vue component. Using it we can simplify the code and make it more readable. What is more we can modify the items array before we use it by adding some additional logic to the <code>computed</code> property. But this time we will only create a <code>basket</code> computed property that will return the list of items that are in the shopping cart. </p><label>Basket.vue</label>",3),Ft=Object(o["f"])("h2",null,"Getters",-1),Et=Object(o["f"])("p",null,[Object(o["e"])(' We have already seen how to access the specific state of the store. But sometimes we need more specific information for our components. For example if we do not have any items in the shopping cart we should not display the "Checkout" button. But on the other hand we want know how many items are currently in our basket. To solve that issue we can use the '),Object(o["f"])("code",null,"getters"),Object(o["e"])(" property of the Vuex. ")],-1),Nt=Object(o["f"])("label",null,"Store.js",-1),zt=Object(o["f"])("p",null,[Object(o["e"])(" We can treat the "),Object(o["f"])("code",null,"getters"),Object(o["e"])(" property as the computed property of the Vue component but for the whole store. To access the getters we need to use the "),Object(o["f"])("code",null,"this.$store.getters"),Object(o["e"])(" property and this is an object where each getter is a separate property. So finally we can access to the count of the items in the shopping cart using the "),Object(o["f"])("code",null,"this.$store.getters.itemsCount"),Object(o["e"])(" statement. ")],-1),Jt=Object(o["f"])("p",null," Ok but what if we want to filter the items in the shopping cart without modifying the state? We can create a parametrized getter that can receive an argument and return the filtered list. ",-1),$t=Object(o["f"])("label",null,"Store.js",-1),Rt=Object(o["f"])("label",null,"Basket.vue",-1),Ut=Object(o["d"])("<h2>Actions</h2><p> Last but not least is the <code>actions</code> property. Ok but what is the difference between between the <code>mutations</code> and <code>actions</code>? The <code>mutations</code> are used to change the state of the store. The <code>actions</code> are used to perform some asynchronous operation. For example we can add an item to the shopping cart using the <code>addItem()</code> mutation. But if we want to make an order we will need to make an asynchronous request to the server. And in this case we need to use the <code>makeOrder()</code> action. </p><label>Store.js</label>",3),Yt=Object(o["f"])("p",null,[Object(o["e"])(" Actions very often commit mutations. Like in this example above. But how we can use this action in our client code? We need to invoke the "),Object(o["f"])("code",null,"this.$store.dispatch()"),Object(o["e"])(" method and pass the name of the action as the first argument. Again the second argument is the payload that will be passed into the action if it is needed. Action handlers receive a context object which exposes store instance methods so you can access the state and getters using "),Object(o["f"])("code",null,"context.state"),Object(o["e"])(" or "),Object(o["f"])("code",null,"context.getters"),Object(o["e"])(" statements. ")],-1),Gt=Object(o["f"])("label",null,"Basket.vue",-1),Kt=Object(o["f"])("p",null,' The main flaw of this "commits" and "dispatches" approach is that we can only pass one argument as a payload, so if we want to pass more arguments we need send an object with valid properties. ',-1),Qt=Object(o["f"])("h2",null,"Modules",-1),Xt=Object(o["f"])("p",null,[Object(o["e"])(" Vuex may growing with our application in time and the store can get really bloated. So we can split the store into smaller modules where each module will have its own state, mutations, getters and actions. In this way we can invoke the inner module state inside actions by using the same "),Object(o["f"])("code",null,"context.state"),Object(o["e"])(" statement. Additionally in this actions we can access to the root module state using the "),Object(o["f"])("code",null,"context.rootState"),Object(o["e"])(". You can also notice that the sub-module do not need this "),Object(o["f"])("code",null,"new Vuex.Store()"),Object(o["e"])(" initialization. ")],-1),Zt=Object(o["f"])("label",null,"OrderStore.js",-1),en=Object(o["f"])("label",null,"Store.js",-1),tn=Object(o["f"])("p",null,[Object(o["e"])(" This was the general concept of the Vuex state management. The more detailed explanation can be found in the "),Object(o["f"])("a",{href:"https://vuex.vuejs.org/#what-is-a-state-management-pattern"},"official documentation"),Object(o["e"])(". ")],-1);function nn(e,t,n,a,i,c){var s=Object(o["u"])("highlightjs");return Object(o["o"])(),Object(o["c"])("div",null,[Bt,Wt,Lt,Ht,At,Dt,Object(o["f"])(s,{language:"javascript",code:e.code0},null,8,["code"]),_t,Object(o["f"])(s,{language:"vue",code:e.code0a},null,8,["code"]),qt,Object(o["f"])(s,{language:"vue",code:e.code0b},null,8,["code"]),Ft,Et,Nt,Object(o["f"])(s,{language:"vue",code:e.code1},null,8,["code"]),zt,Jt,$t,Object(o["f"])(s,{language:"vue",code:e.code1a},null,8,["code"]),Rt,Object(o["f"])(s,{language:"vue",code:e.code1b},null,8,["code"]),Ut,Object(o["f"])(s,{language:"vue",code:e.code2},null,8,["code"]),Yt,Gt,Object(o["f"])(s,{language:"vue",code:e.code2a},null,8,["code"]),Kt,Qt,Xt,Zt,Object(o["f"])(s,{language:"javascript",code:e.code3},null,8,["code"]),en,Object(o["f"])(s,{language:"javascript",code:e.code3a},null,8,["code"]),tn])}var on=Object(o["g"])({name:"DirectivesView",components:{highlightjs:ce["a"].component},data:function(){return{code0:"import Vue from 'vue' \nimport Vuex from 'vuex'\n\n//attach Vuex library to global Vue instance\nVue.use(Vuex) \n\nconst store = new Vuex.Store({\n  state: {\n    items: [],\n  },\n  mutations: {\n    addItem(state, item) {\n      state.items.push(item);\n    }\n  },\n})",code0a:"...\nmethods: {\n  addBook() {\n    this.$store.commit('addItem', new Book())\n  }\n}\n",code0b:"...\ncomputed: {\n  basket() {\n    return this.$store.state.items;\n  }\n}\n",code1:"...\nconst store = new Vuex.Store({\n  ...\n\n  getters: {\n    itemsCount: (state) => {\n      return state.items.length;\n    }\n  }\n})",code1a:"...\nconst store = new Vuex.Store({\n  ...\n\n  getters: {\n    priceFilter: (state) => (price) =>{\n      return state.items.filter(item => item.price > price);\n    }\n  }\n})",code1b:"...\ndata() {\n  return {\n    minPrice: 20\n  }\n},\ncomputed: {\n  filteredItems() {\n    return this.$store.getters.priceFilter(this.minPrice);\n  }\n}\n",code2:"...\nconst store = new Vuex.Store({\n  ...\n\n  actions: {\n    makeOrder(context) {\n      Axios.post('/api/order', context.state.items).then(() => {\n        context.commit('clearItems');\n      }).catch(() => {\n        alert('Failed to make an order');\n      });\n    }\n  }\n})",code2a:"...\n\nmethods: {\n  makeOrder() {\n    this.$store.dispatch('makeOrder');\n  }\n}\n",code3:"...\nconst orderStore = {\n  ...\n\n  actions: {\n    makeSubOrder(context) {\n      console.log(context.rootState.items);\n      context.commit('clearItems');\n    }\n  }\n}",code3a:"...\nconst store = new Vuex.Store({\n  ...\n\n  modules: {\n    order: orderStore\n  }\n\n})"}}});const an=j()(on,[["render",nn]]);var cn=an,sn=[{path:"/",name:"Home",component:q},{path:"/project-initialization",name:"ProjectInitialization",component:J},{path:"/simple-component",name:"SimpleComponent",component:le},{path:"/props-component",name:"PropsComponent",component:Se},{path:"/slots-component",name:"SlotsComponent",component:He},{path:"/extend-component",name:"ExtendComponent",component:ct},{path:"/directives-component",name:"DirectivesComponent",component:Pt},{path:"/store-component",name:"StoreComponent",component:cn}],rn=Object(B["a"])({history:Object(B["b"])(),routes:sn}),ln=rn,dn=n("5502"),hn=Object(dn["a"])({state:{},mutations:{},actions:{},modules:{}}),pn=n("1020"),un=n.n(pn),mn=n("ee8c"),bn=n.n(mn),fn=n("8dcb"),vn=n.n(fn),wn=n("4dd1"),jn=n.n(wn),gn=n("8ed1"),On=n.n(gn);n("8da8");un.a.registerLanguage("javascript",jn.a),un.a.registerLanguage("html",vn.a),un.a.registerLanguage("css",bn.a),un.a.registerLanguage("vue",On.a),Object(o["b"])(P).use(hn).use(ln).use(ce["a"]).mount("#app")},d9bf:function(e,t,n){},dd2c:function(e,t,n){}});
//# sourceMappingURL=app.df511831.js.map